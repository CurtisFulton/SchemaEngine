IF OBJECT_ID(N'Extension_Asset', N'V') IS NOT NULL
    DROP VIEW [dbo].[Extension_Asset]
GO
CREATE VIEW [dbo].[Extension_Asset] 
AS 
SELECT        dbo.Asset.AssetID, CAST(0 AS bit) AS IsNew, CAST(CASE WHEN Asset.isAsset = 1 THEN 0 WHEN ISNULL(dbo.vwCatalogueAssetCount.AssetCount, 0) > 1 THEN 1 ELSE 0 END AS bit) AS IsAllowDuplicates,  
                         CAST(0 AS bit) AS PMDetailsChanged, CAST(NULL AS int) AS OldAssetTypeID, CAST(NULL AS int) AS OldManufacturerID, CAST(NULL AS int) AS OldModelNumberID, CAST(CASE WHEN Asset.IsAsset = 1 THEN NULL 
                          ELSE dbo.Catalogue.CatalogueNumber END AS nvarchar) AS CatalogueNumber, CAST(CASE WHEN Asset.IsAsset = 1 THEN NULL ELSE dbo.Catalogue.CatalogueDescription END AS NVARCHAR(4000))  
                         AS CatalogueDescription, CAST(CASE WHEN Asset.IsAsset = 1 THEN NULL ELSE dbo.CatalogueGroup.CatalogueGroupName END AS nvarchar) AS CatalogueGroupName,  
                         CAST(CASE WHEN Asset.IsAsset = 1 THEN NULL ELSE dbo.CatalogueClass.CatalogueClassName END AS nvarchar) AS CatalogueClassName, ISNULL(Contact_1.FirstName, N'')  
                         + N' ' + ISNULL(Contact_1.LastName, N'') AS CreatedByContactFullName,  
                         CAST(CASE WHEN Asset.MarkupTypeName = 'Fixed Price' THEN dbo.asset.MarkupAmount WHEN Asset.MarkupTypeName = 'Percentage' THEN (dbo.asset.UnitPrice + (dbo.asset.UnitPrice * dbo.asset.MarkupAmount)) 
                          WHEN Asset.MarkupTypeName = 'Amount' THEN (dbo.asset.UnitPrice + dbo.asset.MarkupAmount) ELSE dbo.Asset.UnitPrice END AS money) AS SellPrice, dbo.Store.StoreName,  
                         dbo.BinLocation.BinLocationName, Asset_1.AssetNumber AS SiteName, dbo.Tax.TaxName, CAST(ISNULL(dbo.Tax.TaxPercentage, 0) AS Numeric(18, 7)) AS TaxPercentage, dbo.UOM.UOMName,  
                         dbo.Catalogue.UOMID, CAST(CASE WHEN Asset.IsAsset = 1 THEN 0 ELSE dbo.Catalogue.IsCatalogued END AS bit) AS IsCatalogued, CAST(1 AS numeric(18, 7)) AS IssueQty,  
                         ISNULL(dbo.vwCatalogueSupplierCount.CatalogueSupplierCount, 0) AS CatalogueSupplierCount, dbo.Department.DepartmentName, dbo.AccountCode.AccountCodeName,  
                         CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE dbo.Contact.FirstName END AS nvarchar) AS CustomerName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE ISNULL(Contact_2.FirstName, N'')  
                         + N' ' + ISNULL(Contact_2.LastName, N'') END AS nvarchar) AS ContractorName, dbo.vwAssetReadingsCurrent.Reading AS LastReading, dbo.vwAssetReadingsCurrent.ReadingDateTime AS LastReadingDateTime,  
                         CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE FrequencyTypeName END AS nvarchar) AS FrequencyTypeName, Asset_1.AssetNumber AS ParentAssetNumber,  
                         CAST(CASE WHEN Asset.IsAsset = 0 THEN 0 WHEN ISNULL(dbo.vwAssetDocumentCount.DocumentCount, 0) > 0 THEN 1 ELSE 0 END AS bit) AS HasDocs,  
                         CAST(CASE WHEN Asset.IsAsset = 0 THEN 0 WHEN ISNULL(dbo.vwAssetDrawingCount.DrawingCount, 0) > 0 THEN 1 ELSE 0 END AS bit) AS HasDrawings,  
                         CAST(CASE WHEN Asset.IsAsset = 0 THEN 0 WHEN ISNULL(dbo.vwAssetToDoListCount.ToDoListCount, 0) > 0 THEN 1 ELSE 0 END AS bit) AS HasToDos, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL  
                         ELSE CurrentAssetMovementID END AS int) AS CurrentAssetMovementID, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE AssetTypeName END AS nvarchar) AS AssetTypeName,  
                         CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE ManufacturerName END AS nvarchar) AS ManufacturerName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE ModelNumberName END AS nvarchar)  
                         AS ModelNumberName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE AssetStatusName END AS nvarchar) AS AssetStatusName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL  
                         ELSE ColourName END AS nvarchar) AS ColourName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE FuelType.FuelTypeName END AS nvarchar) AS PrimaryFuelTypeName,  
                         CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE FuelType_1.FuelTypeName END AS nvarchar) AS SecondaryFuelTypeName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL  
                         ELSE ISNULL(Contact_3.FirstName, N'') + N' ' + ISNULL(Contact_3.LastName, N'') END AS nvarchar) AS DriverName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE TankUnitName END AS nvarchar)  
                         AS TankUnitName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE Asset_2.AssetNumber END AS nvarchar) AS ReplacedVehicleName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL  
                         ELSE Asset_2.RegistrationNumber END AS nvarchar) AS ReplacedVehicleRegoNumber, ISNULL(Contact_4.FirstName, N'') AS SupplierName,  
                         CAST(dbo.Asset.ReplacementValue - dbo.Asset.SalvageValue AS numeric(18, 7)) AS ChangeOverValue, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE ISNULL(Contact_5.FirstName, N'') END AS nvarchar)  
                         AS FinanceSupplierName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE ISNULL(Contact_6.FirstName, N'') END AS nvarchar) AS WarrantySupplierName, ISNULL(Contact_7.FirstName, N'')  
                         AS InsuranceSupplierName, CAST(dbo.Asset.NumberOfRepayments * dbo.Asset.RepaymentAmount AS numeric(18, 7)) AS TotalLeasePayment, ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0)  
                         - ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) AS AvailableStock, ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) AS StockOnReserve,  
                         ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) AS StockOnHand, ISNULL(dbo.vwCatalogueStockOnOrder.StockOnOrder, 0) AS StockOnOrder, ISNULL(dbo.vwCatalogueListing.TotalQuantityRequisitioned,  
                         0) AS StockRequisitionedView, dbo.CatalogueGroup.CatalogueGroupID, dbo.CatalogueClass.CatalogueClassID, dbo.vwAssetReadingsCurrent.IsLast, CAST(CASE WHEN Asset.WarrantyFinishDateTime IS NULL  
                         AND Asset.WarrantyStartDateTime IS NULL AND IsNull(Asset.WarrantyPeriodReading, 0) = 0 AND isnull(asset.warrantyPeriodMonths, 0) = 0 THEN 0 ELSE 1 END AS bit) AS ValidateAssetWarranty, Asset.SequenceNumber 
FROM            dbo.Contact AS Contact_3 RIGHT OUTER JOIN 
                         dbo.Asset AS Asset_2 RIGHT OUTER JOIN 
                         dbo.vwCatalogueStockOnOrder RIGHT OUTER JOIN 
                         dbo.Asset LEFT OUTER JOIN 
                         dbo.AssetType ON dbo.Asset.AssetTypeID = dbo.AssetType.AssetTypeID LEFT OUTER JOIN 
                         dbo.Colour ON dbo.Asset.ColourID = dbo.Colour.ColourID LEFT OUTER JOIN 
                         dbo.vwAssetReadingsCurrent ON dbo.Asset.AssetID = dbo.vwAssetReadingsCurrent.AssetID AND dbo.Asset.FrequencyTypeID = dbo.vwAssetReadingsCurrent.FrequencyTypeID LEFT OUTER JOIN 
                         dbo.vwAssetLastAssetMovement ON dbo.Asset.AssetID = dbo.vwAssetLastAssetMovement.AssetID LEFT OUTER JOIN 
                         dbo.vwAssetToDoListCount ON dbo.Asset.AssetID = dbo.vwAssetToDoListCount.AssetID LEFT OUTER JOIN 
                         dbo.vwAssetDrawingCount ON dbo.Asset.AssetID = dbo.vwAssetDrawingCount.AssetID LEFT OUTER JOIN 
                         dbo.vwAssetDocumentCount ON dbo.Asset.AssetID = dbo.vwAssetDocumentCount.AssetID LEFT OUTER JOIN 
                         dbo.vwCatalogueSupplierCount ON dbo.Asset.CatalogueID = dbo.vwCatalogueSupplierCount.CatalogueID LEFT OUTER JOIN 
                         dbo.vwCatalogueAssetCount ON dbo.Asset.CatalogueID = dbo.vwCatalogueAssetCount.CatalogueID LEFT OUTER JOIN 
                         dbo.vwCatalogueQuantityReserved ON dbo.Asset.AssetID = dbo.vwCatalogueQuantityReserved.AssetID LEFT OUTER JOIN 
                         dbo.vwCatalogueListing ON dbo.Asset.AssetID = dbo.vwCatalogueListing.AssetID ON dbo.vwCatalogueStockOnOrder.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN 
                         dbo.vwCatalogueStockOnHand ON dbo.Asset.AssetID = dbo.vwCatalogueStockOnHand.AssetID LEFT OUTER JOIN 
                         dbo.Contact AS Contact_7 ON dbo.Asset.InsuranceSupplierContactID = Contact_7.ContactID LEFT OUTER JOIN 
                         dbo.Contact AS Contact_6 ON dbo.Asset.WarrantySupplierContactID = Contact_6.ContactID LEFT OUTER JOIN 
                         dbo.Contact AS Contact_5 ON dbo.Asset.FinanceSupplierContactID = Contact_5.ContactID LEFT OUTER JOIN 
                         dbo.Contact AS Contact_4 ON dbo.Asset.SupplierContactID = Contact_4.ContactID ON Asset_2.AssetID = dbo.Asset.ReplacedVehicleAssetID LEFT OUTER JOIN 
                         dbo.TankUnit ON dbo.Asset.TankUnitID = dbo.TankUnit.TankUnitID ON Contact_3.ContactID = dbo.Asset.DriverContactID LEFT OUTER JOIN 
                         dbo.FuelType AS FuelType_1 ON dbo.Asset.SecondaryFuelTypeID = FuelType_1.FuelTypeID LEFT OUTER JOIN 
                         dbo.FuelType ON dbo.Asset.PrimaryFuelTypeID = dbo.FuelType.FuelTypeID LEFT OUTER JOIN 
                         dbo.AssetStatus ON dbo.Asset.AssetStatusID = dbo.AssetStatus.AssetStatusID LEFT OUTER JOIN 
                         dbo.ModelNumber ON dbo.Asset.ModelNumberID = dbo.ModelNumber.ModelNumberID LEFT OUTER JOIN 
                         dbo.Manufacturer ON dbo.Asset.ManufacturerID = dbo.Manufacturer.ManufacturerID LEFT OUTER JOIN 
                         dbo.FrequencyType ON dbo.Asset.FrequencyTypeID = dbo.FrequencyType.FrequencyTypeID LEFT OUTER JOIN 
                         dbo.Contact AS Contact_2 ON dbo.Asset.ContractorContactID = Contact_2.ContactID LEFT OUTER JOIN 
                         dbo.Contact ON dbo.Asset.CustomerContactID = dbo.Contact.ContactID LEFT OUTER JOIN 
                         dbo.AccountCode ON dbo.Asset.AccountCodeID = dbo.AccountCode.AccountCodeID LEFT OUTER JOIN 
                         dbo.Department ON dbo.Asset.DepartmentID = dbo.Department.DepartmentID LEFT OUTER JOIN 
                         dbo.Tax ON dbo.Asset.TaxID = dbo.Tax.TaxID LEFT OUTER JOIN 
                         dbo.Asset AS Asset_1 ON dbo.Asset.ParentAssetID = Asset_1.AssetID LEFT OUTER JOIN 
                         dbo.BinLocation ON dbo.Asset.BinLocationID = dbo.BinLocation.BinLocationID LEFT OUTER JOIN 
                         dbo.Store ON dbo.Asset.StoreID = dbo.Store.StoreID LEFT OUTER JOIN 
                         dbo.Contact AS Contact_1 ON dbo.Asset.CreatedByContactID = Contact_1.ContactID LEFT OUTER JOIN 
                         dbo.UOM RIGHT OUTER JOIN 
                         dbo.CatalogueGroup RIGHT OUTER JOIN 
                         dbo.CatalogueClass RIGHT OUTER JOIN 
                         dbo.Catalogue ON dbo.CatalogueClass.CatalogueClassID = dbo.Catalogue.CatalogueClassID ON dbo.CatalogueGroup.CatalogueGroupID = dbo.Catalogue.CatalogueGroupID ON  
                         dbo.UOM.UOMID = dbo.Catalogue.UOMID ON dbo.Asset.CatalogueID = dbo.Catalogue.CatalogueID 
WHERE        (dbo.vwAssetReadingsCurrent.IsLast = 'YES') OR 
                         (dbo.vwAssetReadingsCurrent.IsLast IS NULL)
GO

IF OBJECT_ID(N'Extension_Easytime', N'V') IS NOT NULL
    DROP VIEW [dbo].[Extension_Easytime]
GO
CREATE VIEW dbo.Extension_Easytime
AS
SELECT     dbo.Easytime.EasytimeID, dbo.vwContactFullName.FullName AS EmployeeFullName, dbo.Contact.Address1 AS EmployeeAddress1, 
                      dbo.Contact.Address2 AS EmployeeAddress2, dbo.Contact.City AS EmployeeCity, dbo.Contact.State AS EmployeeState, dbo.Contact.PostCode AS EmployeePostCode, 
                      dbo.Contact.Country AS EmployeeCountry, dbo.Contact.WorkPhone AS EmployeeWorkPhone, dbo.Contact.Fax AS EmployeeFax, dbo.Contact.Email AS EmployeeEmail, 
                      dbo.Contact.ABN AS EmployeeABN, dbo.GetContactTradeCodeList(dbo.Easytime.ContactID) AS ContactTradeCodeList, 
                      CASE WHEN (SELECT COUNT(*) FROM ContactTradeCode WHERE ContactTradeCode.ContactID = dbo.Easytime.ContactID AND ContactTradeCode.IsActive=1) > 0
                        THEN 
						(SELECT TOP(1) CAST(ContactTradeCode.TradeCodeID AS NVARCHAR) + ';' + CAST(TradeCode.TradeCodeName AS NVARCHAR) FROM ContactTradeCode INNER JOIN TradeCode ON ContactTradeCode.TradeCodeID=TradeCode.TradeCodeID
						 WHERE ContactTradeCode.ContactID = dbo.Easytime.ContactID AND ContactTradeCode.IsActive=1) 
						END AS DefaultTradeCodeString
FROM         dbo.vwContactFullName INNER JOIN
                      dbo.Contact ON dbo.vwContactFullName.ContactID = dbo.Contact.ContactID RIGHT OUTER JOIN
                      dbo.Easytime ON dbo.Contact.ContactID = dbo.Easytime.ContactID
GO

IF OBJECT_ID(N'Extension_EntityImage', N'V') IS NOT NULL
    DROP VIEW [dbo].[Extension_EntityImage]
GO
CREATE VIEW dbo.Extension_EntityImage
AS
SELECT     EntityImageID, dbo.GetBase64(EntityImage) AS ImageString
FROM         dbo.EntityImage
GO

IF OBJECT_ID(N'Extension_HireOrder', N'V') IS NOT NULL
    DROP VIEW [dbo].[Extension_HireOrder]
GO
CREATE VIEW dbo.Extension_HireOrder
AS
    SELECT  dbo.HireOrder.HireOrderID ,
            dbo.AccountCode.AccountCodeName ,
            vwContactFullName_3.FullName AS CustomerFullName ,
            Contact_1.Address1 AS CustomerAddress1 ,
            Contact_1.Address2 AS CustomerAddress2 ,
            Contact_1.City AS CustomerCity ,
            Contact_1.Country AS CustomerCountry ,
            Contact_1.LastName AS CustomerLastName ,
            Contact_1.PostCode AS CustomerPostCode ,
            Contact_1.State AS CustomerState ,
            dbo.Contact.Email AS PrimaryContactEmail ,
            dbo.Contact.Fax AS PrimaryContactFax ,
            dbo.vwContactFullName.FullName AS PrimaryContactFullName ,
            dbo.Contact.WorkPhone AS PrimaryContactWorkPhone ,
            vwContactFullName_1.FullName AS RaisedByFullName ,
            vwContactFullName_2.FullName AS RaisedForFullName ,
            CAST(NULL AS DATETIME) AS dteInvoiceUpTo ,
            ISNULL(HOLSubTotalTable.SubTotal, 0) AS HireOrderLineSubTotal ,
            ISNULL(HOLMiscTotal.HOLMiscTotal, 0) AS HireOrderLineMiscSubTotal ,
            ISNULL(HOLSubTotalTable.SubTotal, 0)
            + ISNULL(HOLMiscTotal.HOLMiscTotal, 0) AS HireOrderTotal ,
            ISNULL(InvoiceTotalTable.InvoiceSubTotal, 0) AS InvoiceTotal ,
            Contact_1.TaxID AS CustomerTaxID ,
            Contact_1.IsTaxExempt AS CustomerIsTaxExempt
    FROM    dbo.HireOrder
            LEFT OUTER JOIN dbo.Contact AS Contact_1 ON dbo.HireOrder.CustomerContactID = Contact_1.ContactID
            LEFT OUTER JOIN dbo.vwContactPrimaryContact ON dbo.vwContactPrimaryContact.ParentContactID = Contact_1.ContactID
            LEFT OUTER JOIN dbo.Contact ON dbo.vwContactPrimaryContact.ContactID = dbo.Contact.ContactID
            LEFT OUTER JOIN vwContactFullName ON dbo.Contact.ContactID = dbo.vwContactFullName.ContactID
            LEFT OUTER JOIN dbo.AccountCode ON dbo.HireOrder.AccountCodeID = dbo.AccountCode.AccountCodeID
            LEFT OUTER JOIN dbo.vwContactFullName AS vwContactFullName_2 ON dbo.HireOrder.RaisedForContactID = vwContactFullName_2.ContactID
            LEFT OUTER JOIN dbo.vwContactFullName AS vwContactFullName_1 ON dbo.HireOrder.RaisedByContactID = vwContactFullName_1.ContactID
            LEFT OUTER JOIN dbo.vwContactFullName AS vwContactFullName_3 ON dbo.HireOrder.CustomerContactID = vwContactFullName_3.ContactID
            LEFT OUTER JOIN ( SELECT    HireOrderID ,
                                        CAST(SUM(CASE WHEN Diff > 0 THEN Diff
                                                      ELSE 0
                                                 END * Rate) AS MONEY) AS SubTotal
                              FROM      ( SELECT    HireOrderID ,
                                                    dbo.GetHireOrderWorkingDays(ActualStartDateTime,
                                                              CASE
                                                              WHEN ActualFinishDateTime IS NULL
                                                              THEN GETDATE()
                                                              ELSE ActualFinishDateTime
                                                              END, HireOrderID) AS Diff ,
                                                    Rate
                                          FROM      dbo.HireOrderLine
                                        ) AS HOL
                              GROUP BY  HireOrderID
                            ) AS HOLSubTotalTable ON dbo.HireOrder.HireOrderID = HOLSubTotalTable.HireOrderID
            LEFT OUTER JOIN ( SELECT TOP ( 100 ) PERCENT
                                        HireOrder_1.HireOrderID ,
                                        MIN(dbo.InvoiceLine.InvoiceLineID) AS InvoiceLineID ,
                                        CAST(dbo.InvoiceLine.Quantity
                                        * dbo.InvoiceLine.UnitPrice
                                        + dbo.InvoiceLine.Quantity
                                        * dbo.InvoiceLine.UnitPrice
                                        * dbo.InvoiceLine.TaxPercentage AS MONEY) AS InvoiceSubTotal
                              FROM      dbo.InvoiceLine
                                        INNER JOIN ( SELECT MIN(InvoiceLineID) AS InvoiceLineID ,
                                                            HireOrderLineID
                                                     FROM   dbo.InvoiceLine AS InvoiceLine_1
                                                     GROUP BY HireOrderLineID
                                                   ) AS IL ON dbo.InvoiceLine.InvoiceLineID = IL.InvoiceLineID
                                        INNER JOIN dbo.HireOrderLine AS HireOrderLine_1 ON IL.HireOrderLineID = HireOrderLine_1.HireOrderLineID
                                        INNER JOIN dbo.HireOrder AS HireOrder_1 ON HireOrderLine_1.HireOrderID = HireOrder_1.HireOrderID
                              GROUP BY  CAST(dbo.InvoiceLine.Quantity
                                        * dbo.InvoiceLine.UnitPrice
                                        + dbo.InvoiceLine.Quantity
                                        * dbo.InvoiceLine.UnitPrice
                                        * dbo.InvoiceLine.TaxPercentage AS MONEY) ,
                                        HireOrder_1.HireOrderID
                              ORDER BY  InvoiceLineID
                            ) AS InvoiceTotalTable ON dbo.HireOrder.HireOrderID = InvoiceTotalTable.HireOrderID
            LEFT OUTER JOIN ( SELECT    dbo.HireOrderLineMiscellaneous.HireOrderID ,
                                        CAST(SUM(dbo.Extension_HireOrderLineMiscellaneous.ExtendedPrice) AS MONEY) AS HOLMiscTotal
                              FROM      dbo.Extension_HireOrderLineMiscellaneous
                                        INNER JOIN dbo.HireOrderLineMiscellaneous ON dbo.Extension_HireOrderLineMiscellaneous.HireOrderLineMiscellaneousID = dbo.HireOrderLineMiscellaneous.HireOrderLineMiscellaneousID
                              GROUP BY  dbo.HireOrderLineMiscellaneous.HireOrderID
                            ) AS HOLMiscTotal ON dbo.HireOrder.HireOrderID = HOLMiscTotal.HireOrderID
GO

IF OBJECT_ID(N'Extension_Invoice', N'V') IS NOT NULL
    DROP VIEW [dbo].[Extension_Invoice]
GO
CREATE VIEW [dbo].[Extension_Invoice]  
AS  
SELECT     dbo.Invoice.InvoiceID, ISNULL(dbo.vwInvoiceTotalPaidOnCreditNote.AmountPaidOnCreditNote, 0) + ISNULL(dbo.vwInvoiceTotalPaid.TotalPaid, 0) AS Paid,   
                      CAST(ISNULL(dbo.Invoice.InvoiceNumber, '') as nvarchar(MAX)) + ISNULL(dbo.Invoice.InvoiceSuffix, '') AS DisplayInvoiceNumber, CAST(ISNULL(dbo.vwInvoiceSubTotal.SubTotal, 0) AS money)   
                      AS SubTotal, CAST(ISNULL(dbo.vwInvoiceGSTCost.GSTCost, 0) AS money) AS GSTCost, CAST(ISNULL(dbo.vwInvoiceTotal.InvoiceTotal, 0) AS money) AS InvoiceTotal,   
                      CONVERT(NUMERIC(18,7),balance.Balance) AS Balance, CAST(ISNULL(dbo.vwInvoiceLineDiscount.LineDiscount, 0) AS money) AS LineDiscount,   
                      CAST(ISNULL(dbo.vwInvoiceAdditionalDiscountTotal.AdditionalDiscountTotal, 0) AS money) AS AdditionalDiscountTotal,   
                      CAST(CASE WHEN dbo.Invoice.IsCreditNote = 1 THEN (FreightAmount * - 1) ELSE FreightAmount END AS money) AS FreightTotalCost,   
                      balance.CurrentInvoiceStatusName AS CurrentInvoiceStatusName,   
                      CAST(0 AS bit) AS bNew, vwContactFullName_1.FullName AS EnteredByFullName, dbo.Region.Address1 AS AttentionAddress1,   
                      dbo.Region.Address2 AS AttentionAddress2, dbo.Region.City AS AttentionCity, dbo.Region.State AS AttentionState, dbo.Region.PostCode AS AttentionPostCode,   
                      dbo.Region.Country AS AttentionCountry, dbo.Region.ABN AS AttentionABN, dbo.Contact.Address1 AS CustomerAddress1, dbo.Contact.Address2 AS CustomerAddress2,   
                      dbo.Contact.City AS CustomerCity, dbo.Contact.State AS CustomerState, dbo.Contact.PostCode AS CustomerPostCode, dbo.Contact.Country AS CustomerCountry,   
                      dbo.Contact.WorkPhone AS CustomerWorkPhone, dbo.Contact.MobilePhone AS CustomerMobilePhone, dbo.Contact.Fax AS CustomerFax,   
                      dbo.Contact.Email AS CustomerEmail, dbo.Contact.ABN AS CustomerABN, vwContactFullName_2.FullName AS CustomerFullName, dbo.Region.CompanyName,   
                      vwContactFullName_3.FullName AS CustomerAttentionFullName, dbo.vwContactFullName.FullName AS FreightFullName, dbo.Tax.TaxName AS FreightTaxName  
FROM         dbo.Invoice INNER JOIN  
                      dbo.vwInvoiceTotal ON dbo.Invoice.InvoiceID = dbo.vwInvoiceTotal.InvoiceID LEFT OUTER JOIN  
                      dbo.vwInvoiceBalance ON dbo.Invoice.InvoiceID = dbo.vwInvoiceBalance.InvoiceID LEFT OUTER JOIN  
                      dbo.vwInvoiceAdditionalDiscountTotal ON dbo.Invoice.InvoiceID = dbo.vwInvoiceAdditionalDiscountTotal.InvoiceID LEFT OUTER JOIN  
                      dbo.vwInvoiceLineDiscount ON dbo.Invoice.InvoiceID = dbo.vwInvoiceLineDiscount.InvoiceID LEFT OUTER JOIN  
                      dbo.vwInvoiceGSTCost ON dbo.Invoice.InvoiceID = dbo.vwInvoiceGSTCost.InvoiceID LEFT OUTER JOIN  
                      dbo.vwInvoiceSubTotal ON dbo.Invoice.InvoiceID = dbo.vwInvoiceSubTotal.InvoiceID LEFT OUTER JOIN  
                      dbo.vwInvoiceTotalPaidOnCreditNote ON dbo.Invoice.InvoiceID = dbo.vwInvoiceTotalPaidOnCreditNote.CreditNoteForInvoiceID LEFT OUTER JOIN  
                      dbo.vwInvoiceTotalPaid ON dbo.Invoice.InvoiceID = dbo.vwInvoiceTotalPaid.InvoiceID LEFT OUTER JOIN  
                      dbo.Tax ON dbo.Invoice.FreightTaxID = dbo.Tax.TaxID LEFT OUTER JOIN  
                      dbo.vwContactFullName ON dbo.Invoice.FreightContactID = dbo.vwContactFullName.ContactID LEFT OUTER JOIN  
                      dbo.vwContactFullName AS vwContactFullName_3 ON dbo.Invoice.AttentionContactID = vwContactFullName_3.ContactID LEFT OUTER JOIN  
                      dbo.vwContactFullName AS vwContactFullName_2 ON dbo.Invoice.CustomerContactID = vwContactFullName_2.ContactID LEFT OUTER JOIN  
                      dbo.vwContactFullName AS vwContactFullName_1 ON dbo.Invoice.EnteredByContactID = vwContactFullName_1.ContactID LEFT OUTER JOIN  
                      dbo.Region ON dbo.Invoice.RegionID = dbo.Region.RegionID LEFT OUTER JOIN  
                      dbo.Contact ON dbo.Invoice.CustomerContactID = dbo.Contact.ContactID  
					  OUTER APPLY fxInvoiceDerivedFields(Invoice.InvoiceID) balance
GO

IF OBJECT_ID(N'Extension_PurchaseOrder', N'V') IS NOT NULL
    DROP VIEW [dbo].[Extension_PurchaseOrder]
GO
/* COLLINS FOODS - ALTER THIS VIEW to have one extra field: the RaisedByContact.Country returned(contact_3 is raisedbycontact)*/
CREATE VIEW dbo.Extension_PurchaseOrder
AS
SELECT        PurchaseOrder_1.PurchaseOrderID, CAST(0 AS bit) AS IsStatusChanging, 
                         CAST(CASE WHEN PurchaseOrder_1.PurchaseOrderTypeName = 'Standing Order' THEN CASE WHEN PurchaseOrder_1.StandingPurchaseOrderBudget = 0 THEN 1 ELSE 0 END ELSE 0 END AS bit) 
                         AS UnlimitedBudget, CAST(CASE WHEN ISNULL(SUM(dbo.vwPurchaseOrderReceivalTotal.ReceivedQuantity), 0) > 0 THEN 1 ELSE 0 END AS bit) AS HasBeenReceipted, 
                         ISNULL(CASE WHEN PurchaseOrder_1.PurchaseOrderTypeName = 'Adjustment Note' THEN vwPurchaseOrderTotals.TotalTax ELSE vwPurchaseOrderTotals.TotalTax END, 0) AS GST, 
                         ISNULL(CASE WHEN PurchaseOrder_1.PurchaseOrderTypeName = 'Adjustment Note' THEN vwPurchaseOrderTotals.SubTotal ELSE vwPurchaseOrderTotals.SubTotal END, 0) AS SubTotal, 
                         ISNULL(CASE WHEN PurchaseOrder_1.PurchaseOrderTypeName = 'Adjustment Note' THEN vwPurchaseOrderTotals.TotalCost ELSE vwPurchaseOrderTotals.TotalCost END, 0) AS TotalCost, 
                         ISNULL(CASE WHEN PurchaseOrder_1.PurchaseOrderTypeName = 'Adjustment Note' THEN vwPurchaseOrderTotals.TotalDiscount ELSE vwPurchaseOrderTotals.TotalDiscount END, 0) AS DiscountCost, 
                         dbo.CurrencyType.CurrencyTypeCode, dbo.CurrencyType.DecimalPlaces AS CurrencyTypeDecimalPlaces, CurrencyType.ExchangeRatePercentage AS CurrencyTypeExchangeRatePercentage, dbo.Purchaser.PurchaserName, vwContactFullName_3.FullName AS PurchaserAttentionContactFullName,
                          dbo.Purchaser.Address1 AS PurchaserAddress1, dbo.Purchaser.Address2 AS PurchaserAddress2, dbo.Purchaser.City AS PurchaserCity, dbo.Purchaser.State AS PurchaserState, 
                         dbo.Purchaser.Country AS PurchaserCountry, dbo.Purchaser.PostCode AS PurchaserPostCode, dbo.Purchaser.ABN AS PurchaserABN, dbo.Purchaser.DeliveryInstructions AS PurchaserDeliveryInstructions, 
                         Contact_1.FirstName AS SupplierName, Contact_1.FirstName AS SupplierFirstName, Contact_1.LastName AS SupplierLastName, Contact_1.Email AS SupplierEmail, 
                         Contact_1.WorkPhone AS SupplierContactPhoneNumber, Contact_1.Fax AS SupplierContactFaxNumber, vwContactFullName_2.FullName AS SupplierAttentionContactFullName, ISNULL(Contact_2.WorkPhone, 
                         Contact_1.WorkPhone) AS SupplierAttentionContactPhoneNumber, ISNULL(Contact_2.Fax, Contact_1.Fax) AS SupplierAttentionContactFaxNumber, ISNULL(Contact_2.Email, Contact_1.Email) 
                         AS SupplierAttentionContactEmail, Contact_1.Address1 AS SupplierAddress1, Contact_1.Address2 AS SupplierAddress2, Contact_1.City AS SupplierCity, Contact_1.State AS SupplierState, 
                         Contact_1.PostCode AS SupplierPostCode, Contact_1.Country AS SupplierCountry, Contact_1.ABN AS SupplierABN, vwContactFullName_1.FullName AS RaisedByContactFullName, 
                         Contact_3.Country AS RaisedByContactCountry, dbo.vwContactFullName.FullName AS CancelledByContactFullName, Contact_5.FirstName AS FreightContactFirstName, dbo.Tax.TaxName AS FreightTaxName, 
                         dbo.PurchaseOrderUserDefined1.PurchaseOrderUserDefined1Name, dbo.PurchaseOrder.PurchaseOrderNumber AS PurchaseOrderNumber_ForAdjustmentNote, 
                         dbo.vwLastApprovalRecordPurchaseOrder.ApprovalStatusName AS LastApprovalStatusName, dbo.vwLastApprovalRecordPurchaseOrder.ApprovedByFullName AS LastApprovalStatusSetByContactFullName, 
                         dbo.vwLastApprovalRecordPurchaseOrder.ApprovedDateTime AS LastApprovalStatusSetDateTime, dbo.SystemOption.IsApprovalsUsedForPurchasing, 
                         CAST(CASE WHEN PurchaseOrder_1.IsCancelled = 1 THEN 0 ELSE CASE WHEN PurchaseOrder_1.PurchaseOrderTypeName = 'Purchase Order' OR
                         PurchaseOrder_1.PurchaseOrderTypeName = 'Standing Order' THEN CASE WHEN IsApprovalsUsedForPurchasing = 1 THEN CASE WHEN PurchaseOrder_1.PurchaseOrderStatusName = 'Entered' OR
                         PurchaseOrder_1.PurchaseOrderStatusName = 'Pending Release' THEN 1 ELSE 0 END ELSE 1 END ELSE CASE WHEN PurchaseOrder_1.PurchaseOrderTypeName = 'Adjustment Note' THEN CASE WHEN PurchaseOrder_1.PurchaseOrderStatusName
                          = 'All Returned' THEN 0 ELSE 1 END ELSE 1 END END END AS bit) AS IsEditable, dbo.GetPurchaseOrderRequisitionedBy(PurchaseOrder_1.PurchaseOrderID) AS RequisitionedBy, 
                         dbo.GetPurchaseOrderRegionIDs(PurchaseOrder_1.PurchaseOrderID) AS RegionList
FROM            dbo.Contact AS Contact_3 INNER JOIN
                         dbo.vwContactFullName AS vwContactFullName_1 ON Contact_3.ContactID = vwContactFullName_1.ContactID RIGHT OUTER JOIN
                         dbo.vwContactFullName INNER JOIN
                         dbo.Contact ON dbo.vwContactFullName.ContactID = dbo.Contact.ContactID RIGHT OUTER JOIN
                         dbo.Tax RIGHT OUTER JOIN
                         dbo.PurchaseOrderUserDefined1 RIGHT OUTER JOIN
                         dbo.PurchaseOrder RIGHT OUTER JOIN
                         dbo.vwLastApprovalRecordPurchaseOrder RIGHT OUTER JOIN
                         dbo.Contact AS Contact_5 RIGHT OUTER JOIN
                         dbo.vwPurchaseOrderTotals RIGHT OUTER JOIN
                         dbo.PurchaseOrder AS PurchaseOrder_1 LEFT OUTER JOIN
                         dbo.vwPurchaseOrderTotals AS vwPurchaseOrderTotals_1 ON PurchaseOrder_1.PurchaseOrderIDForAdjustmentNote = vwPurchaseOrderTotals_1.PurchaseOrderID ON 
                         dbo.vwPurchaseOrderTotals.PurchaseOrderID = PurchaseOrder_1.PurchaseOrderID ON Contact_5.ContactID = PurchaseOrder_1.FreightContactID ON 
                         dbo.vwLastApprovalRecordPurchaseOrder.EntityID = PurchaseOrder_1.PurchaseOrderID ON dbo.PurchaseOrder.PurchaseOrderID = PurchaseOrder_1.PurchaseOrderIDForAdjustmentNote ON 
                         dbo.PurchaseOrderUserDefined1.PurchaseOrderUserDefined1ID = PurchaseOrder_1.PurchaseOrderUserDefined1ID ON dbo.Tax.TaxID = PurchaseOrder_1.FreightTaxID ON 
                         dbo.Contact.ContactID = PurchaseOrder_1.CancelledByContactID ON Contact_3.ContactID = PurchaseOrder_1.RaisedByContactID LEFT OUTER JOIN
                         dbo.vwContactFullName AS vwContactFullName_2 INNER JOIN
                         dbo.Contact AS Contact_2 ON vwContactFullName_2.ContactID = Contact_2.ContactID ON PurchaseOrder_1.SupplierAttentionContactID = Contact_2.ContactID LEFT OUTER JOIN
                         dbo.Contact AS Contact_1 ON PurchaseOrder_1.SupplierContactID = Contact_1.ContactID LEFT OUTER JOIN
                         dbo.vwContactFullName AS vwContactFullName_3 INNER JOIN
                         dbo.Contact AS Contact_4 ON vwContactFullName_3.ContactID = Contact_4.ContactID ON PurchaseOrder_1.PurchaserAttentionContactID = Contact_4.ContactID LEFT OUTER JOIN
                         dbo.Purchaser ON PurchaseOrder_1.PurchaserID = dbo.Purchaser.PurchaserID LEFT OUTER JOIN
                         dbo.CurrencyType ON PurchaseOrder_1.CurrencyTypeID = dbo.CurrencyType.CurrencyTypeID LEFT OUTER JOIN
                         dbo.vwPurchaseOrderReceivalTotal RIGHT OUTER JOIN
                         dbo.PurchaseOrderLine ON dbo.vwPurchaseOrderReceivalTotal.PurchaseOrderLineID = dbo.PurchaseOrderLine.PurchaseOrderLineID ON 
                         PurchaseOrder_1.PurchaseOrderID = dbo.PurchaseOrderLine.PurchaseOrderID CROSS JOIN
                         dbo.SystemOption
GROUP BY PurchaseOrder_1.PurchaseOrderID, dbo.CurrencyType.CurrencyTypeCode, dbo.Purchaser.PurchaserName, vwContactFullName_3.FullName, dbo.Purchaser.Address1, dbo.Purchaser.Address2, 
                         dbo.Purchaser.City, dbo.Purchaser.State, dbo.Purchaser.Country, dbo.Purchaser.PostCode, dbo.Purchaser.ABN, dbo.Purchaser.DeliveryInstructions, Contact_1.FirstName, Contact_1.LastName, Contact_1.Email, 
                         Contact_1.WorkPhone, Contact_1.Fax, vwContactFullName_2.FullName, ISNULL(Contact_2.WorkPhone, Contact_1.WorkPhone), ISNULL(Contact_2.Fax, Contact_1.Fax), ISNULL(Contact_2.Email, Contact_1.Email), 
                         Contact_1.Address1, Contact_1.Address2, Contact_1.City, Contact_1.State, Contact_1.PostCode, Contact_1.Country, Contact_1.ABN, vwContactFullName_1.FullName, Contact_3.Country, 
                         dbo.vwContactFullName.FullName, Contact_5.FirstName, dbo.Tax.TaxName, dbo.PurchaseOrderUserDefined1.PurchaseOrderUserDefined1Name, dbo.PurchaseOrder.PurchaseOrderNumber, 
                         dbo.vwLastApprovalRecordPurchaseOrder.ApprovalStatusName, dbo.vwLastApprovalRecordPurchaseOrder.ApprovedByFullName, dbo.vwLastApprovalRecordPurchaseOrder.ApprovedDateTime, 
                         dbo.SystemOption.IsApprovalsUsedForPurchasing, dbo.CurrencyType.DecimalPlaces,CurrencyType.ExchangeRatePercentage, PurchaseOrder_1.PurchaseOrderTypeName, PurchaseOrder_1.StandingPurchaseOrderBudget, 
                         vwPurchaseOrderTotals_1.TotalTax, dbo.vwPurchaseOrderTotals.TotalTax, dbo.vwPurchaseOrderTotals.SubTotal, vwPurchaseOrderTotals_1.SubTotal, dbo.vwPurchaseOrderTotals.TotalDiscount, 
                         vwPurchaseOrderTotals_1.TotalDiscount, dbo.vwPurchaseOrderTotals.TotalCost, vwPurchaseOrderTotals_1.TotalCost, PurchaseOrder_1.PurchaseOrderStatusName, PurchaseOrder_1.IsCancelled, 
                         dbo.GetPurchaseOrderRequisitionedBy(PurchaseOrder_1.PurchaseOrderID)
GO

IF OBJECT_ID(N'Extension_PurchaseOrderLine', N'V') IS NOT NULL
    DROP VIEW [dbo].[Extension_PurchaseOrderLine]
GO
CREATE VIEW dbo.Extension_PurchaseOrderLine 
AS 
    SELECT  dbo.PurchaseOrderLine.PurchaseOrderLineID , 
            dbo.CurrencyType.CurrencyTypeCode , 
            ( dbo.PurchaseOrderLine.OrderedQuantity 
              * dbo.PurchaseOrderLine.UnitPrice ) * ( 1 
                                                      - dbo.PurchaseOrderLine.DiscountPercentage ) 
            * dbo.PurchaseOrderLine.TaxPercentage AS TaxAmount , 
            dbo.PurchaseOrderLine.OrderedQuantity 
            * dbo.PurchaseOrderLine.UnitPrice 
            * dbo.PurchaseOrderLine.DiscountPercentage AS DiscountAmount , 
            ( dbo.PurchaseOrderLine.OrderedQuantity 
              * dbo.PurchaseOrderLine.UnitPrice ) * ( 1 
                                                      - dbo.PurchaseOrderLine.DiscountPercentage ) AS TotalExcludingTax , 
            ( dbo.PurchaseOrderLine.OrderedQuantity 
              * dbo.PurchaseOrderLine.UnitPrice ) * ( 1 
                                                      - dbo.PurchaseOrderLine.DiscountPercentage ) 
            + ( dbo.PurchaseOrderLine.OrderedQuantity 
                * dbo.PurchaseOrderLine.UnitPrice ) * ( 1 
                                                        - dbo.PurchaseOrderLine.DiscountPercentage ) 
            * dbo.PurchaseOrderLine.TaxPercentage AS TotalIncludingTax , 
            dbo.UOM.UOMName , 
            dbo.Tax.TaxName , 
            dbo.AccountCode.AccountCodeName , 
            dbo.Catalogue.CatalogueNumber , 
            dbo.Store.StoreName , 
            dbo.BinLocation.BinLocationName , 
            dbo.vwContactFullName.FullName AS CancelledByContactFullName , 
            dbo.PurchaseOrderLineUserDefined1.PurchaseOrderLineUserDefined1Name , 
            ISNULL(dbo.vwPurchaseOrderLineReceiptTotal.TotalReceivedNoUOMConversion, 
                   0) AS TotalReceived , 
            ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost, 
                   dbo.PurchaseOrderLine.UnitPrice) AS ReceiptLineUnitCost , 
            dbo.WorkOrder.WorkOrderID , 
            ISNULL(CONVERT(NVARCHAR(MAX), dbo.WorkOrder.WorkOrderNumber), N'') AS WorkOrderNumber , 
            dbo.GetPurchaseOrderLineRegionAssignments(dbo.PurchaseOrderLine.PurchaseOrderLineID) AS RegionAssignments , 
            dbo.CatalogueSupplier.SupplierStockNumber AS CatalogueSupplierStockNumber , 
            ISNULL(dbo.Catalogue.IsCatalogued, 0) AS IsCatalogued , 
            ISNULL(dbo.Catalogue.IsStocked, 0) AS IsStocked , 
            ISNULL(CONVERT(NVARCHAR(MAX), dbo.Requisition.RequisitionNumber), 
                   N'') AS RequisitionNumber , 
            CASE WHEN vwPOLinesWithNonZeroCatTrans.PurchaseOrderLineID IS NULL THEN 0 
                 ELSE 1 
            END AS TransactionCount , 
            dbo.GetPurchaseOrderLineRegionIDs(dbo.PurchaseOrderLine.PurchaseOrderLineID) AS RegionIDs 
    FROM    dbo.vwPurchaseOrderReceiptReturnGoodsReceipt 
            RIGHT OUTER JOIN dbo.WorkOrderSpare 
            INNER JOIN dbo.WorkOrder ON dbo.WorkOrderSpare.WorkOrderID = dbo.WorkOrder.WorkOrderID 
            RIGHT OUTER JOIN dbo.Requisition 
            INNER JOIN dbo.RequisitionLine ON dbo.Requisition.RequisitionID = dbo.RequisitionLine.RequisitionID 
            RIGHT OUTER JOIN dbo.vwPOLinesWithNonZeroCatTrans 
            RIGHT OUTER JOIN dbo.PurchaseOrderLine ON dbo.vwPOLinesWithNonZeroCatTrans.PurchaseOrderLineID = dbo.PurchaseOrderLine.PurchaseOrderLineID ON dbo.RequisitionLine.RequisitionLineID = dbo.PurchaseOrderLine.RequisitionLineID ON dbo.WorkOrderSpare.WorkOrderSpareID = dbo.PurchaseOrderLine.WorkOrderSpareID ON dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.PurchaseOrderLineID = dbo.PurchaseOrderLine.PurchaseOrderLineID 
            LEFT OUTER JOIN dbo.vwPurchaseOrderLineReceiptTotal ON dbo.PurchaseOrderLine.PurchaseOrderLineID = dbo.vwPurchaseOrderLineReceiptTotal.PurchaseOrderLineID 
            LEFT OUTER JOIN dbo.PurchaseOrderLineUserDefined1 ON dbo.PurchaseOrderLine.PurchaseOrderLineUserDefined1ID = dbo.PurchaseOrderLineUserDefined1.PurchaseOrderLineUserDefined1ID 
            LEFT OUTER JOIN dbo.vwContactFullName ON dbo.PurchaseOrderLine.CancelledByContactID = dbo.vwContactFullName.ContactID 
            LEFT OUTER JOIN dbo.Store 
            RIGHT OUTER JOIN dbo.BinLocation 
            RIGHT OUTER JOIN dbo.Asset ON dbo.BinLocation.BinLocationID = dbo.Asset.BinLocationID ON dbo.Store.StoreID = dbo.Asset.StoreID 
            LEFT OUTER JOIN dbo.Catalogue ON dbo.Asset.CatalogueID = dbo.Catalogue.CatalogueID ON dbo.PurchaseOrderLine.AssetID = dbo.Asset.AssetID 
            LEFT OUTER JOIN dbo.AccountCode ON dbo.PurchaseOrderLine.AccountCodeID = dbo.AccountCode.AccountCodeID 
            LEFT OUTER JOIN dbo.Tax ON dbo.PurchaseOrderLine.TaxID = dbo.Tax.TaxID 
            LEFT OUTER JOIN dbo.UOM ON dbo.PurchaseOrderLine.UOMID = dbo.UOM.UOMID 
            LEFT OUTER JOIN dbo.CurrencyType 
            RIGHT OUTER JOIN dbo.CatalogueSupplier 
            INNER JOIN dbo.Contact ON dbo.CatalogueSupplier.SupplierContactID = dbo.Contact.ContactID ON dbo.CurrencyType.CurrencyTypeID = dbo.Contact.CurrencyTypeID ON dbo.PurchaseOrderLine.CatalogueSupplierID = dbo.CatalogueSupplier.CatalogueSupplierID 
    GROUP BY dbo.PurchaseOrderLine.PurchaseOrderLineID , 
            dbo.CurrencyType.CurrencyTypeCode , 
            dbo.UOM.UOMName , 
            dbo.Tax.TaxName , 
            dbo.AccountCode.AccountCodeName , 
            dbo.Catalogue.CatalogueNumber , 
            dbo.Store.StoreName , 
            dbo.BinLocation.BinLocationName , 
            dbo.vwContactFullName.FullName , 
            dbo.PurchaseOrderLineUserDefined1.PurchaseOrderLineUserDefined1Name , 
            ISNULL(dbo.vwPurchaseOrderLineReceiptTotal.TotalReceivedNoUOMConversion, 
                   0) , 
            dbo.WorkOrder.WorkOrderID , 
            ISNULL(CONVERT(NVARCHAR(MAX), dbo.WorkOrder.WorkOrderNumber), N'') , 
            dbo.CatalogueSupplier.SupplierStockNumber , 
            ISNULL(CONVERT(NVARCHAR(MAX), dbo.Requisition.RequisitionNumber), 
                   N'') , 
            ISNULL(dbo.Catalogue.IsCatalogued, 0) , 
            ISNULL(dbo.Catalogue.IsStocked, 0) , 
            dbo.GetPurchaseOrderLineRegionAssignments(dbo.PurchaseOrderLine.PurchaseOrderLineID) , 
            ( dbo.PurchaseOrderLine.OrderedQuantity 
              * dbo.PurchaseOrderLine.UnitPrice ) * ( 1 
                                                      - dbo.PurchaseOrderLine.DiscountPercentage ) 
            * dbo.PurchaseOrderLine.TaxPercentage , 
            dbo.PurchaseOrderLine.OrderedQuantity 
            * dbo.PurchaseOrderLine.UnitPrice 
            * dbo.PurchaseOrderLine.DiscountPercentage , 
            ( dbo.PurchaseOrderLine.OrderedQuantity 
              * dbo.PurchaseOrderLine.UnitPrice ) * ( 1 
                                                      - dbo.PurchaseOrderLine.DiscountPercentage ) , 
            ( dbo.PurchaseOrderLine.OrderedQuantity 
              * dbo.PurchaseOrderLine.UnitPrice ) * ( 1 
                                                      - dbo.PurchaseOrderLine.DiscountPercentage ) 
            + ( dbo.PurchaseOrderLine.OrderedQuantity 
                * dbo.PurchaseOrderLine.UnitPrice ) * ( 1 
                                                        - dbo.PurchaseOrderLine.DiscountPercentage ) 
            * dbo.PurchaseOrderLine.TaxPercentage , 
            CASE WHEN vwPOLinesWithNonZeroCatTrans.PurchaseOrderLineID IS NULL THEN 0 
                 ELSE 1 
            END , 
            ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost, 
                   dbo.PurchaseOrderLine.UnitPrice)
GO

IF OBJECT_ID(N'Extension_Region', N'V') IS NOT NULL
    DROP VIEW [dbo].[Extension_Region]
GO
CREATE VIEW dbo.Extension_Region
AS
SELECT        dbo.Region.RegionID, dbo.Tax.TaxName, ISNULL(dbo.Tax.TaxPercentage, 0) AS TaxPercentage, dbo.GetRegionMappingNames(dbo.Region.RegionID) AS RegionMappingListString, 
                         dbo.GetRegionMappingIDs(dbo.Region.RegionID) AS RegionMappingIDs
FROM            dbo.Region LEFT OUTER JOIN
                         dbo.Tax ON dbo.Region.GlobalTaxID = dbo.Tax.TaxID
GO

IF OBJECT_ID(N'Extension_SchedulePeriodResource', N'V') IS NOT NULL
    DROP VIEW [dbo].[Extension_SchedulePeriodResource]
GO
CREATE VIEW dbo.Extension_SchedulePeriodResource
AS
SELECT     dbo.SchedulePeriodResource.SchedulePeriodResourceID, ISNULL(dbo.Contact.FirstName, '') + ' ' + ISNULL(dbo.Contact.LastName, '') AS TradeName, 
                      dbo.GetContactTradeCodeList(dbo.Contact.ContactID) AS TradeCodes, CAST(ISNULL(SUM(dbo.WorkOrderTrade.EstimatedDurationHours), 0) AS decimal(18, 2)) 
                      AS AllocatedHours, dbo.SchedulePeriod.ScheduleID, dbo.SchedulePeriod.StartDateTime, dbo.GetContactTradeCodeIDList(dbo.Contact.ContactID) AS TradeCodeIDs, 
                      dbo.GetContactTradeCodeHourlyRateList(dbo.Contact.ContactID) AS HourlyRates, dbo.Contact.LastName, CONVERT(nvarchar, 
                      CAST(ISNULL(SUM(dbo.WorkOrderTrade.EstimatedDurationHours), 0) AS decimal(18, 2))) AS AllocatedHoursStr
FROM         dbo.WorkOrderTrade RIGHT OUTER JOIN
                      dbo.SchedulePeriodAllocation ON dbo.WorkOrderTrade.WorkOrderTradeID = dbo.SchedulePeriodAllocation.WorkOrderTradeID RIGHT OUTER JOIN
                      dbo.SchedulePeriod INNER JOIN
                      dbo.Contact INNER JOIN
                      dbo.SchedulePeriodResource ON dbo.Contact.ContactID = dbo.SchedulePeriodResource.ContactID ON 
                      dbo.SchedulePeriod.SchedulePeriodID = dbo.SchedulePeriodResource.SchedulePeriodID ON 
                      dbo.SchedulePeriodAllocation.SchedulePeriodID = dbo.SchedulePeriodResource.SchedulePeriodID AND 
                      dbo.WorkOrderTrade.TradeContactID = dbo.SchedulePeriodResource.ContactID
GROUP BY dbo.SchedulePeriodResource.SchedulePeriodResourceID, dbo.Contact.FirstName, dbo.Contact.LastName, dbo.Contact.ContactID, dbo.SchedulePeriod.ScheduleID, 
                      dbo.SchedulePeriod.StartDateTime
GO

IF OBJECT_ID(N'Extension_UserApproverList', N'V') IS NOT NULL
    DROP VIEW [dbo].[Extension_UserApproverList]
GO
CREATE VIEW dbo.Extension_UserApproverList
AS
SELECT     TOP (100) PERCENT dbo.UserApproverList.UserApproverListID, dbo.GetUserApproverListSequenceNames(dbo.UserApproverList.UserApproverListID, 
                      dbo.UserApproverList.UserApprovalLimitID, dbo.UserApproverList.ApproverSequence) AS GetSequenceNames, 
                      dbo.vwContactFullName.FullName AS ApproverFullName
FROM         dbo.UserApproverList LEFT OUTER JOIN
                      dbo.vwContactFullName ON dbo.UserApproverList.ContactID = dbo.vwContactFullName.ContactID
GROUP BY dbo.UserApproverList.UserApproverListID, dbo.GetUserApproverListSequenceNames(dbo.UserApproverList.UserApproverListID, 
                      dbo.UserApproverList.UserApprovalLimitID, dbo.UserApproverList.ApproverSequence), dbo.vwContactFullName.FullName
GO

IF OBJECT_ID(N'Extension_WorkOrderInspectionQuestion', N'V') IS NOT NULL
    DROP VIEW [dbo].[Extension_WorkOrderInspectionQuestion]
GO
CREATE VIEW [dbo].[Extension_WorkOrderInspectionQuestion]
AS
SELECT        dbo.WorkOrderInspectionQuestion.WorkOrderInspectionQuestionID, dbo.WorkOrderInspectionAnswer.QuestionSetQuestionAnswerText, FrequencyType_1.FrequencyTypeName, dbo.Asset.AssetNumber, 
                         dbo.Asset.AssetDescription, dbo.WorkOrderInspectionAsset.SequenceNumber AS WorkOrderInspectionAssetSequenceNumber, dbo.WorkOrderInspectionAsset.AssetStatus, 
                         dbo.WorkOrderInspectionQuestion.ReadingAnswer AS OldReadingAnswer, dbo.WorkOrderInspectionQuestion.AnsweredDateTime AS AnsweredDateTime_1, '' AS QuestionHeaderText, 
                         dbo.vwExtension_WorkOrderInspectionQuestionHelper.PreviousAnswerText, CAST(CASE WHEN [Document].FileID IS NOT NULL THEN 1 ELSE 0 END AS bit) AS HasAttachedDocument, NULL 
                         AS RequestNumberGenerated, dbo.WorkOrderInspectionQuestion.QuestionSetQuestionText AS QuestionSetQuestionTextDisplay, dbo.WorkOrderInspectionAnswer.IsException, dbo.Request.RequestNumber, 
                         CAST([Document].FileID AS uniqueidentifier) AS FileID, CAST([Document].FilePath AS nvarchar(4000)) AS FilePath, dbo.vwExtension_WorkOrderInspectionQuestionHelper.PreviousAnswerQuestionID
FROM            dbo.WorkOrderInspectionQuestion LEFT OUTER JOIN
                         dbo.vwExtension_WorkOrderInspectionQuestionHelper ON 
                         dbo.WorkOrderInspectionQuestion.WorkOrderInspectionQuestionID = dbo.vwExtension_WorkOrderInspectionQuestionHelper.WorkOrderInspectionQuestionID LEFT OUTER JOIN
                         dbo.Request ON dbo.WorkOrderInspectionQuestion.RequestID = dbo.Request.RequestID LEFT OUTER JOIN
                             (SELECT        DocumentID, EntityID, FileID, FilePath
                               FROM            dbo.[Document] AS Document_1
                               WHERE        (EntityName = 'WorkOrderInspectionQuestion')) AS [Document] ON dbo.WorkOrderInspectionQuestion.WorkOrderInspectionQuestionID = [Document].EntityID LEFT OUTER JOIN
                         dbo.WorkOrderInspectionAsset ON dbo.WorkOrderInspectionQuestion.WorkOrderID = dbo.WorkOrderInspectionAsset.WorkOrderID AND 
                         dbo.WorkOrderInspectionQuestion.AssetID = dbo.WorkOrderInspectionAsset.AssetID LEFT OUTER JOIN
                         dbo.Asset ON dbo.WorkOrderInspectionQuestion.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN
                         dbo.FrequencyType AS FrequencyType_1 ON dbo.WorkOrderInspectionQuestion.FrequencyTypeID = FrequencyType_1.FrequencyTypeID LEFT OUTER JOIN
                         dbo.WorkOrderInspectionAnswer ON dbo.WorkOrderInspectionQuestion.WorkOrderInspectionAnswerID = dbo.WorkOrderInspectionAnswer.WorkOrderInspectionAnswerID
GO

IF OBJECT_ID(N'vwAssetDropDown', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwAssetDropDown]
GO
CREATE VIEW dbo.vwAssetDropDown
AS
SELECT     AssetID, '(' + CONVERT(nvarchar(MAX), AssetID) + ')' AS AssetIDForIncludeChildren, IsActive, AssetNumber, AssetDescription, dbo.GetAssetRegionIDs(AssetID) 
                      AS RegionIDs
FROM         dbo.Asset
WHERE     (IsAsset = 1)
GO

IF OBJECT_ID(N'vwAssetHelper', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwAssetHelper]
GO
CREATE VIEW [dbo].[vwAssetHelper]
AS
SELECT     dbo.Asset.AssetID, CAST(0 AS bit) AS IsNew, CAST(CASE WHEN Asset.isAsset = 1 THEN 0 WHEN ISNULL(dbo.vwCatalogueAssetCount.AssetCount, 0) 
                      > 1 THEN 1 ELSE 0 END AS bit) AS IsAllowDuplicates, CAST(0 AS bit) AS PMDetailsChanged, CAST(NULL AS int) AS OldAssetTypeID, CAST(NULL AS int) 
                      AS OldManufacturerID, CAST(NULL AS int) AS OldModelNumberID, CAST(CASE WHEN Asset.IsAsset = 1 THEN NULL 
                      ELSE dbo.Catalogue.CatalogueNumber END AS nvarchar) AS CatalogueNumber, CAST(CASE WHEN Asset.IsAsset = 1 THEN NULL 
                      ELSE dbo.Catalogue.CatalogueDescription END AS nvarchar) AS CatalogueDescription, CAST(CASE WHEN Asset.IsAsset = 1 THEN NULL 
                      ELSE dbo.CatalogueGroup.CatalogueGroupName END AS nvarchar) AS CatalogueGroupName, CAST(CASE WHEN Asset.IsAsset = 1 THEN NULL 
                      ELSE dbo.CatalogueClass.CatalogueClassName END AS nvarchar) AS CatalogueClassName, ISNULL(Contact_1.FirstName, N'') + N' ' + ISNULL(Contact_1.LastName, 
                      N'') AS CreatedByContactFullName, 
                      CAST(CASE WHEN Asset.MarkupTypeName = 'Fixed Price' THEN dbo.asset.MarkupAmount WHEN Asset.MarkupTypeName = 'Percentage' THEN (dbo.asset.UnitPrice +
                       (dbo.asset.UnitPrice * dbo.asset.MarkupAmount)) WHEN Asset.MarkupTypeName = 'Amount' THEN (dbo.asset.UnitPrice + dbo.asset.MarkupAmount) 
                      ELSE dbo.Asset.UnitPrice END AS money) AS SellPrice, dbo.Store.StoreName, dbo.BinLocation.BinLocationName, Asset_1.AssetNumber AS SiteName, 
                      dbo.Tax.TaxName, CAST(ISNULL(dbo.Tax.TaxPercentage, 0) AS Numeric(18, 7)) AS TaxPercentage, dbo.UOM.UOMName, dbo.Catalogue.UOMID, 
                      CAST(CASE WHEN Asset.IsAsset = 1 THEN 0 ELSE dbo.Catalogue.IsCatalogued END AS bit) AS IsCatalogued, CAST(1 AS numeric(18, 7)) AS IssueQty, 
                      ISNULL(dbo.vwCatalogueSupplierCount.CatalogueSupplierCount, 0) AS CatalogueSupplierCount, dbo.Department.DepartmentName, 
                      dbo.AccountCode.AccountCodeName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE dbo.Contact.FirstName END AS nvarchar) AS CustomerName, 
                      CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE ISNULL(Contact_2.FirstName, N'') + N' ' + ISNULL(Contact_2.LastName, N'') END AS nvarchar) 
                      AS ContractorName, dbo.vwAssetReadingsCurrent.Reading AS LastReading, dbo.vwAssetReadingsCurrent.ReadingDateTime AS LastReadingDateTime, 
                      CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE FrequencyTypeName END AS nvarchar) AS FrequencyTypeName, 
                      Asset_1.AssetNumber AS ParentAssetNumber, CAST(CASE WHEN Asset.IsAsset = 0 THEN 0 WHEN ISNULL(dbo.vwAssetDocumentCount.DocumentCount, 0) 
                      > 0 THEN 1 ELSE 0 END AS bit) AS HasDocs, CAST(CASE WHEN Asset.IsAsset = 0 THEN 0 WHEN ISNULL(dbo.vwAssetDrawingCount.DrawingCount, 0) 
                      > 0 THEN 1 ELSE 0 END AS bit) AS HasDrawings, CAST(CASE WHEN Asset.IsAsset = 0 THEN 0 WHEN ISNULL(dbo.vwAssetToDoListCount.ToDoListCount, 0) 
                      > 0 THEN 1 ELSE 0 END AS bit) AS HasToDos, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE CurrentAssetMovementID END AS int) 
                      AS CurrentAssetMovementID, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE AssetTypeName END AS nvarchar) AS AssetTypeName, 
                      CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE ManufacturerName END AS nvarchar) AS ManufacturerName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL 
                      ELSE ModelNumberName END AS nvarchar) AS ModelNumberName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE AssetStatusName END AS nvarchar) 
                      AS AssetStatusName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE ColourName END AS nvarchar) AS ColourName, 
                      CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE FuelType.FuelTypeName END AS nvarchar) AS PrimaryFuelTypeName, 
                      CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE FuelType_1.FuelTypeName END AS nvarchar) AS SecondaryFuelTypeName, 
                      CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE ISNULL(Contact_3.FirstName, N'') + N' ' + ISNULL(Contact_3.LastName, N'') END AS nvarchar) AS DriverName, 
                      CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE TankUnitName END AS nvarchar) AS TankUnitName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL 
                      ELSE Asset_2.AssetNumber END AS nvarchar) AS ReplacedVehicleName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL 
                      ELSE Asset_2.RegistrationNumber END AS nvarchar) AS ReplacedVehicleRegoNumber, ISNULL(Contact_4.FirstName, N'') + N' ' + ISNULL(Contact_4.LastName, N'') 
                      AS SupplierName, CAST(dbo.Asset.ReplacementValue - dbo.Asset.SalvageValue AS numeric(18, 7)) AS ChangeOverValue, 
                      CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE ISNULL(Contact_5.FirstName, N'') + N' ' + ISNULL(Contact_5.LastName, N'') END AS nvarchar) 
                      AS FinanceSupplierName, CAST(CASE WHEN Asset.IsAsset = 0 THEN NULL ELSE ISNULL(Contact_6.FirstName, N'') + N' ' + ISNULL(Contact_6.LastName, N'') 
                      END AS nvarchar) AS WarrantySupplierName, ISNULL(Contact_7.FirstName, N'') + N' ' + ISNULL(Contact_7.LastName, N'') AS InsuranceSupplierName, 
                      CAST(dbo.Asset.NumberOfRepayments * dbo.Asset.RepaymentAmount AS numeric(18, 7)) AS TotalLeasePayment, 
                      ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) - ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) AS AvailableStock, 
                      ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) AS StockOnReserve, ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) AS StockOnHand, 
                      ISNULL(dbo.vwCatalogueStockOnOrder.StockOnOrder, 0) AS StockOnOrder, ISNULL(dbo.vwCatalogueListing.TotalQuantityRequisitioned, 0) AS StockRequisitionedView, 
                      dbo.CatalogueGroup.CatalogueGroupID, dbo.CatalogueClass.CatalogueClassID, dbo.vwAssetReadingsCurrent.IsLast, 
                      CAST(CASE WHEN Asset.WarrantyFinishDateTime IS NULL AND Asset.WarrantyStartDateTime IS NULL AND IsNull(Asset.WarrantyPeriodReading, 0) = 0 AND 
                      isnull(asset.warrantyPeriodMonths, 0) = 0 THEN 0 ELSE 1 END AS bit) AS ValidateAssetWarranty, ISNULL(DTAssetFuelTotalCost.AssetFuelTotalCost, 0) 
                      AS AssetFuelTotalCost, ISNULL(dbo.vwWOSpareAssetTotalCost.AssetSpareTotalCost, 0) AS WorkOrderSparesTotalCost, 
                      ISNULL(dtWorkOrderTradesTotalCost.WorkOrderTradesTotalCost, 0) AS WorkOrderTradesTotalCost, ISNULL(dbo.vwWOSpareAssetTotalCost.AssetSpareTotalCost, 0) 
                      + ISNULL(dtWorkOrderTradesTotalCost.WorkOrderTradesTotalCost, 0) AS TotalMaintenanceCosts, ISNULL(dbo.vwWOSpareAssetTotalCost.AssetSpareTotalCost, 0) 
                      + ISNULL(dtWorkOrderTradesTotalCost.WorkOrderTradesTotalCost, 0) + ISNULL(DTAssetFuelTotalCost.AssetFuelTotalCost, 0) AS TotalCosts
FROM         dbo.Contact AS Contact_3 RIGHT OUTER JOIN
                      dbo.Asset AS Asset_2 RIGHT OUTER JOIN
                      dbo.vwCatalogueStockOnOrder RIGHT OUTER JOIN
                          (SELECT     AssetID, SUM(FuelCost) AS AssetFuelTotalCost
                            FROM          dbo.vwAssetFuelPerAsset
                            GROUP BY AssetID) AS DTAssetFuelTotalCost RIGHT OUTER JOIN
                      dbo.Asset LEFT OUTER JOIN
                          (SELECT     dbo.WorkOrder.AssetID, SUM(ISNULL(dbo.WorkOrderTrade.ActualDurationHours, 0) * ISNULL(dbo.WorkOrderTrade.HourlyRate, 0)) 
                                                   AS WorkOrderTradesTotalCost
                            FROM          dbo.WorkOrder LEFT OUTER JOIN
                                                   dbo.WorkOrderTrade ON dbo.WorkOrder.WorkOrderID = dbo.WorkOrderTrade.WorkOrderID
                            GROUP BY dbo.WorkOrder.AssetID) AS dtWorkOrderTradesTotalCost ON dbo.Asset.AssetID = dtWorkOrderTradesTotalCost.AssetID LEFT OUTER JOIN
                      dbo.vwWOSpareAssetTotalCost ON dbo.Asset.AssetID = dbo.vwWOSpareAssetTotalCost.AssetID ON 
                      DTAssetFuelTotalCost.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN
                      dbo.AssetType ON dbo.Asset.AssetTypeID = dbo.AssetType.AssetTypeID LEFT OUTER JOIN
                      dbo.Colour ON dbo.Asset.ColourID = dbo.Colour.ColourID LEFT OUTER JOIN
                      dbo.vwAssetReadingsCurrent ON dbo.Asset.AssetID = dbo.vwAssetReadingsCurrent.AssetID AND 
                      dbo.Asset.FrequencyTypeID = dbo.vwAssetReadingsCurrent.FrequencyTypeID LEFT OUTER JOIN
                      dbo.vwAssetLastAssetMovement ON dbo.Asset.AssetID = dbo.vwAssetLastAssetMovement.AssetID LEFT OUTER JOIN
                      dbo.vwAssetToDoListCount ON dbo.Asset.AssetID = dbo.vwAssetToDoListCount.AssetID LEFT OUTER JOIN
                      dbo.vwAssetDrawingCount ON dbo.Asset.AssetID = dbo.vwAssetDrawingCount.AssetID LEFT OUTER JOIN
                      dbo.vwAssetDocumentCount ON dbo.Asset.AssetID = dbo.vwAssetDocumentCount.AssetID LEFT OUTER JOIN
                      dbo.vwCatalogueSupplierCount ON dbo.Asset.CatalogueID = dbo.vwCatalogueSupplierCount.CatalogueID LEFT OUTER JOIN
                      dbo.vwCatalogueAssetCount ON dbo.Asset.CatalogueID = dbo.vwCatalogueAssetCount.CatalogueID LEFT OUTER JOIN
                      dbo.vwCatalogueQuantityReserved ON dbo.Asset.AssetID = dbo.vwCatalogueQuantityReserved.AssetID LEFT OUTER JOIN
                      dbo.vwCatalogueListing ON dbo.Asset.AssetID = dbo.vwCatalogueListing.AssetID ON dbo.vwCatalogueStockOnOrder.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN
                      dbo.vwCatalogueStockOnHand ON dbo.Asset.AssetID = dbo.vwCatalogueStockOnHand.AssetID LEFT OUTER JOIN
                      dbo.Contact AS Contact_7 ON dbo.Asset.InsuranceSupplierContactID = Contact_7.ContactID LEFT OUTER JOIN
                      dbo.Contact AS Contact_6 ON dbo.Asset.WarrantySupplierContactID = Contact_6.ContactID LEFT OUTER JOIN
                      dbo.Contact AS Contact_5 ON dbo.Asset.FinanceSupplierContactID = Contact_5.ContactID LEFT OUTER JOIN
                      dbo.Contact AS Contact_4 ON dbo.Asset.SupplierContactID = Contact_4.ContactID ON Asset_2.AssetID = dbo.Asset.ReplacedVehicleAssetID LEFT OUTER JOIN
                      dbo.TankUnit ON dbo.Asset.TankUnitID = dbo.TankUnit.TankUnitID ON Contact_3.ContactID = dbo.Asset.DriverContactID LEFT OUTER JOIN
                      dbo.FuelType AS FuelType_1 ON dbo.Asset.SecondaryFuelTypeID = FuelType_1.FuelTypeID LEFT OUTER JOIN
                      dbo.FuelType ON dbo.Asset.PrimaryFuelTypeID = dbo.FuelType.FuelTypeID LEFT OUTER JOIN
                      dbo.AssetStatus ON dbo.Asset.AssetStatusID = dbo.AssetStatus.AssetStatusID LEFT OUTER JOIN
                      dbo.ModelNumber ON dbo.Asset.ModelNumberID = dbo.ModelNumber.ModelNumberID LEFT OUTER JOIN
                      dbo.Manufacturer ON dbo.Asset.ManufacturerID = dbo.Manufacturer.ManufacturerID LEFT OUTER JOIN
                      dbo.FrequencyType ON dbo.Asset.FrequencyTypeID = dbo.FrequencyType.FrequencyTypeID LEFT OUTER JOIN
                      dbo.Contact AS Contact_2 ON dbo.Asset.ContractorContactID = Contact_2.ContactID LEFT OUTER JOIN
                      dbo.Contact ON dbo.Asset.CustomerContactID = dbo.Contact.ContactID LEFT OUTER JOIN
                      dbo.AccountCode ON dbo.Asset.AccountCodeID = dbo.AccountCode.AccountCodeID LEFT OUTER JOIN
                      dbo.Department ON dbo.Asset.DepartmentID = dbo.Department.DepartmentID LEFT OUTER JOIN
                      dbo.Tax ON dbo.Asset.TaxID = dbo.Tax.TaxID LEFT OUTER JOIN
                      dbo.Asset AS Asset_1 ON dbo.Asset.ParentAssetID = Asset_1.AssetID LEFT OUTER JOIN
                      dbo.BinLocation ON dbo.Asset.BinLocationID = dbo.BinLocation.BinLocationID LEFT OUTER JOIN
                      dbo.Store ON dbo.Asset.StoreID = dbo.Store.StoreID LEFT OUTER JOIN
                      dbo.Contact AS Contact_1 ON dbo.Asset.CreatedByContactID = Contact_1.ContactID LEFT OUTER JOIN
                      dbo.UOM RIGHT OUTER JOIN
                      dbo.CatalogueGroup RIGHT OUTER JOIN
                      dbo.CatalogueClass RIGHT OUTER JOIN
                      dbo.Catalogue ON dbo.CatalogueClass.CatalogueClassID = dbo.Catalogue.CatalogueClassID ON 
                      dbo.CatalogueGroup.CatalogueGroupID = dbo.Catalogue.CatalogueGroupID ON dbo.UOM.UOMID = dbo.Catalogue.UOMID ON 
                      dbo.Asset.CatalogueID = dbo.Catalogue.CatalogueID
WHERE     (dbo.vwAssetReadingsCurrent.IsLast = 'YES') OR
                      (dbo.vwAssetReadingsCurrent.IsLast IS NULL)
GO

IF OBJECT_ID(N'vwAssetHireOrderListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwAssetHireOrderListing]
GO
CREATE VIEW dbo.vwAssetHireOrderListing
AS
SELECT     DISTINCT dbo.HireRate.AssetID, dbo.Asset.AssetNumber, dbo.Asset.AssetDescription, dbo.GetAssetHireRateIDs(dbo.Asset.AssetID) AS AssetHireRateIDs, '' AS HireOrderStatus, 
                      dbo.Asset.AssetTypeID, dbo.Asset.ManufacturerID, dbo.Asset.ModelNumberID
FROM         dbo.Asset RIGHT OUTER JOIN
                      dbo.HireRate ON dbo.Asset.AssetID = dbo.HireRate.AssetID
WHERE     (dbo.Asset.IsAsset = 1)
GO

IF OBJECT_ID(N'vwAssetReadingRecording', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwAssetReadingRecording]
GO
CREATE VIEW dbo.vwAssetReadingRecording
AS
SELECT     dbo.AssetReading.AssetReadingID, dbo.Asset.AssetNumber, dbo.Asset.AssetDescription, Asset_1.AssetNumber AS ParentAssetNumber, 
                      dbo.FrequencyType.FrequencyTypeName, dbo.vwAssetReadingsCurrent.ReadingDateTime AS LastReadingDate, 
                      dbo.vwAssetReadingsCurrent.ReadingDateTime AS LastReadingDate_1, dbo.vwAssetReadingsCurrent.Reading AS LastReading, 
                      dbo.GetAssetRegionIDs(dbo.AssetReading.AssetID) AS RegionIDs, CAST(NULL AS datetime) AS NewReadingDate, CAST(NULL AS datetime) AS NewReadingDate_1, 
                      CAST(NULL AS numeric(18, 7)) AS NewReading, CAST(NULL AS numeric(18, 7)) AS dDiffBeforeDelete, CAST(0 AS bit) AS IsValidated
FROM         dbo.vwAssetReadingsCurrent RIGHT OUTER JOIN
                      dbo.AssetReading INNER JOIN
                      dbo.FrequencyType ON dbo.AssetReading.FrequencyTypeID = dbo.FrequencyType.FrequencyTypeID ON 
                      dbo.vwAssetReadingsCurrent.AssetReadingID = dbo.AssetReading.AssetReadingID LEFT OUTER JOIN
                      dbo.Asset AS Asset_1 RIGHT OUTER JOIN
                      dbo.Asset ON Asset_1.AssetID = dbo.Asset.ParentAssetID ON dbo.AssetReading.AssetID = dbo.Asset.AssetID
WHERE     (dbo.vwAssetReadingsCurrent.IsLast = 'YES' OR
                      dbo.vwAssetReadingsCurrent.IsLast IS NULL) AND (dbo.AssetReading.IsActive = 1) AND (dbo.Asset.IsActive = 1)
GO

IF OBJECT_ID(N'vwAssetRegisterAssetMovementListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwAssetRegisterAssetMovementListing]
GO
CREATE VIEW dbo.vwAssetRegisterAssetMovementListing
AS
SELECT     AM.AssetID, AM.AssetMovementID, InstalledDateTime,  InstalledDateTime as  InstalledDateTime_1, Reason, IsRename, DT.AssetMovementLocation
FROM         dbo.AssetMovement AM OUTER apply dbo.fxAssetMovementLocation(AM.AssetID, AM.AssetMovementID) AS DT
WHERE     AM.AssetMovementID = DT.AssetMovementID
GO

IF OBJECT_ID(N'vwAssetRegisterPreventativeMaintenanceListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwAssetRegisterPreventativeMaintenanceListing]
GO
CREATE VIEW dbo.vwAssetRegisterPreventativeMaintenanceListing
AS
SELECT        dbo.PreventativeMaintenanceAsset.PreventativeMaintenanceAssetID, dbo.PreventativeMaintenance.PreventativeMaintenanceNumber, dbo.PreventativeMaintenance.PreventativeMaintenanceDescription, 
                         dbo.PreventativeMaintenanceAsset.LastDoneDateTime, dbo.PreventativeMaintenanceAsset.LastDoneReading, dbo.PreventativeMaintenanceAsset.IsInUse, dbo.PreventativeMaintenance.IsInspection, 
                         dbo.PreventativeMaintenanceAsset.AssetID, dbo.Asset.AssetNumber, dbo.PreventativeMaintenance.PreventativeMaintenanceID, dbo.PreventativeMaintenance.IsGroupInspection, 
                         dbo.vwNextDueDate.NextDueDate, dbo.FrequencyType.FrequencyTypeName, dbo.GetInspectionAssetIDs(dbo.PreventativeMaintenance.PreventativeMaintenanceID) AS InspectionAssetIDs, 
                         dbo.GetInspectionAssetTypeIDs(dbo.PreventativeMaintenance.PreventativeMaintenanceID) AS InspectionAssetTypeIDs, dbo.PreventativeMaintenance.ParentPreventativeMaintenanceID, 
                         dbo.PreventativeMaintenance.IsStandard
FROM            dbo.PreventativeMaintenance INNER JOIN
                         dbo.PreventativeMaintenanceAsset ON dbo.PreventativeMaintenance.PreventativeMaintenanceID = dbo.PreventativeMaintenanceAsset.PreventativeMaintenanceID LEFT OUTER JOIN
                         dbo.FrequencyType ON dbo.PreventativeMaintenance.FrequencyTypeID = dbo.FrequencyType.FrequencyTypeID LEFT OUTER JOIN
                         dbo.vwNextDueDate ON dbo.PreventativeMaintenanceAsset.PreventativeMaintenanceAssetID = dbo.vwNextDueDate.PreventativeMaintenanceAssetID LEFT OUTER JOIN
                         dbo.Asset ON dbo.PreventativeMaintenanceAsset.AssetID = dbo.Asset.AssetID
GO

IF OBJECT_ID(N'vwAssetSelectorAuditListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwAssetSelectorAuditListing]
GO
CREATE VIEW [dbo].[vwAssetSelectorAuditListing]
AS
SELECT  CAST(0 as bit) As IsInclude, CASE WHEN Asset.AssetTypeID is null Then  Cast(null as int) Else dbo.GetAssetTypeQuestionSetID(Asset.AssetTypeID) END as QuestionSetID, CASE WHEN Asset.AssetTypeID is null Then  '' Else dbo.GetAssetTypeQuestionSetName(Asset.AssetTypeID) END as QuestionSetName, dbo.Asset.AssetID, dbo.Asset.AssetNumber, dbo.Asset.AssetDescription, Asset_1.AssetNumber AS ParentAsset, dbo.AssetType.AssetTypeName, 
                      dbo.Manufacturer.ManufacturerName, dbo.ModelNumber.ModelNumberName, dbo.AccountCode.AccountCodeName, dbo.Department.DepartmentName, 
                      dbo.Asset.SerialNumber, dbo.Asset.RegistrationNumber, dbo.Asset.BarcodeNumber, dbo.Asset.IsActive, dbo.Asset.IsAsset, 
                      dbo.vwRegionsAssetRegionIDs.RegionIDs, dbo.Asset.VINChassis, dbo.Asset.AssetTypeID, dbo.Asset.ParentAssetID, dbo.Asset.ContractorContactID, 
                      dbo.Contact.FirstName AS ContractorContactName
FROM         dbo.ModelNumber RIGHT OUTER JOIN
                      dbo.Contact RIGHT OUTER JOIN
                      dbo.Asset ON dbo.Contact.ContactID = dbo.Asset.ContractorContactID LEFT OUTER JOIN
                      dbo.Asset AS Asset_1 ON dbo.Asset.ParentAssetID = Asset_1.AssetID ON dbo.ModelNumber.ModelNumberID = dbo.Asset.ModelNumberID LEFT OUTER JOIN
                      dbo.Department ON dbo.Asset.DepartmentID = dbo.Department.DepartmentID LEFT OUTER JOIN
                      dbo.Manufacturer ON dbo.Asset.ManufacturerID = dbo.Manufacturer.ManufacturerID LEFT OUTER JOIN
                      dbo.AccountCode ON dbo.Asset.AccountCodeID = dbo.AccountCode.AccountCodeID LEFT OUTER JOIN
                      dbo.AssetType ON dbo.Asset.AssetTypeID = dbo.AssetType.AssetTypeID LEFT OUTER JOIN
                      dbo.vwRegionsAssetRegionIDs ON dbo.Asset.AssetID = dbo.vwRegionsAssetRegionIDs.AssetID
WHERE     (dbo.Asset.IsAsset = 1) AND (NOT (dbo.Asset.AssetNumber LIKE N'MEX Inspections'))
GO

IF OBJECT_ID(N'vwAssetSelectorListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwAssetSelectorListing]
GO
CREATE VIEW dbo.vwAssetSelectorListing
AS
SELECT     dbo.Asset.AssetID, dbo.Asset.AssetNumber, dbo.Asset.AssetDescription, Asset_1.AssetNumber AS ParentAsset, dbo.AssetType.AssetTypeName, 
                      dbo.Manufacturer.ManufacturerName, dbo.ModelNumber.ModelNumberName, dbo.AccountCode.AccountCodeName, dbo.Department.DepartmentName, 
                      dbo.Asset.SerialNumber, dbo.Asset.RegistrationNumber, dbo.Asset.BarcodeNumber, dbo.Asset.IsActive, dbo.Asset.IsAsset, 
                      dbo.vwRegionsAssetRegionIDs.RegionIDs, dbo.Asset.VINChassis, dbo.Asset.AssetTypeID, dbo.Asset.ParentAssetID, dbo.Asset.ContractorContactID, 
                      dbo.Contact.FirstName AS ContractorContactName
FROM         dbo.ModelNumber RIGHT OUTER JOIN
                      dbo.Contact RIGHT OUTER JOIN
                      dbo.Asset ON dbo.Contact.ContactID = dbo.Asset.ContractorContactID LEFT OUTER JOIN
                      dbo.Asset AS Asset_1 ON dbo.Asset.ParentAssetID = Asset_1.AssetID ON dbo.ModelNumber.ModelNumberID = dbo.Asset.ModelNumberID LEFT OUTER JOIN
                      dbo.Department ON dbo.Asset.DepartmentID = dbo.Department.DepartmentID LEFT OUTER JOIN
                      dbo.Manufacturer ON dbo.Asset.ManufacturerID = dbo.Manufacturer.ManufacturerID LEFT OUTER JOIN
                      dbo.AccountCode ON dbo.Asset.AccountCodeID = dbo.AccountCode.AccountCodeID LEFT OUTER JOIN
                      dbo.AssetType ON dbo.Asset.AssetTypeID = dbo.AssetType.AssetTypeID LEFT OUTER JOIN
                      dbo.vwRegionsAssetRegionIDs ON dbo.Asset.AssetID = dbo.vwRegionsAssetRegionIDs.AssetID
WHERE     (dbo.Asset.IsAsset = 1) AND (NOT (dbo.Asset.AssetNumber LIKE N'MEX Inspections'))
GO

IF OBJECT_ID(N'vwAssetTree', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwAssetTree]
GO
CREATE VIEW [dbo].[vwAssetTree] 
AS 
SELECT     dbo.Asset.AssetID, dbo.Asset.ParentAssetID, dbo.Asset.SequenceNumber, dbo.Asset.AssetNumber, ISNULL(CASE WHEN (DATALENGTH(Asset.AssetDescription) / 2)  
                      > 50 THEN SUBSTRING(Asset.AssetDescription, 0, 50) + ' ...' ELSE Asset.AssetDescription END, '') AS AssetDescription, dbo.Asset.IsActive, dbo.Asset.IsAsset,  
                      dbo.GetAssetRegionIDs(dbo.Asset.AssetID) AS RegionIDs, dbo.Asset.AssetTypeID, dbo.Asset.ContractorContactID, dbo.Contact.FirstName AS ContractorContactName,  
                      Asset_1.AssetNumber AS ParentAssetNumber 
FROM         dbo.Asset LEFT OUTER JOIN 
                      dbo.Asset AS Asset_1 ON dbo.Asset.ParentAssetID = Asset_1.AssetID LEFT OUTER JOIN 
                      dbo.Contact ON dbo.Asset.ContractorContactID = dbo.Contact.ContactID 
WHERE     (dbo.Asset.IsAsset = 1) AND (NOT (dbo.Asset.AssetNumber LIKE N'MEX Inspections'))
GO

IF OBJECT_ID(N'vwAssetTreeWithHasChildren', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwAssetTreeWithHasChildren]
GO
CREATE VIEW [dbo].[vwAssetTreeWithHasChildren] 
AS 
SELECT        dbo.Asset.AssetID, dbo.Asset.ParentAssetID, dbo.Asset.SequenceNumber, dbo.Asset.AssetNumber, ISNULL(CASE WHEN (DATALENGTH(Asset.AssetDescription) / 2) > 50 THEN SUBSTRING(Asset.AssetDescription, 0, 50)  
                         + ' ...' ELSE Asset.AssetDescription END, '') AS AssetDescription, dbo.Asset.IsActive, dbo.Asset.IsAsset, dbo.GetAssetRegionIDs(dbo.Asset.AssetID) AS RegionIDs, dbo.Asset.AssetTypeID,  
                         dbo.Asset.ContractorContactID, dbo.Contact.FirstName AS ContractorContactName, Asset_1.AssetNumber AS ParentAssetNumber, dbo.GetAssetHasChildren(dbo.Asset.AssetID) AS hasChildren, 
						 Asset.IsStandDown 
FROM            dbo.Asset LEFT OUTER JOIN 
                         dbo.Asset AS Asset_1 ON dbo.Asset.ParentAssetID = Asset_1.AssetID LEFT OUTER JOIN 
                         dbo.Contact ON dbo.Asset.ContractorContactID = dbo.Contact.ContactID 
WHERE        (dbo.Asset.IsAsset = 1) AND (NOT (dbo.Asset.AssetNumber LIKE N'MEX Inspections'))
GO

IF OBJECT_ID(N'vwCatalogueAssetAPLAssetIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwCatalogueAssetAPLAssetIDs]
GO
CREATE VIEW dbo.vwCatalogueAssetAPLAssetIDs
AS
SELECT     CatalogueID, dbo.GetCatalogueAPLAssetIDs(CatalogueID) AS AssetIDs
FROM         dbo.Catalogue
GO

IF OBJECT_ID(N'vwCatalogueListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwCatalogueListing]
GO
CREATE VIEW dbo.vwCatalogueListing
AS
SELECT        dbo.Asset.AssetID, dbo.Catalogue.CatalogueID, dbo.Catalogue.CatalogueNumber, dbo.Catalogue.CatalogueDescription, dbo.Catalogue.IsHazardous, dbo.Catalogue.Keywords, dbo.Catalogue.IsStocked, 
                         dbo.Catalogue.UserDefinedTextBox1, dbo.Catalogue.UserDefinedTextBox2, dbo.Catalogue.IsCatalogued, dbo.UOM.UOMName, dbo.CatalogueClass.CatalogueClassName, dbo.CatalogueGroup.CatalogueGroupName, 
                         dbo.INC.INCName, Catalogue_1.CatalogueNumber AS SupersededCatalogueNumber, dbo.StockClass.StockClassName, dbo.Asset.UnitPrice, Asset_1.AssetNumber AS ParentAssetNumber, dbo.Store.StoreName, 
                         dbo.BinLocation.BinLocationName, dbo.Asset.AreaOfPlant, dbo.Asset.IsActive, dbo.Asset.MaximumQuantity, dbo.Asset.MinimumQuantity, dbo.vwContactFullName.FullName AS CreatedBy, dbo.Asset.Comment, 
                         dbo.Tax.TaxName, dbo.Tax.TaxPercentage, dbo.Asset.MarkupTypeName, CASE WHEN Asset.MarkupTypeName = 'Fixed Price' THEN Asset.MarkupAmount - Asset.unitprice ELSE dbo.Asset.MarkupAmount END AS MarkupAmount,
                          dbo.Asset.ShelfLifeDays, dbo.Asset.ModifiedDateTime, ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) AS StockOnHand, ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) 
                         - ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) AS AvailableStock, 
                         CAST(CASE WHEN Asset.MarkupTypeName = '' THEN Asset.UnitPrice WHEN Asset.MarkupTypeName = 'Fixed Price' THEN Asset.MarkupAmount WHEN Asset.MarkupTypeName = 'Percentage' THEN Asset.UnitPrice + (Asset.UnitPrice
                          * Asset.MarkupAmount) WHEN Asset.MarkupTypeName = 'Amount' THEN Asset.UnitPrice + Asset.MarkupAmount ELSE Asset.UnitPrice END AS MONEY) AS SellPrice, 
                         ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) AS TotalQuantityReserved, ISNULL(dbo.vwCatalogueQuantityRequisitioned.TotalQuantityRequisitioned, 0) AS TotalQuantityRequisitioned, 
                         ISNULL(EntityImage.EntityImageThumbnail, EntityImage.EntityImage) AS CatalogueImage, CAST(N'' AS NVARCHAR) AS CatalogueImageString, Doc.CatalogueImage15, dbo.Asset.BarcodeNumber, 
                         dbo.CatalogueSupplier.SupplierStockNumber, ISNULL(DT.DocumentCount, 0) AS DocumentCount
FROM            dbo.Asset LEFT OUTER JOIN dbo.EntityImage ON dbo.Asset.AssetID = dbo.EntityImage.EntityID AND dbo.EntityImage.EntityName = N'Asset' LEFT OUTER JOIN
                         dbo.vwCatalogueStockOnHand ON dbo.Asset.AssetID = dbo.vwCatalogueStockOnHand.AssetID LEFT OUTER JOIN
                         dbo.vwCatalogueQuantityReserved ON dbo.Asset.AssetID = dbo.vwCatalogueQuantityReserved.AssetID LEFT OUTER JOIN
                         dbo.vwCatalogueQuantityRequisitioned ON dbo.Asset.AssetID = dbo.vwCatalogueQuantityRequisitioned.AssetID LEFT OUTER JOIN
                         dbo.Catalogue ON dbo.Asset.CatalogueID = dbo.Catalogue.CatalogueID LEFT OUTER JOIN
                         dbo.vwContactFullName ON dbo.Asset.CreatedByContactID = dbo.vwContactFullName.ContactID LEFT OUTER JOIN
                         dbo.BinLocation ON dbo.Asset.BinLocationID = dbo.BinLocation.BinLocationID LEFT OUTER JOIN
                         dbo.Store ON dbo.Asset.StoreID = dbo.Store.StoreID LEFT OUTER JOIN
                         dbo.Asset AS Asset_1 ON dbo.Asset.ParentAssetID = Asset_1.AssetID LEFT OUTER JOIN
                         dbo.StockClass ON dbo.Catalogue.StockClassID = dbo.StockClass.StockClassID LEFT OUTER JOIN
                         dbo.Catalogue AS Catalogue_1 ON dbo.Catalogue.SupersededCatalogueID = Catalogue_1.CatalogueID LEFT OUTER JOIN
                         dbo.INC ON dbo.Catalogue.INCID = dbo.INC.INCID LEFT OUTER JOIN
                         dbo.CatalogueGroup ON dbo.Catalogue.CatalogueGroupID = dbo.CatalogueGroup.CatalogueGroupID LEFT OUTER JOIN
                         dbo.CatalogueClass ON dbo.Catalogue.CatalogueClassID = dbo.CatalogueClass.CatalogueClassID LEFT OUTER JOIN
                         dbo.UOM ON dbo.Catalogue.UOMID = dbo.UOM.UOMID LEFT OUTER JOIN
                         dbo.Tax ON dbo.Asset.TaxID = dbo.Tax.TaxID LEFT OUTER JOIN
                         dbo.CatalogueSupplier ON Asset.CatalogueID = dbo.CatalogueSupplier.CatalogueID AND IsPreferredSupplier = 1 LEFT OUTER JOIN
                             (SELECT        EntityID, COUNT(*) AS DocumentCount
                               FROM            dbo.[Document]
                               WHERE        EntityName = 'Asset' AND IsActive = 1
                               GROUP BY EntityID) AS DT ON dbo.Asset.AssetID = DT.EntityID OUTER APPLY
                             (SELECT        TOP 1 EntityID, CASE WHEN FileID IS NOT NULL THEN 'Documents/' + CAST(FileID AS NVARCHAR(MAX)) + SUBSTRING(FilePath, LEN(FilePath) - CHARINDEX('.', REVERSE(FilePath)) + 1, LEN(FilePath)) 
                                                         ELSE FilePath /*REVERSE on above char index is to get the last index of . */ END AS CatalogueImage15
                               FROM            dbo.Document
                               WHERE        DT.DocumentCount > 0 AND EntityName = 'Asset' AND DT.EntityID = EntityID
                               ORDER BY SequenceNumber ASC) Doc
WHERE        (dbo.Asset.IsAsset = 0)
GO

IF OBJECT_ID(N'vwCatalogueTransactions', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwCatalogueTransactions]
GO
CREATE VIEW dbo.vwCatalogueTransactions  
AS  
 
SELECT        TOP (100) PERCENT CatalogueTransaction.CatalogueTransactionID, Catalogue.CatalogueNumber, Catalogue.CatalogueDescription, Store.StoreName, BinLocation.BinLocationName,  
                         CASE CatalogueTransaction.CatalogueTransactionActionName WHEN 'Store Transfer In' THEN 'Store Transfer In' + ISNULL 
                             ((SELECT        '(From ' + StoreName + ')' 
                                 FROM            Store 
                                 WHERE        Store.StoreID = relatedAsset.StoreID), '') WHEN 'Store Transfer Out' THEN 'Store Transfer Out' + ISNULL(CAST 
                             ((SELECT        TOP 1 '(To ' + sTemp.StoreName + ')' 
                                 FROM            dbo.CatalogueTransaction relat INNER JOIN 
                                                          Asset aTemp ON aTemp.AssetID = relat.CatalogueAssetID INNER JOIN 
                                                          Store sTemp ON sTemp.StoreID = aTemp.StoreID 
                                 WHERE        relat.RelatedCatalogueTransactionID = CatalogueTransaction.CatalogueTransactionID 
                                 ORDER BY CatalogueTransactionDateTime DESC) AS NVARCHAR), '') ELSE CatalogueTransaction.CatalogueTransactionActionName END AS CatalogueTransactionActionName,  
                         CatalogueTransaction.CatalogueTransactionDateTime, CatalogueTransaction.Quantity, CatalogueTransaction.UnitCost, CatalogueTransaction.IsActive, CatalogueTransaction.DiscountPercentage, Tax.TaxName,  
                         CatalogueTransaction.TaxPercentage, Contact_1.FirstName AS Supplier, PurchaseOrderInvoiceMatch.InvoiceNumber, WorkOrder.WorkOrderID, WorkOrder.WorkOrderNumber, WorkOrder.IsHistoryCreated,  
                         Reservation.ReservationID, Reservation.ReservationNumber, Requisition.RequisitionID, Requisition.RequisitionNumber, Stocktake.StocktakeNumber, AccountCode.AccountCodeName,  
                         Contact.FirstName + N' ' + Contact.LastName AS IssuedToReturnedFrom, CurrencyType.CurrencyTypeCode, CurrencyType.ExchangeRatePercentage, CatalogueTransaction.CreatedDateTime,  
                         (CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost - CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CatalogueTransaction.DiscountPercentage)  
                         + (CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost - CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CatalogueTransaction.DiscountPercentage)  
                         * CatalogueTransaction.TaxPercentage AS TotalLocalCurrency, PurchaseOrder.PurchaseOrderNumber, PurchaseOrderLine.LineNumber, Asset_1.AssetNumber + N' - ' + Asset_1.AssetDescription AS AssetNumber,  
                         CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CatalogueTransaction.DiscountPercentage AS DiscountCostLocalCurrency, (CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost)  
                         * (1 - CatalogueTransaction.DiscountPercentage) * CatalogueTransaction.TaxPercentage AS TaxCostLocalCurrency, CatalogueTransaction.CurrencyTypeID, PurchaseOrder.PurchaseOrderID,  
                         PurchaseOrderLine.PurchaseOrderLineID, Catalogue.IsCatalogued, CatalogueTransaction.CatalogueAssetID, Store.StoreID, BinLocation.BinLocationID, AccountCode.AccountCodeID,  
                         CatalogueTransaction.IssuedToReturnFromContactID, PurchaseOrder.SupplierContactID, CatalogueTransaction.PurchaseOrderReceiptReturnID, CatalogueTransaction.ModifiedDateTime, Asset_1.AssetID,  
                         ISNULL(vwCatalogueTransactionsNonMexPOSub.NonMexPurchaseOrderNumber, PurchaseOrder.PurchaseOrderNumber) AS PurchaseOrderNoForTransactionListing, '(' + CONVERT(NVARCHAR(MAX),  
                         Asset_1.AssetID) + ')' AS AssetIDForIncludeChildren, dbo.GetStoreRegionIDs(Store.StoreID) AS RegionIDs, CASE WHEN CurrencyType.CurrencyTypeID IS NOT NULL  
                         THEN (((CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CurrencyType.ExchangeRatePercentage)  
                         - (CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CurrencyType.ExchangeRatePercentage * CatalogueTransaction.DiscountPercentage))  
                         + (((CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CurrencyType.ExchangeRatePercentage)  
                         - (CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CurrencyType.ExchangeRatePercentage * CatalogueTransaction.DiscountPercentage)) * CatalogueTransaction.TaxPercentage))  
                         ELSE (((CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost) - (CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CatalogueTransaction.DiscountPercentage))  
                         + (((CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost) - (CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CatalogueTransaction.DiscountPercentage))  
                         * CatalogueTransaction.TaxPercentage)) END AS TotalForeignCurrency, CASE WHEN CurrencyType.CurrencyTypeID IS NOT NULL  
                         THEN (CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CurrencyType.ExchangeRatePercentage * CatalogueTransaction.DiscountPercentage)  
                         ELSE CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CatalogueTransaction.DiscountPercentage END AS DiscountCostForeignCurrency, CASE WHEN CurrencyType.CurrencyTypeID IS NOT NULL 
                          THEN CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * CurrencyType.ExchangeRatePercentage * (1 - CatalogueTransaction.DiscountPercentage)  
                         * CatalogueTransaction.TaxPercentage ELSE CatalogueTransaction.Quantity * CatalogueTransaction.UnitCost * (1 - CatalogueTransaction.DiscountPercentage)  
                         * CatalogueTransaction.TaxPercentage END AS TaxCostForeignCurrency, CASE WHEN CurrencyType.CurrencyTypeID IS NOT NULL  
                         THEN CatalogueTransaction.UnitCost * CurrencyType.ExchangeRatePercentage ELSE CatalogueTransaction.UnitCost END AS UnitCostForeignCurrency, ISNULL(Region.RegionName, N'Default') AS RegionName,  
                         CurrencyType.DecimalPlaces AS CurrencyTypeDecimalPlaces, CatalogueTransaction.CatalogueTransactionActionName AS Expr1 
FROM            Tax RIGHT OUTER JOIN 
                         PurchaseOrderInvoiceMatch RIGHT OUTER JOIN 
                         CurrencyType RIGHT OUTER JOIN 
                         vwCatalogueTransactionsNonMexPOSub RIGHT OUTER JOIN 
                         Asset AS Asset_1 RIGHT OUTER JOIN 
                         CatalogueTransaction ON Asset_1.AssetID = CatalogueTransaction.AssetAssetID LEFT OUTER JOIN 
                         Region RIGHT OUTER JOIN 
                         PurchaseOrderReceiptReturn ON Region.RegionID = PurchaseOrderReceiptReturn.RegionID ON  
                         CatalogueTransaction.PurchaseOrderReceiptReturnID = PurchaseOrderReceiptReturn.PurchaseOrderReceiptReturnID LEFT OUTER JOIN 
                         CatalogueTransaction AS relatedCat ON CatalogueTransaction.RelatedCatalogueTransactionID = relatedCat.CatalogueTransactionID LEFT OUTER JOIN 
                         Asset AS relatedAsset ON relatedAsset.AssetID = relatedCat.CatalogueAssetID ON  
                         vwCatalogueTransactionsNonMexPOSub.PurchaseOrderReceiptReturnID = CatalogueTransaction.PurchaseOrderReceiptReturnID LEFT OUTER JOIN 
                         Asset LEFT OUTER JOIN 
                         Catalogue ON Asset.CatalogueID = Catalogue.CatalogueID ON CatalogueTransaction.CatalogueAssetID = Asset.AssetID LEFT OUTER JOIN 
                         PurchaseOrder INNER JOIN 
                         PurchaseOrderLine ON PurchaseOrder.PurchaseOrderID = PurchaseOrderLine.PurchaseOrderID ON CatalogueTransaction.PurchaseOrderLineID = PurchaseOrderLine.PurchaseOrderLineID LEFT OUTER JOIN 
                         Contact ON CatalogueTransaction.IssuedToReturnFromContactID = Contact.ContactID ON CurrencyType.CurrencyTypeID = CatalogueTransaction.CurrencyTypeID LEFT OUTER JOIN 
                         AccountCode ON CatalogueTransaction.AccountCodeID = AccountCode.AccountCodeID LEFT OUTER JOIN 
                         StocktakeLine INNER JOIN 
                         Stocktake ON StocktakeLine.StocktakeID = Stocktake.StocktakeID ON CatalogueTransaction.StocktakeLineID = StocktakeLine.StocktakeLineID LEFT OUTER JOIN 
                         RequisitionLine INNER JOIN 
                         Requisition ON RequisitionLine.RequisitionID = Requisition.RequisitionID ON CatalogueTransaction.RequisitionLineID = RequisitionLine.RequisitionLineID LEFT OUTER JOIN 
                         WorkOrder INNER JOIN 
                         WorkOrderSpare ON WorkOrder.WorkOrderID = WorkOrderSpare.WorkOrderID ON CatalogueTransaction.WorkOrderSpareID = WorkOrderSpare.WorkOrderSpareID ON  
                         PurchaseOrderInvoiceMatch.PurchaseOrderInvoiceMatchID = CatalogueTransaction.PurchaseOrderInvoiceMatchID ON Tax.TaxID = CatalogueTransaction.TaxID LEFT OUTER JOIN 
                         BinLocation ON Asset.BinLocationID = BinLocation.BinLocationID LEFT OUTER JOIN 
                         Store ON Asset.StoreID = Store.StoreID LEFT OUTER JOIN 
                         Reservation ON CatalogueTransaction.ReservationID = Reservation.ReservationID LEFT OUTER JOIN 
                         Contact AS Contact_1 ON PurchaseOrder.SupplierContactID = Contact_1.ContactID
GO

IF OBJECT_ID(N'vwContactDropDown', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwContactDropDown]
GO
CREATE VIEW [dbo].[vwContactDropDown]
AS
SELECT     dbo.Contact.ContactID, dbo.Contact.ParentContactID, dbo.Contact.FirstName, dbo.Contact.LastName, dbo.Contact.ContactTypeName, 
					CASE WHEN MexUser.IsMexUser = 1 OR MexUser.IsContractorPortalUser = 1 OR MexUser.IsMexOpsUser = 1 OR MexUser.IsVehicleBookingsUser = 1 OR MexUser.IsTransportManagementUser = 1
					OR MexUser.IsWorldUser = 1 THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS IsMexUser, dbo.vwRegionsContactRegionIDs.RegionIDs AS ContactRegionIDs, 
                      dbo.vwRegionsMEXUserContactRegionIDs.RegionIDs AS MEXUserContactRegionIDs, 
                      dbo.vwRegionsContactTradeContactRegionIDs.RegionIDs AS ContactTradeContactRegionIDs, dbo.vwContactFullName.FullName, 
                      CASE (select COUNT(ContactID) FROM ContactTradeCode WHERE ContactTradeCode.ContactID = Contact.ContactID AND ContactTradeCode.IsActive=1) 
							WHEN 0 THEN 0
							ELSE 1
                      END AS HasTradeCode
FROM         dbo.Contact INNER JOIN
                      dbo.vwContactFullName ON dbo.Contact.ContactID = dbo.vwContactFullName.ContactID LEFT OUTER JOIN
                      dbo.vwRegionsContactTradeContactRegionIDs ON dbo.Contact.ContactID = dbo.vwRegionsContactTradeContactRegionIDs.ContactID LEFT OUTER JOIN
                      dbo.vwRegionsMEXUserContactRegionIDs ON dbo.Contact.ContactID = dbo.vwRegionsMEXUserContactRegionIDs.ContactID LEFT OUTER JOIN
                      dbo.vwRegionsContactRegionIDs ON dbo.Contact.ContactID = dbo.vwRegionsContactRegionIDs.ContactID LEFT OUTER JOIN
                      dbo.MexUser ON dbo.Contact.ContactID = dbo.MexUser.ContactID
WHERE     (dbo.Contact.IsActive = 1)
GO

IF OBJECT_ID(N'vwContactsListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwContactsListing]
GO
CREATE VIEW dbo.vwContactsListing 
AS 
    SELECT  CASE WHEN ISNULL(Contact_2.ParentContactID, 0) = 0 
                 THEN vwContactFullName_1.FullName 
                 ELSE vwContactFullName.FullName 
            END AS PrimaryContactFullName , 
            Contact_2.ContactTypeName AS ParentContactTypeName , 
            ISNULL(Contact_1.WorkPhone, Contact_2.WorkPhone) AS PrimaryWorkPhone , 
            ISNULL(Contact_1.MobilePhone, Contact_2.MobilePhone) AS PrimaryMobilePhone , 
            ISNULL(Contact_1.HomePhone, Contact_2.HomePhone) AS PrimaryHomePhone , 
            ISNULL(Contact_1.Email, Contact_2.Email) AS PrimaryEmail , 
            ISNULL(Contact_1.Fax, Contact_2.Fax) AS PrimaryFax , 
            CASE WHEN ISNULL(Contact_2.ParentContactID, 0) = 0 
                 THEN Contact_2.Address1 
                 ELSE Contact_3.Address1 
            END AS ParentAddress1 , 
            CASE WHEN ISNULL(Contact_2.ParentContactID, 0) = 0 
                 THEN Contact_2.Address2 
                 ELSE Contact_3.Address2 
            END AS ParentAddress2 , 
            CASE WHEN ISNULL(Contact_2.ParentContactID, 0) = 0 
                 THEN Contact_2.City 
                 ELSE Contact_3.City 
            END AS ParentCity , 
            CASE WHEN ISNULL(Contact_2.ParentContactID, 0) = 0 
                 THEN Contact_2.State 
                 ELSE Contact_3.State 
            END AS ParentState , 
            CASE WHEN ISNULL(Contact_2.ParentContactID, 0) = 0 
                 THEN Contact_2.PostCode 
                 ELSE Contact_3.PostCode 
            END AS ParentPostCode , 
            CASE WHEN ISNULL(Contact_2.ParentContactID, 0) = 0 
                 THEN Contact_2.Country 
                 ELSE Contact_3.Country 
            END AS ParentCountry , 
            CASE WHEN ISNULL(Contact_2.ParentContactID, 0) = 0 
                 THEN Contact_2.WebAddress 
                 ELSE Contact_3.WebAddress 
            END AS ParentWebAddress , 
            CASE WHEN ISNULL(Contact_2.ParentContactID, 0) = 0 
                 THEN Contact_2.ABN 
                 ELSE Contact_3.ABN 
            END AS ParentABN , 
            Contact_2.IsActive AS ParentIsActive , 
            Department_1.DepartmentName AS ParentDepartmentName , 
            CASE WHEN ISNULL(Contact_2.ParentContactID, 0) = 0 
                 THEN Contact_2.FirstName 
                 ELSE Contact_3.FirstName 
            END AS ParentFirstName , 
            CASE WHEN ISNULL(Contact_2.ParentContactID, 0) = 0 
                 THEN Contact_2.LastName 
                 ELSE Contact_3.LastName 
            END AS ParentLastName , 
            Contact_2.ContactID , 
            dbo.vwContactPrimaryContact.ContactID AS PrimaryContactID , 
            dbo.Department.DepartmentName , 
            Contact_2.ParentContactID , 
            dbo.GetContactRegionIDs(CASE WHEN ISNULL(Contact_2.ParentContactID, 
                                                     0) = 0 
                                         THEN Contact_2.ContactID 
                                         ELSE Contact_3.ContactID 
                                    END) AS RegionIDs , 
            ISNULL(dbo.EntityImage.EntityImageThumbnail, 
                   dbo.EntityImage.EntityImage) AS ContactImage 
    FROM    dbo.Contact AS Contact_2 
            INNER JOIN dbo.vwContactFullName ON Contact_2.ContactID = dbo.vwContactFullName.ContactID 
            LEFT OUTER JOIN dbo.Department ON Contact_2.DepartmentID = dbo.Department.DepartmentID 
            LEFT OUTER JOIN dbo.vwContactFullName AS vwContactFullName_1 
            RIGHT OUTER JOIN dbo.vwContactPrimaryContact ON vwContactFullName_1.ContactID = dbo.vwContactPrimaryContact.ContactID 
            LEFT OUTER JOIN dbo.Contact AS Contact_1 ON dbo.vwContactPrimaryContact.ContactID = Contact_1.ContactID ON Contact_2.ContactID = dbo.vwContactPrimaryContact.ParentContactID 
            LEFT OUTER JOIN dbo.Contact AS Contact_3 
            LEFT OUTER JOIN dbo.Department AS Department_1 ON Contact_3.DepartmentID = Department_1.DepartmentID ON Contact_2.ParentContactID = Contact_3.ContactID 
            LEFT OUTER JOIN dbo.EntityImage ON ENtityImage.EntityID = Contact_2.ContactID 
                                               AND EntityImage.EntityName = 'Contact'
GO

IF OBJECT_ID(N'vwContactWithTradeCode', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwContactWithTradeCode]
GO
CREATE VIEW dbo.vwContactWithTradeCode
AS
SELECT DISTINCT 
                      TOP (100) PERCENT dbo.Contact.ContactID, ISNULL(dbo.Contact.FirstName, '') + N' ' + ISNULL(dbo.Contact.LastName, '') AS FullName, 
                      dbo.vwRegionsContactTradeContactRegionIDs.RegionIDs
FROM         dbo.Contact INNER JOIN
                      dbo.ContactTradeCode ON dbo.Contact.ContactID = dbo.ContactTradeCode.ContactID INNER JOIN
                      dbo.TradeCode ON dbo.ContactTradeCode.TradeCodeID = dbo.TradeCode.TradeCodeID LEFT OUTER JOIN
                      dbo.vwRegionsContactTradeContactRegionIDs ON dbo.ContactTradeCode.ContactID = dbo.vwRegionsContactTradeContactRegionIDs.ContactID
WHERE     (dbo.Contact.IsActive = 1) AND (dbo.ContactTradeCode.IsActive = 1) AND (dbo.TradeCode.IsActive = 1)
ORDER BY FullName
GO

IF OBJECT_ID(N'vwContactWithTradeCode2', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwContactWithTradeCode2]
GO
CREATE VIEW dbo.vwContactWithTradeCode2
AS
SELECT DISTINCT 
                      TOP (100) PERCENT dbo.Contact.ContactID, ISNULL(dbo.Contact.FirstName, '') + N' ' + ISNULL(dbo.Contact.LastName, '') AS FullName, 
                      dbo.vwRegionsContactTradeContactRegionIDs.RegionIDs, dbo.GetContactTradeCodeList(dbo.Contact.ContactID) AS TradeCodes, dbo.Contact.LastName
FROM         dbo.Contact INNER JOIN
                      dbo.ContactTradeCode ON dbo.Contact.ContactID = dbo.ContactTradeCode.ContactID INNER JOIN
                      dbo.TradeCode ON dbo.ContactTradeCode.TradeCodeID = dbo.TradeCode.TradeCodeID LEFT OUTER JOIN
                      dbo.vwRegionsContactTradeContactRegionIDs ON dbo.ContactTradeCode.ContactID = dbo.vwRegionsContactTradeContactRegionIDs.ContactID
WHERE     (dbo.Contact.IsActive = 1) AND (dbo.ContactTradeCode.IsActive = 1) AND (dbo.TradeCode.IsActive = 1)
ORDER BY FullName
GO

IF OBJECT_ID(N'vwContractorInvoiceProcessingListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwContractorInvoiceProcessingListing]
GO
CREATE VIEW dbo.vwContractorInvoiceProcessingListing 
AS 
SELECT        dbo.PurchaseOrderLine.PurchaseOrderLineID, SuppContact.FirstName, dbo.WorkOrder.WorkOrderNumber, dbo.PurchaseOrder.PurchaseOrderNumber, dbo.PurchaseOrderLine.LineNumber,  
                         dbo.PurchaseOrderLine.PurchaseOrderLineDescription, CASE WHEN dbo.PurchaseOrderLine.IsCancelled = 0 THEN ISNULL(dbo.PurchaseOrderLine.OrderedQuantity, 0)  
                         - ISNULL(dbo.PurchaseOrderInvoiceMatch.Quantity, 0) ELSE dbo.PurchaseOrderReceiptReturn.ReceivedReturnedQuantity END AS QuantityOutstanding, dbo.PurchaseOrderLine.UnitPrice AS ApprovedUnitCost,  
                         ISNULL(dbo.ContractorInvoice.ContractorInvoiceNumber, '') AS ContractorInvoiceNumber, ISNULL(dbo.ContractorInvoiceLine.Quantity, 0) AS QuantityToInvoice,  
                         CASE WHEN dbo.ContractorInvoiceLine.UnitPrice IS NULL THEN dbo.PurchaseOrderLine.UnitPrice ELSE dbo.ContractorInvoiceLine.UnitPrice END AS UnitCost, ISNULL(dbo.ContractorInvoice.ApprovalStatus,  
                         'Pending') AS InvoiceStatus, dbo.PurchaseOrderLine.TaxID, dbo.vwPurchaseOrderGoodsReceiptListing.RegionPurchaseOrderLineID, dbo.PurchaseOrder.PurchaseOrderID, dbo.WorkOrder.WorkOrderID,  
                         ISNULL(dbo.ContractorInvoice.ContractorInvoiceID, 0) AS ContractorInvoiceID, dbo.Tax.TaxName, ISNULL(dbo.PurchaseOrderInvoiceMatch.IsProcessed, 0) AS IsProcessed,  
                         SuppContact.FirstName + ' ' + ISNULL(SuppContact.LastName, '') AS ContractorFullName, dbo.Tax.TaxPercentage, dbo.PurchaseOrderReceiptReturn.PurchaseOrderReceiptReturnID,  
                         CASE WHEN dbo.PurchaseOrderLine.IsCancelled = 0 THEN ISNULL(dbo.PurchaseOrderLine.OrderedQuantity, 0) - ISNULL(dbo.PurchaseOrderInvoiceMatch.Quantity, 0)  
                         ELSE dbo.PurchaseOrderReceiptReturn.ReceivedReturnedQuantity END * dbo.PurchaseOrderLine.UnitPrice AS Total, dbo.PurchaseOrder.RaisedDateTime, dbo.WorkOrder.ContractorContactID AS ContractorID,  
                         CASE WHEN dbo.ContractorInvoice.ApprovalStatus = 'Approved' THEN 1 ELSE 0 END AS isApproved, CASE WHEN dbo.ContractorInvoice.ApprovalStatus = 'Submitted' OR 
                         dbo.ContractorInvoice.ApprovalStatus = 'Approved' THEN 1 ELSE 0 END AS isSubmitted, dbo.ContractorInvoiceLine.ContractorInvoiceLineID 
FROM            dbo.PurchaseOrder INNER JOIN 
                         dbo.WorkOrder ON dbo.WorkOrder.ContractorPurchaseOrderID = dbo.PurchaseOrder.PurchaseOrderID INNER JOIN 
                         dbo.Contact AS SuppContact ON dbo.PurchaseOrder.SupplierContactID = SuppContact.ContactID INNER JOIN 
                         dbo.PurchaseOrderLine ON dbo.PurchaseOrderLine.PurchaseOrderID = dbo.PurchaseOrder.PurchaseOrderID INNER JOIN 
                         dbo.RecordApproval ON dbo.RecordApproval.EntityID = dbo.PurchaseOrder.PurchaseOrderID AND dbo.RecordApproval.ApprovalStatusName = 'Approved' INNER JOIN 
                         dbo.vwPurchaseOrderGoodsReceiptListing ON dbo.PurchaseOrderLine.PurchaseOrderLineID = dbo.vwPurchaseOrderGoodsReceiptListing.PurchaseOrderLineID INNER JOIN 
                         dbo.WorkOrderSpare ON dbo.WorkOrder.WorkOrderID = dbo.WorkOrderSpare.WorkOrderID AND dbo.PurchaseOrderLine.WorkOrderSpareID = dbo.WorkOrderSpare.WorkOrderSpareID LEFT OUTER JOIN 
                         dbo.ContractorInvoice ON dbo.WorkOrder.WorkOrderID = dbo.ContractorInvoice.WorkOrderID LEFT OUTER JOIN 
                         dbo.ContractorInvoiceLine ON dbo.ContractorInvoice.ContractorInvoiceID = dbo.ContractorInvoiceLine.ContractorInvoiceID AND  
                         dbo.PurchaseOrderLine.PurchaseOrderLineID = dbo.ContractorInvoiceLine.PurchaseOrderLineID LEFT OUTER JOIN 
                         dbo.PurchaseOrderReceiptReturn ON dbo.PurchaseOrderReceiptReturn.PurchaseOrderLineID = dbo.PurchaseOrderLine.PurchaseOrderLineID AND  
                         dbo.PurchaseOrderReceiptReturn.IsProcessed = 0 LEFT OUTER JOIN 
                         dbo.UOM ON dbo.PurchaseOrderLine.UOMID = dbo.UOM.UOMID LEFT OUTER JOIN 
                         dbo.PurchaseOrderInvoiceMatch ON dbo.PurchaseOrderInvoiceMatch.PurchaseOrderLineID = dbo.PurchaseOrderLine.PurchaseOrderLineID LEFT OUTER JOIN 
                         dbo.Tax ON dbo.Tax.TaxID = dbo.PurchaseOrderLine.TaxID 
WHERE        (ISNULL(dbo.vwPurchaseOrderGoodsReceiptListing.TotalOutstanding, dbo.PurchaseOrderLine.OrderedQuantity) > 0) AND (ISNULL(dbo.PurchaseOrderLine.OrderedQuantity, 0)  
                         - ISNULL(dbo.PurchaseOrderInvoiceMatch.Quantity, 0) > 0) 
GROUP BY dbo.PurchaseOrderLine.PurchaseOrderLineID, SuppContact.FirstName, dbo.WorkOrder.WorkOrderNumber, dbo.PurchaseOrder.PurchaseOrderNumber, dbo.PurchaseOrderLine.LineNumber,  
                         dbo.PurchaseOrderLine.PurchaseOrderLineDescription, dbo.PurchaseOrderLine.UnitPrice, ISNULL(dbo.ContractorInvoice.ContractorInvoiceNumber, ''), ISNULL(dbo.ContractorInvoiceLine.Quantity, 0),  
                         ISNULL(dbo.ContractorInvoice.ApprovalStatus, 'Pending'), dbo.PurchaseOrderLine.TaxID, dbo.vwPurchaseOrderGoodsReceiptListing.RegionPurchaseOrderLineID, dbo.PurchaseOrder.PurchaseOrderID,  
                         dbo.WorkOrder.WorkOrderID, ISNULL(dbo.ContractorInvoice.ContractorInvoiceID, 0), dbo.Tax.TaxName, SuppContact.FirstName + ' ' + ISNULL(SuppContact.LastName, ''), dbo.Tax.TaxPercentage,  
                         dbo.PurchaseOrderReceiptReturn.PurchaseOrderReceiptReturnID, CASE WHEN dbo.PurchaseOrderLine.IsCancelled = 0 THEN ISNULL(dbo.PurchaseOrderLine.OrderedQuantity, 0)  
                         - ISNULL(dbo.PurchaseOrderInvoiceMatch.Quantity, 0) ELSE dbo.PurchaseOrderReceiptReturn.ReceivedReturnedQuantity END * dbo.PurchaseOrderLine.UnitPrice, dbo.PurchaseOrder.RaisedDateTime,  
                         dbo.WorkOrder.ContractorContactID, dbo.ContractorInvoiceLine.ContractorInvoiceLineID, dbo.PurchaseOrderLine.IsCancelled, dbo.PurchaseOrderLine.OrderedQuantity, dbo.PurchaseOrderInvoiceMatch.Quantity,  
                         dbo.PurchaseOrderReceiptReturn.ReceivedReturnedQuantity, dbo.ContractorInvoiceLine.UnitPrice, dbo.PurchaseOrderInvoiceMatch.IsProcessed, dbo.ContractorInvoice.ApprovalStatus
GO

IF OBJECT_ID(N'vwContractorPortalListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwContractorPortalListing]
GO
CREATE VIEW [dbo].[vwContractorPortalListing]   
AS   
SELECT        dbo.PurchaseOrder.PurchaseOrderNumber + ' ($' + CAST(CAST(ISNULL(dbo.vwPurchaseOrderTotalsForLines.TaxAmount, 0) + ISNULL(dbo.vwPurchaseOrderTotalsForLines.TotalExcludingTax, 0) AS NUMERIC(18,    
                         2)) AS NVARCHAR(MAX)) + ')' AS PurchaseOrderNumber, ROUND(ISNULL(dbo.vwPurchaseOrderTotalsForLines.TaxAmount, 0) + ISNULL(dbo.vwPurchaseOrderTotalsForLines.TotalExcludingTax, 0), 2)    
                         AS POTotalIncTax, w.WorkOrderNumber, w.WorkOrderDescription, w.DueStartDateTime, CAST(dbo.Priority.PriorityNumber AS VARCHAR) + ' - ' + ISNULL(dbo.Priority.PriorityDescription, '') AS Priority,    
                         dbo.Asset.AssetNumber, dbo.Asset.AssetDescription, dbo.Asset.AddressLine1, dbo.Asset.AddressLine2, dbo.Asset.City, dbo.Asset.State, dbo.Asset.PostCode, dbo.ContractorInvoice.ContractorInvoiceNumber,    
                         dbo.vwAssets7Levels.EquipParent1, dbo.vwAssets7Levels.EquipParent2, dbo.vwAssets7Levels.EquipParent3, w.WorkOrderID, dbo.PurchaseOrder.PurchaseOrderID, dbo.Asset.AssetID,    
                         dbo.ContractorInvoice.ContractorInvoiceID, w.ContractorContactID, w.IsCompletedByContractor, dbo.WorkOrderStatus.WorkOrderStatusDescription, dbo.PurchaseOrder.IsCancelled, lines.ActivePOlineCount,    
                         dbo.ContractorInvoice.ApprovedByContactID, dbo.ContractorInvoice.ApprovalStatus AS ContractorApprovalStatus, dbo.ContractorInvoice.ContractorInvoiceDateTime, dbo.CurrencyType.CurrencyTypeCode,    
                         dbo.CurrencyType.DecimalPlaces, ISNULL(DT.DocumentCount, 0) AS DocumentCount, vwRequestListing.RequestNumber   
FROM            dbo.CurrencyType RIGHT OUTER JOIN   
                         dbo.Contact ON dbo.CurrencyType.CurrencyTypeID = dbo.Contact.CurrencyTypeID RIGHT OUTER JOIN   
                         dbo.WorkOrder AS w LEFT OUTER JOIN   
                         dbo.PurchaseOrder ON dbo.PurchaseOrder.PurchaseOrderID = w.ContractorPurchaseOrderID INNER JOIN   
                         dbo.vwLastApprovalRecordPurchaseOrder AS rapo ON dbo.PurchaseOrder.PurchaseOrderID = rapo.EntityID INNER JOIN   
                         dbo.WorkOrderStatus ON w.WorkOrderStatusID = dbo.WorkOrderStatus.WorkOrderStatusID LEFT OUTER JOIN   
                         dbo.Priority ON dbo.Priority.PriorityID = w.PriorityID INNER JOIN   
                         dbo.Asset ON dbo.Asset.AssetID = w.AssetID LEFT OUTER JOIN   
                         dbo.ContractorInvoice ON w.ContractorPurchaseOrderID = dbo.ContractorInvoice.PurchaseOrderID LEFT OUTER JOIN   
                         dbo.vwAssets7Levels ON dbo.Asset.AssetID = dbo.vwAssets7Levels.AssetID LEFT OUTER JOIN   
						 dbo.vwRequestListing ON w.WorkOrderID = dbo.vwRequestListing.WorkOrderID LEFT OUTER JOIN  
                         dbo.vwPurchaseOrderTotalsForLines ON w.ContractorPurchaseOrderID = dbo.vwPurchaseOrderTotalsForLines.PurchaseOrderID INNER JOIN   
                             (SELECT        PurchaseOrderID, COUNT(*) AS ActivePOlineCount   
                               FROM            dbo.PurchaseOrderLine   
                               WHERE        (IsCancelled = 0)   
                               GROUP BY PurchaseOrderID) AS lines ON lines.PurchaseOrderID = dbo.PurchaseOrder.PurchaseOrderID ON dbo.Contact.ContactID = w.ContractorContactID   
						LEFT OUTER JOIN  
                             (SELECT        EntityID, COUNT(*) AS DocumentCount  
                               FROM            dbo.[Document]  
                               WHERE        (EntityName = 'WorkOrder') AND IsActive = 1  
                               GROUP BY EntityID) AS DT ON w.WorkOrderID = DT.EntityID  
WHERE        (w.IsContractorWorkOrder = 1) AND (rapo.ApprovalStatusName = 'Approved') AND (dbo.WorkOrderStatus.WorkOrderStatusDescription NOT IN ('Cancelled', 'Closed'))
GO

IF OBJECT_ID(N'vwDocumentManagementListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwDocumentManagementListing]
GO
CREATE VIEW vwDocumentManagementListing
AS
SELECT DocumentID, EntityID, EntityName, FilePath, Comment, IsActive, CreatedByContactID, CreatedDateTime, ModifiedByContactID, ModifiedDateTime,
FileID, IsImage, SequenceNumber, CAST(0 AS BIT) AS IsEntityImage, dbo.GetFileLocation(FileID, FilePath) AS FileLocation, dbo.GetFileExtension(FilePath) AS FileExtension, dbo.GetServerPath(FileID, FilePath) AS ServerPath, '' AS ServerIcon, '' AS EntityDisplay FROM dbo.Document
UNION
SELECT EntityImageID, EntityID, EntityName, 'Image From 14.png' AS FilePath, '' AS Comment, CAST(1 AS BIT) AS IsActive, CreatedByContactID, CreatedDateTime, ModifiedByContactID, ModifiedDateTime,
null AS FileID, CAST(1 AS BIT) AS IsImage, 0 AS SequenceNumber, CAST(1 AS BIT) AS IsEntityImage, '' AS FileLocation, '.png' AS FileExtension, '' AS ServerPath,'' AS ServerIcon, '' AS EntityDisplay FROM dbo.EntityImage
WHERE IsTemp = 0
GO

IF OBJECT_ID(N'vwEmployeeListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwEmployeeListing]
GO
CREATE VIEW dbo.vwEmployeeListing
AS
SELECT     TOP (100) PERCENT dbo.Contact.ContactID, dbo.Contact.EmployeeNumber, ISNULL(dbo.Contact.FirstName, N'') + N' ' + ISNULL(dbo.Contact.LastName, N'') 
                      AS FullName, dbo.Department.DepartmentName, dbo.Contact.Address1, dbo.Contact.Address2, dbo.Contact.City, dbo.Contact.State, dbo.Contact.PostCode, 
                      dbo.Contact.Country, dbo.Contact.IsActive, dbo.GetContactTradeCodeList(dbo.Contact.ContactID) AS TradeCodeList
FROM         dbo.vwContactParent INNER JOIN
                      dbo.Contact ON dbo.vwContactParent.ContactID = dbo.Contact.ContactID INNER JOIN
                      dbo.ContactTradeCode INNER JOIN
                      dbo.TradeCode ON dbo.ContactTradeCode.TradeCodeID = dbo.TradeCode.TradeCodeID ON dbo.Contact.ContactID = dbo.ContactTradeCode.ContactID LEFT OUTER JOIN
                      dbo.Department ON dbo.Contact.DepartmentID = dbo.Department.DepartmentID
WHERE     (dbo.TradeCode.IsActive = 1) AND (dbo.Contact.ContactTypeName = N'Trade')
GROUP BY dbo.Contact.ContactID, dbo.Contact.EmployeeNumber, ISNULL(dbo.Contact.FirstName, N'') + N' ' + ISNULL(dbo.Contact.LastName, N''), dbo.Contact.IsActive, 
                      dbo.Department.DepartmentName, dbo.Contact.Address1, dbo.Contact.Address2, dbo.Contact.City, dbo.Contact.State, dbo.Contact.PostCode, dbo.Contact.Country, 
                      dbo.GetContactTradeCodeList(dbo.Contact.ContactID)
GO

IF OBJECT_ID(N'vwExtension_WorkOrderInspectionQuestionHelper', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwExtension_WorkOrderInspectionQuestionHelper]
GO
CREATE VIEW dbo.vwExtension_WorkOrderInspectionQuestionHelper
AS
SELECT        WorkOrderInspectionQuestionID, dbo.GetHasWorkOrderInspectionQuestionPreviousResult(WorkOrderInspectionQuestionID, AssetID, QuestionSetQuestionID, QuestionTypeName) AS PreviousAnswerText, 
                         dbo.GetHasWorkOrderInspectionQuestionPreviousQuestionID(WorkOrderInspectionQuestionID, AssetID, QuestionSetQuestionID, QuestionTypeName) AS PreviousAnswerQuestionID
FROM            dbo.WorkOrderInspectionQuestion
GO

IF OBJECT_ID(N'vwHireOrderInvoiceListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwHireOrderInvoiceListing]
GO
CREATE VIEW dbo.vwHireOrderInvoiceListing
AS
SELECT DISTINCT 
                      Invoice.InvoiceID, Invoice.InvoiceNumber, Extension_Invoice.CurrentInvoiceStatusName, Invoice.RaisedDateTime, Invoice.PaymentDueDateTime, 
                      Extension_Invoice.InvoiceTotal, Invoice.IsPrinted, InvoiceLine.HireOrderLineMiscellaneousID, InvoiceLine.HireOrderLineID, HireOrder.HireOrderID, 
                      HireOrder.HireOrderNumber
FROM         HireOrder INNER JOIN
                      HireOrderLineMiscellaneous ON HireOrder.HireOrderID = HireOrderLineMiscellaneous.HireOrderID RIGHT OUTER JOIN
                      Invoice INNER JOIN
                      Extension_Invoice ON Invoice.InvoiceID = Extension_Invoice.InvoiceID INNER JOIN
                      InvoiceLine ON Invoice.InvoiceID = InvoiceLine.InvoiceID ON 
                      HireOrderLineMiscellaneous.HireOrderLineMiscellaneousID = InvoiceLine.HireOrderLineMiscellaneousID
WHERE     (InvoiceLine.HireOrderLineMiscellaneousID > 0)
UNION
SELECT     Invoice.InvoiceID, Invoice.InvoiceNumber, Extension_Invoice.CurrentInvoiceStatusName, Invoice.RaisedDateTime, Invoice.PaymentDueDateTime, 
                      Extension_Invoice.InvoiceTotal, Invoice.IsPrinted, InvoiceLine.HireOrderLineMiscellaneousID, InvoiceLine.HireOrderLineID, HireOrder.HireOrderID, 
                      HireOrder.HireOrderNumber
FROM         HireOrder INNER JOIN
                      HireOrderLine ON HireOrder.HireOrderID = HireOrderLine.HireOrderID RIGHT OUTER JOIN
                      Invoice INNER JOIN
                      Extension_Invoice ON Invoice.InvoiceID = Extension_Invoice.InvoiceID INNER JOIN
                      InvoiceLine ON Invoice.InvoiceID = InvoiceLine.InvoiceID ON HireOrderLine.HireOrderLineID = InvoiceLine.HireOrderLineID
WHERE     (InvoiceLine.HireOrderLineID > 0)
GO

IF OBJECT_ID(N'vwInvoiceListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwInvoiceListing]
GO
CREATE VIEW dbo.vwInvoiceListing
AS
SELECT     I.InvoiceID, I.IsPrinted, I.InvoiceNumber, I.InvoiceSuffix, I.IsCreditNote, vwContactFullName_4.FullName AS CustomerFullName, 
                      vwContactFullName_4.ContactID AS CustomerContactID, vwContactFullName_1.FullName AS AttentionFullName, 
                      vwContactFullName_1.ContactID AS AttentionContactID, I.RaisedDateTime, I.PaymentDueDateTime, I.CustomerPurchaseOrderNumber, I.QuoteNumber, I.Comment, 
                      I.IsCancelled, I.CancelledDateTime, vwContactFullName_2.FullName AS CreatedByFullName, vwContactFullName_2.ContactID AS CreatedByContactID, 
                      vwContactFullName_3.FullName AS CancelledByFullName, vwContactFullName_3.ContactID AS CancelledByContactID, 
                      vwContactFullName_5.FullName AS EnteredBFullName, vwContactFullName_5.ContactID AS EnteredByContactID, I.FreightAmount, I.AdditionalDiscountPercentage, 
                      dbo.Contact.CustomerTypeID, DT.InvoiceTotal, DT.Paid, DT.Balance, DT.CurrentInvoiceStatusName, DT.LineDiscount, DT.GSTCost, DT.SubTotal, 
                      DT.AdditionalDiscountTotal, DT.InvoicePaymentCount
FROM         dbo.vwContactFullName AS vwContactFullName_3 RIGHT OUTER JOIN
                      dbo.Invoice I ON vwContactFullName_3.ContactID = I.CancelledByContactID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_2 ON I.CreatedByContactID = vwContactFullName_2.ContactID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_1 ON I.AttentionContactID = vwContactFullName_1.ContactID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_5 ON I.EnteredByContactID = vwContactFullName_5.ContactID LEFT OUTER JOIN
                      dbo.Contact INNER JOIN
                      dbo.vwContactFullName AS vwContactFullName_4 ON dbo.Contact.ContactID = vwContactFullName_4.ContactID ON 
                      I.CustomerContactID = vwContactFullName_4.ContactID OUTER apply dbo.fxInvoiceDerivedFields(I.InvoiceID) AS DT
WHERE     I.InvoiceID = DT.InvoiceID
GO

IF OBJECT_ID(N'vwIPadAssetListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadAssetListing]
GO
CREATE VIEW [dbo].[vwIPadAssetListing]
AS
SELECT     dbo.Asset.AssetID, dbo.Asset.AssetNumber, dbo.Asset.AssetDescription, Asset_1.AssetNumber AS ParentAsset, dbo.AssetType.AssetTypeName, 
                      dbo.Manufacturer.ManufacturerName, dbo.ModelNumber.ModelNumberName, dbo.AccountCode.AccountCodeName, dbo.Department.DepartmentName, 
                      dbo.Asset.SerialNumber, dbo.Asset.RegistrationNumber, dbo.Asset.BarcodeNumber, dbo.Asset.IsActive, dbo.Asset.IsAsset, 
                      dbo.vwRegionsAssetRegionIDs.RegionIDs
FROM         dbo.Department RIGHT OUTER JOIN
                      dbo.Asset AS Asset_1 RIGHT OUTER JOIN
                      dbo.Asset ON Asset_1.AssetID = dbo.Asset.ParentAssetID LEFT OUTER JOIN
                      dbo.ModelNumber ON dbo.Asset.ModelNumberID = dbo.ModelNumber.ModelNumberID ON dbo.Department.DepartmentID = dbo.Asset.DepartmentID LEFT OUTER JOIN
                      dbo.Manufacturer ON dbo.Asset.ManufacturerID = dbo.Manufacturer.ManufacturerID LEFT OUTER JOIN
                      dbo.AccountCode ON dbo.Asset.AccountCodeID = dbo.AccountCode.AccountCodeID LEFT OUTER JOIN
                      dbo.AssetType ON dbo.Asset.AssetTypeID = dbo.AssetType.AssetTypeID LEFT OUTER JOIN
                      dbo.vwRegionsAssetRegionIDs ON dbo.Asset.AssetID = dbo.vwRegionsAssetRegionIDs.AssetID
WHERE     (dbo.Asset.IsAsset = 1) AND (NOT (dbo.Asset.AssetNumber LIKE N'MEX Inspections'))
GO

IF OBJECT_ID(N'vwIPadAssetReadingListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadAssetReadingListing]
GO
CREATE VIEW [dbo].[vwIPadAssetReadingListing]
AS
SELECT     dbo.AssetReading.AssetReadingID, dbo.Asset.AssetNumber, dbo.FrequencyType.FrequencyTypeName, dbo.FrequencyType.ConditionCodeName, 
                      dbo.AssetReading.AutomaticAverageOverXReadings, dbo.AssetReading.ManualAverageUsage, dbo.AssetReading.AutomaticAverageUsage, 
                      dbo.Asset.AssetDescription, Asset_1.AssetNumber AS ParentAssetNumber, '(' + CONVERT(nvarchar(MAX), dbo.AssetReading.AssetID) 
                      + ')' AS AssetIDForIncludeChildren, dbo.AssetReading.AssetID, dbo.AssetReading.FrequencyTypeID, dbo.AssetReading.IsActive, 
                      dbo.FrequencyType.IsActive AS FrequencyTypeIsActive, dbo.Asset.IsActive AS AssetIsActive, dbo.vwAssetReadingLastDate.LastReadingDateTime, 
                      dbo.AssetReadingLine.Reading AS LastReading, CONVERT(datetime, NULL) AS NewReadingDate, CONVERT(numeric(18, 7), NULL) AS NewReading, 
                      CASE ConditionCodeName WHEN 'Condition Monitoring' THEN 'N/A' ELSE CONVERT(varchar, CONVERT(int, AutomaticAverageOverXReadings)) END AS AverageUsing, 
                      CASE ConditionCodeName WHEN 'Condition Monitoring' THEN 'N/A' ELSE CONVERT(varchar, CONVERT(numeric(18, 2), ManualAverageUsage)) 
                      END AS ManualAverage, dbo.AssetReading.AutomaticAverageUsage AS AutomaticAverage, ISNULL(CONVERT(varchar(10), 
                      dbo.vwAssetReadingLastDate.LastReadingDateTime, 103), '') AS LastReadingDateDisplay, ISNULL(CONVERT(varchar(8), 
                      dbo.vwAssetReadingLastDate.LastReadingDateTime, 8), '') AS LastReadingTimeDisplay,
                      dbo.GetAssetRegionIDs(dbo.AssetReading.AssetID) AS RegionIDs
FROM         dbo.Asset AS Asset_1 RIGHT OUTER JOIN
                      dbo.vwAssetReadingLastDate LEFT OUTER JOIN
                      dbo.AssetReadingLine ON dbo.vwAssetReadingLastDate.AssetReadingLineID = dbo.AssetReadingLine.AssetReadingLineID RIGHT OUTER JOIN
                      dbo.AssetReading INNER JOIN
                      dbo.Asset ON dbo.AssetReading.AssetID = dbo.Asset.AssetID INNER JOIN
                      dbo.FrequencyType ON dbo.AssetReading.FrequencyTypeID = dbo.FrequencyType.FrequencyTypeID ON 
                      dbo.vwAssetReadingLastDate.AssetReadingID = dbo.AssetReading.AssetReadingID ON Asset_1.AssetID = dbo.Asset.ParentAssetID
GO

IF OBJECT_ID(N'vwIPadAssetRegisterTree', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadAssetRegisterTree]
GO
CREATE VIEW dbo.vwIPadAssetRegisterTree 
AS 
SELECT        AssetID, ParentAssetID, AssetNumber, ISNULL(AssetNumber, '') + N' - ' + ISNULL(AssetDescription, '') AS AssetDisplay, IsActive, IsAsset, dbo.GetAssetRegionIDs(AssetID) AS RegionIDs 
FROM            dbo.Asset 
WHERE        (IsAsset = 1) AND (NOT (AssetNumber LIKE N'MEX Inspections'))
GO

IF OBJECT_ID(N'vwIPadAssetTree', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadAssetTree]
GO
CREATE VIEW dbo.vwIPadAssetTree
AS
SELECT        AssetID, ParentAssetID, AssetNumber, ISNULL(AssetNumber, '') + N' - ' + ISNULL(AssetDescription, '') AS AssetDisplay, dbo.GetAssetLevel(AssetID) AS AssetLevel, IsActive, IsAsset, 
                         dbo.GetAssetRegionIDs(AssetID) AS RegionIDs
FROM            dbo.Asset
WHERE        (IsAsset = 1) AND (NOT (AssetNumber LIKE N'MEX Inspections'))
GO

IF OBJECT_ID(N'vwIPadDropDownAccountCodes', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadDropDownAccountCodes]
GO
CREATE VIEW [dbo].[vwIPadDropDownAccountCodes]
AS
SELECT     dbo.AccountCode.AccountCodeID, dbo.AccountCode.AccountCodeName, dbo.AccountCode.AccountCodeDescription, dbo.vwRegionsAccountCodeRegionIDs.RegionIDs, 
                      dbo.AccountCode.IsActive
FROM         dbo.AccountCode INNER JOIN
                      dbo.vwRegionsAccountCodeRegionIDs ON dbo.AccountCode.AccountCodeID = dbo.vwRegionsAccountCodeRegionIDs.AccountCodeID
GO

IF OBJECT_ID(N'vwIPadDropDownDepartments', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadDropDownDepartments]
GO
CREATE VIEW [dbo].[vwIPadDropDownDepartments]
AS
SELECT     dbo.Department.DepartmentID, dbo.Department.DepartmentName, dbo.Department.DepartmentDescription, dbo.vwRegionsDepartmentRegionIDs.RegionIDs, 
                      dbo.Department.IsActive
FROM         dbo.Department LEFT OUTER JOIN
                      dbo.vwRegionsDepartmentRegionIDs ON dbo.Department.DepartmentID = dbo.vwRegionsDepartmentRegionIDs.DepartmentID
GO

IF OBJECT_ID(N'vwIPadDropDownPreventativeMaintenances', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadDropDownPreventativeMaintenances]
GO
CREATE VIEW [dbo].[vwIPadDropDownPreventativeMaintenances]
AS
SELECT     dbo.PreventativeMaintenance.PreventativeMaintenanceID, dbo.PreventativeMaintenance.PreventativeMaintenanceNumber, 
                      dbo.PreventativeMaintenance.PreventativeMaintenanceDescription, dbo.PreventativeMaintenance.IsStandard, dbo.PreventativeMaintenance.IsInspection, 
                      dbo.vwRegionsPreventativeMaintenanceRegionIDs.RegionIDs
FROM         dbo.PreventativeMaintenance LEFT OUTER JOIN
                      dbo.vwRegionsPreventativeMaintenanceRegionIDs ON 
                      dbo.PreventativeMaintenance.PreventativeMaintenanceID = dbo.vwRegionsPreventativeMaintenanceRegionIDs.PreventativeMaintenanceID
GO

IF OBJECT_ID(N'vwIPadDropDownWorkOrders', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadDropDownWorkOrders]
GO
CREATE VIEW [dbo].[vwIPadDropDownWorkOrders]
AS
SELECT     dbo.WorkOrder.WorkOrderID, dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderDescription, dbo.WorkOrder.IsGroupWorkOrder, 
                      dbo.vwRegionsAssetRegionIDs.RegionIDs, dbo.WorkOrderStatus.WorkOrderStatusFunctionName
FROM         dbo.WorkOrder INNER JOIN
                      dbo.WorkOrderStatus ON dbo.WorkOrder.WorkOrderStatusID = dbo.WorkOrderStatus.WorkOrderStatusID LEFT OUTER JOIN
                      dbo.vwRegionsAssetRegionIDs ON dbo.WorkOrder.AssetID = dbo.vwRegionsAssetRegionIDs.AssetID
GO

IF OBJECT_ID(N'vwIPadKPIListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadKPIListing]
GO
CREATE VIEW dbo.vwIPadKPIListing
AS
SELECT     KPIID, KPIName, KPIGroup, KPIType, dbo.GetKPIFavouriteMexUserIDs(KPIID) AS KPIFavouriteMexUserIDs, CAST(0 AS bit) AS IsFavourite
FROM         dbo.KPI
GO

IF OBJECT_ID(N'vwIPadMEXMobileCatalogue', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadMEXMobileCatalogue]
GO
CREATE VIEW dbo.vwIPadMEXMobileCatalogue
AS
SELECT     dbo.Asset.AssetID, dbo.Catalogue.CatalogueNumber, dbo.Catalogue.CatalogueDescription, dbo.BinLocation.BinLocationName, dbo.Store.StoreName, 
                      dbo.Asset.StoreID, dbo.vwRegionsStoreRegionIDs.RegionIDs, dbo.UOM.UOMName, Asset_1.AssetNumber AS SiteName, dbo.CatalogueGroup.CatalogueGroupName, 
                      dbo.CatalogueClass.CatalogueClassName, dbo.Asset.BarcodeNumber
FROM         dbo.Asset INNER JOIN
                      dbo.Catalogue ON dbo.Asset.CatalogueID = dbo.Catalogue.CatalogueID LEFT OUTER JOIN
                      dbo.CatalogueClass ON dbo.Catalogue.CatalogueClassID = dbo.CatalogueClass.CatalogueClassID LEFT OUTER JOIN
                      dbo.CatalogueGroup ON dbo.Catalogue.CatalogueGroupID = dbo.CatalogueGroup.CatalogueGroupID LEFT OUTER JOIN
                      dbo.Asset AS Asset_1 ON dbo.Asset.ParentAssetID = Asset_1.AssetID LEFT OUTER JOIN
                      dbo.UOM ON dbo.Catalogue.UOMID = dbo.UOM.UOMID LEFT OUTER JOIN
                      dbo.vwRegionsStoreRegionIDs ON dbo.Asset.StoreID = dbo.vwRegionsStoreRegionIDs.StoreID LEFT OUTER JOIN
                      dbo.BinLocation ON dbo.Asset.BinLocationID = dbo.BinLocation.BinLocationID LEFT OUTER JOIN
                      dbo.Store ON dbo.Asset.StoreID = dbo.Store.StoreID
WHERE     (dbo.Catalogue.IsCatalogued = 1) AND (dbo.Asset.IsActive = 1)
GO

IF OBJECT_ID(N'vwIPadPurchaseOrderListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadPurchaseOrderListing]
GO
CREATE VIEW [dbo].[vwIPadPurchaseOrderListing]
AS
SELECT     dbo.PurchaseOrder.PurchaseOrderID, dbo.PurchaseOrder.PurchaseOrderNumber, dbo.PurchaseOrder.PurchaseOrderTypeName, 
                      dbo.PurchaseOrder.PurchaseOrderStatusName, dbo.PurchaseOrder.InvoiceMatchStatusName, Contact_1.FirstName AS SupplierName, 
                      dbo.Purchaser.PurchaserName AS CompanyName, dbo.RecordApproval.ApprovalStatusName, dbo.PurchaseOrder.CompletedDateTime, 
                      dbo.PurchaseOrder.DueDateTime, dbo.PurchaseOrder.RaisedDateTime, dbo.RecordApproval.ApprovedDateTime, 
                      vwContactFullName_2.FullName AS RaisedByFullName, dbo.PurchaseOrder.StandingPurchaseOrderExpiryDateTime, 
                      dbo.PurchaseOrder.StandingPurchaseOrderBudget, ISNULL(dbo.vwPurchaseOrderTotalsForLines.TaxAmount, 0) 
                      + ISNULL(dbo.vwPurchaseOrderTotalsForLines.TotalExcludingTax, 0) AS TotalLineCost, vwContactFullName_1.FullName AS ApprovedByFullName, 
                      Contact_3.FirstName AS FreightName, PurchaseOrderUserDefined1_1.PurchaseOrderUserDefined1Name, dbo.PurchaseOrder.IsCancelled, 
                      dbo.vwContactFullName.FullName AS CancelledByFullName, PurchaseOrder_1.PurchaseOrderNumber AS PurchaseOrderNumberForAdjustmentNote, 
                      dbo.PurchaseOrder.FreightContactID, dbo.PurchaseOrder.RaisedByContactID, dbo.PurchaseOrder.CancelledByContactID, dbo.PurchaseOrder.SpecialInstruction, 
                      dbo.PurchaseOrder.QuoteNumber, dbo.GetPurchaseOrderRegionIDs(dbo.PurchaseOrder.PurchaseOrderID) AS PurchaseOrderRegionIDs, 
                      ISNULL(dbo.vwIPadPurchaseOrderReceiptTotal.ReceivedReturnedQuantity, 0) AS ReceivedReturnedQuantity, dbo.PurchaseOrder.SupplierContactID, 
                      dbo.PurchaseOrder.IsInvoiceReceived, dbo.PurchaseOrder.IsInvoicePaid, dbo.PurchaseOrder.IsPrinted, dbo.PurchaseOrder.IsFaxed, dbo.PurchaseOrder.IsEmailed, 
                      dbo.PurchaseOrder.PurchaseOrderUserDefinedTextBox1, dbo.PurchaseOrder.PurchaseOrderUserDefinedDateTime1, 
                      dbo.PurchaseOrder.PurchaseOrderUserDefinedDateTime2, dbo.PurchaseOrder.CancelledDateTime, dbo.PurchaseOrder.PurchaserID, 
                      Contact_1.Email AS SupplierEmail, dbo.Contact.Email AS SupplierAttentionEmail, 
                      CAST(CASE WHEN ISNULL(dbo.vwIPadPurchaseOrderReceiptTotal.ReceivedReturnedQuantity, 0) > 0 THEN 1 ELSE 0 END AS bit) AS HasBeenReceipted, 
                      dbo.GetBase64(EntityImage.EntityImage) AS SupplierContactImageString
FROM         dbo.PurchaseOrder LEFT OUTER JOIN
                      (SELECT     EntityID, EntityImage
						FROM         EntityImage WHERE dbo.EntityImage.EntityName = N'Contact' OR
                      dbo.EntityImage.EntityName IS NULL) AS EntityImage ON dbo.PurchaseOrder.SupplierContactID = EntityImage.EntityID LEFT OUTER JOIN
                      dbo.Contact ON dbo.PurchaseOrder.SupplierAttentionContactID = dbo.Contact.ContactID LEFT OUTER JOIN
                      dbo.vwIPadPurchaseOrderReceiptTotal ON dbo.PurchaseOrder.PurchaseOrderID = dbo.vwIPadPurchaseOrderReceiptTotal.PurchaseOrderID LEFT OUTER JOIN
                      dbo.Purchaser ON dbo.PurchaseOrder.PurchaserID = dbo.Purchaser.PurchaserID LEFT OUTER JOIN
                      dbo.vwPurchaseOrderTotalsForLines ON dbo.PurchaseOrder.PurchaseOrderID = dbo.vwPurchaseOrderTotalsForLines.PurchaseOrderID LEFT OUTER JOIN
                      dbo.PurchaseOrder AS PurchaseOrder_1 ON dbo.PurchaseOrder.PurchaseOrderIDForAdjustmentNote = PurchaseOrder_1.PurchaseOrderID LEFT OUTER JOIN
                      dbo.vwContactFullName ON dbo.PurchaseOrder.CancelledByContactID = dbo.vwContactFullName.ContactID LEFT OUTER JOIN
                      dbo.PurchaseOrderUserDefined1 AS PurchaseOrderUserDefined1_1 ON 
                      dbo.PurchaseOrder.PurchaseOrderUserDefined1ID = PurchaseOrderUserDefined1_1.PurchaseOrderUserDefined1ID LEFT OUTER JOIN
                      dbo.Contact AS Contact_3 ON dbo.PurchaseOrder.FreightContactID = Contact_3.ContactID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_2 ON dbo.PurchaseOrder.RaisedByContactID = vwContactFullName_2.ContactID LEFT OUTER JOIN
                      dbo.RecordApproval LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_1 ON dbo.RecordApproval.ApprovedByContactID = vwContactFullName_1.ContactID RIGHT OUTER JOIN
                      dbo.vwLastApprovalRecordPurchaseOrder ON dbo.RecordApproval.RecordApprovalID = dbo.vwLastApprovalRecordPurchaseOrder.LastApprovalID ON 
                      dbo.PurchaseOrder.PurchaseOrderID = dbo.vwLastApprovalRecordPurchaseOrder.EntityID LEFT OUTER JOIN
                      dbo.Region ON dbo.PurchaseOrder.RegionID = dbo.Region.RegionID LEFT OUTER JOIN
                      dbo.Contact AS Contact_1 ON dbo.PurchaseOrder.SupplierContactID = Contact_1.ContactID
GO

IF OBJECT_ID(N'vwIPadRequestListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadRequestListing]
GO
CREATE VIEW [dbo].[vwIPadRequestListing]
AS
SELECT     dbo.Request.RequestID, dbo.RecordApproval.ApprovalStatusName, dbo.RecordApproval.ApprovedDateTime, 
                      vwContactFullName_2.FullName AS ApprovedByFullName, vwContactFullName_1.FullName AS RequestedByFullName, 
                      dbo.WorkOrderStatus.WorkOrderStatusDescription, dbo.WorkOrder.DueStartDateTime, dbo.WorkOrder.FinishedDateTime, dbo.WorkOrder.WorkOrderNumber, 
                      dbo.WorkOrder.WorkOrderSuffix, dbo.AccountCode.AccountCodeName, dbo.Priority.PriorityDescription, dbo.Priority.PriorityNumber, dbo.Contact.WorkPhone, 
                      dbo.Contact.Address1, dbo.Contact.Address2, dbo.Contact.City, dbo.Contact.State, dbo.Contact.PostCode, dbo.Contact.Country, dbo.Contact.HomePhone, 
                      dbo.Contact.MobilePhone, dbo.Contact.Fax, dbo.Contact.Email, dbo.Contact.WebAddress, dbo.vwContactFullName.FullName AS CreatedByFullName, 
                      dbo.Asset.AssetNumber, dbo.Department.DepartmentName, dbo.JobType.JobTypeName, dbo.JobType.JobTypeDescription, dbo.Request.RequestNumber, 
                      dbo.Request.IsCancelled, dbo.Request.RequestDescription, dbo.Request.Response, dbo.Request.RespondedDateTime, dbo.Request.RequestedDateTime, 
                      dbo.Request.EstimatedCost, dbo.Request.IsCompleted, dbo.Request.ReasonCancelled, dbo.Request.DepartmentID, 
                      dbo.WorkOrderStatus.WorkOrderStatusFunctionName, dbo.WorkOrderStatus.WorkOrderStatusID, dbo.Request.WorkOrderID, 
                      dbo.WorkOrderStatus.WorkOrderStatusNumber, dbo.Request.AssetID, '(' + CONVERT(nvarchar(MAX), dbo.Request.AssetID) + ')' AS AssetIDForIncludeChildren, 
                      dbo.Request.RequestedByContactID, ISNULL(CASE WHEN WorkOrderSuffix IS NOT NULL THEN CAST(dbo.WorkOrder.WorkOrderNumber AS varchar) 
                      + dbo.WorkOrder.WorkOrderSuffix ELSE CAST(dbo.WorkOrder.WorkOrderNumber AS nvarchar) END, '') AS DisplayWorkOrderNumber, 
                      CASE WHEN Priority.PriorityNumber IS NULL THEN '' ELSE CAST(Priority.PriorityNumber AS varchar) + ' - ' + Priority.PriorityDescription END AS DisplayPriority, dbo.GetRequestRegionIDs(dbo.Request.RequestID) AS RequestRegionIDs
FROM         dbo.RecordApproval LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_2 ON dbo.RecordApproval.ApprovedByContactID = vwContactFullName_2.ContactID RIGHT OUTER JOIN
                      dbo.JobType RIGHT OUTER JOIN
                      dbo.Request ON dbo.JobType.JobTypeID = dbo.Request.JobTypeID LEFT OUTER JOIN
                      dbo.Department ON dbo.Request.DepartmentID = dbo.Department.DepartmentID LEFT OUTER JOIN
                      dbo.Asset ON dbo.Request.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN
                      dbo.vwContactFullName ON dbo.Request.CreatedByContactID = dbo.vwContactFullName.ContactID LEFT OUTER JOIN
                      dbo.Priority ON dbo.Request.PriorityID = dbo.Priority.PriorityID LEFT OUTER JOIN
                      dbo.WorkOrderStatus RIGHT OUTER JOIN
                      dbo.WorkOrder LEFT OUTER JOIN
                      dbo.AccountCode ON dbo.WorkOrder.AccountCodeID = dbo.AccountCode.AccountCodeID ON 
                      dbo.WorkOrderStatus.WorkOrderStatusID = dbo.WorkOrder.WorkOrderStatusID ON dbo.Request.WorkOrderID = dbo.WorkOrder.WorkOrderID LEFT OUTER JOIN
                      dbo.Contact LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_1 ON dbo.Contact.ContactID = vwContactFullName_1.ContactID ON 
                      dbo.Request.RequestedByContactID = dbo.Contact.ContactID LEFT OUTER JOIN
                      dbo.vwLastApprovalRecordRequest ON dbo.Request.RequestID = dbo.vwLastApprovalRecordRequest.EntityID ON 
                      dbo.RecordApproval.RecordApprovalID = dbo.vwLastApprovalRecordRequest.LastApprovalID
GO

IF OBJECT_ID(N'vwIPadWorkOrderListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwIPadWorkOrderListing]
GO
CREATE VIEW dbo.vwIPadWorkOrderListing
AS
    SELECT  Asset_1.AssetNumber ,
            dbo.WorkOrder.AssetID ,
            dbo.WorkOrder.PreventativeMaintenanceID ,
            dbo.WorkOrderStatus.WorkOrderStatusDescription ,
            dbo.Priority.PriorityDescription ,
            dbo.JobType.JobTypeName ,
            dbo.AccountCode.AccountCodeName ,
            dbo.Department.DepartmentName ,
            dbo.PreventativeMaintenance.PreventativeMaintenanceNumber ,
            WorkOrder_1.WorkOrderNumber AS GroupWorkOrderNumber ,
            WorkOrder_1.WorkOrderSuffix AS GroupWorkOrderSuffix ,
            dbo.ComponentCode.ComponentCodeName ,
            dbo.WorkOrder.WorkOrderID ,
            dbo.WorkOrderStatus.WorkOrderStatusFunctionName ,
            dbo.WorkOrderStatus.WorkOrderStatusNumber ,
            dbo.vwWorkOrderTradeHours.SumOfTradeHours ,
            dbo.WorkOrder.OverallDurationHours ,
            Asset_1.AssetDescription ,
            WorkOrder.WorkOrderDescription AS WorkOrderDescription ,
            CASE WHEN ( DATALENGTH(dbo.PreventativeMaintenance.PreventativeMaintenanceDescription)
                        / 2 ) > 50
                 THEN SUBSTRING(dbo.PreventativeMaintenance.PreventativeMaintenanceDescription,
                                0, 50) + ' ...'
                 ELSE dbo.PreventativeMaintenance.PreventativeMaintenanceDescription
            END AS PreventativeMaintenanceDescription ,
            CASE WHEN ( DATALENGTH(dbo.WorkOrder.WorkOrderHistoryDescription)
                        / 2 ) > 50
                 THEN SUBSTRING(dbo.WorkOrder.WorkOrderHistoryDescription, 0,
                                50) + ' ...'
                 ELSE dbo.WorkOrder.WorkOrderHistoryDescription
            END AS WorkOrderHistoryDescription ,
            dbo.Risk.RiskName ,
            SourceRisk.Score ,
            CASE WHEN ( DATALENGTH(dbo.WorkOrderRisk.HazardDescription) / 2 ) > 50
                 THEN SUBSTRING(dbo.WorkOrderRisk.HazardDescription, 0, 50)
                      + ' ...'
                 ELSE dbo.WorkOrderRisk.HazardDescription
            END AS HazardDescription ,
            ISNULL(DT.DocumentCount, 0) AS DocumentCount ,
            dbo.Asset.AssetNumber AS ParentAssetNumber ,
            dbo.WorkOrder.WorkOrderNumber ,
            dbo.WorkOrder.DueStartDateTime ,
            dbo.WorkOrder.DueFinishDateTime ,
            dbo.WorkOrder.StartedDateTime ,
            dbo.WorkOrder.ReferenceNumber ,
            '(' + CONVERT(NVARCHAR(MAX), dbo.WorkOrder.AssetID) + ')' AS AssetIDForIncludeChildren ,
            dbo.WorkOrder.IsPrinted ,
            dbo.WorkOrder.RaisedDateTime ,
            dbo.RiskRating.ExtremeLower ,
            dbo.RiskRating.HighLower ,
            dbo.RiskRating.MediumLower ,
            dbo.WorkOrder.GroupWorkOrderID ,
            dbo.WorkOrder.AccountCodeID ,
            dbo.WorkOrder.PriorityID ,
            dbo.WorkOrder.FinishedDateTime ,
            dbo.WorkOrder.ComponentCodeID ,
            dbo.WorkOrder.JobTypeID ,
            dbo.WorkOrder.DepartmentID ,
            dbo.WorkOrder.ContractorContactID ,
            dbo.WorkOrder.CreatedByContactID ,
            dbo.GetWorkOrderTradeCodeIDs(dbo.WorkOrder.WorkOrderID) AS TradeCodeIDs ,
            dbo.GetWorkOrderTradeContactIDs(dbo.WorkOrder.WorkOrderID) AS TradeContactIDs ,
            dbo.GetAssetRegionIDs(dbo.WorkOrder.AssetID) AS AssetRegionIDs ,
            dbo.GetInspectionRegionIDs(dbo.WorkOrder.PreventativeMaintenanceID) AS InspectionRegionIDs ,
            CASE WHEN Score IS NULL THEN ''
                 WHEN ExtremeLower IS NOT NULL
                      AND score >= ExtremeLower THEN 'Extreme'
                 WHEN HighLower IS NOT NULL
                      AND score >= HighLower THEN 'High'
                 WHEN MediumLower IS NOT NULL
                      AND score >= MediumLower THEN 'Medium'
                 WHEN Score IS NOT NULL THEN 'Low'
                 ELSE ''
            END AS RiskRating ,  
					  --for MEX Work Orders app 
            dbo.GetWorkOrderTradeContactNames(WorkOrder.WorkOrderID) AS TradeNames ,
            dbo.vwWorkOrderOutstandingInfo.info AS OutstandingInfo
    FROM    dbo.WorkOrderStatus
            RIGHT OUTER JOIN dbo.WorkOrder
            LEFT OUTER JOIN dbo.vwWorkOrderTradeHours ON dbo.WorkOrder.WorkOrderID = dbo.vwWorkOrderTradeHours.WorkOrderID
            LEFT OUTER JOIN dbo.ComponentCode ON dbo.WorkOrder.ComponentCodeID = dbo.ComponentCode.ComponentCodeID
            LEFT OUTER JOIN dbo.WorkOrder AS WorkOrder_1 ON dbo.WorkOrder.GroupWorkOrderID = WorkOrder_1.WorkOrderID
            LEFT OUTER JOIN dbo.PreventativeMaintenance ON dbo.WorkOrder.PreventativeMaintenanceID = dbo.PreventativeMaintenance.PreventativeMaintenanceID
            LEFT OUTER JOIN dbo.Department ON dbo.WorkOrder.DepartmentID = dbo.Department.DepartmentID
            LEFT OUTER JOIN dbo.AccountCode ON dbo.WorkOrder.AccountCodeID = dbo.AccountCode.AccountCodeID
            LEFT OUTER JOIN dbo.JobType ON dbo.WorkOrder.JobTypeID = dbo.JobType.JobTypeID
            LEFT OUTER JOIN dbo.Priority ON dbo.WorkOrder.PriorityID = dbo.Priority.PriorityID ON dbo.WorkOrderStatus.WorkOrderStatusID = dbo.WorkOrder.WorkOrderStatusID
			LEFT OUTER JOIN Asset AS Asset_1 ON WorkOrder.AssetID = Asset_1.AssetID
            LEFT OUTER JOIN dbo.Asset  ON dbo.Asset.AssetID = Asset_1.ParentAssetID 
            LEFT OUTER JOIN dbo.Risk
            INNER JOIN dbo.WorkOrderRisk
            INNER JOIN ( SELECT MaxScore.WorkOrderID ,
                                MaxScore.Score ,
                                MAX(WorkOrderRisk_1.WorkOrderRiskID) AS WorkOrderRiskID
                         FROM   ( SELECT    WorkOrderRisk_2.WorkOrderID ,
                                            MAX(dbo.RiskScore.Score) AS Score
                                  FROM      dbo.WorkOrderRisk AS WorkOrderRisk_2
                                            LEFT OUTER JOIN dbo.RiskScore ON WorkOrderRisk_2.RiskScoreID = dbo.RiskScore.RiskScoreID
                                  GROUP BY  WorkOrderRisk_2.WorkOrderID
                                ) AS MaxScore
                                INNER JOIN dbo.WorkOrderRisk AS WorkOrderRisk_1 ON MaxScore.WorkOrderID = WorkOrderRisk_1.WorkOrderID
                                INNER JOIN dbo.RiskScore AS RiskScore_1 ON WorkOrderRisk_1.RiskScoreID = RiskScore_1.RiskScoreID
                                                              AND MaxScore.Score = RiskScore_1.Score
                         GROUP BY MaxScore.WorkOrderID ,
                                MaxScore.Score
                       ) AS SourceRisk ON dbo.WorkOrderRisk.WorkOrderRiskID = SourceRisk.WorkOrderRiskID ON dbo.Risk.RiskID = dbo.WorkOrderRisk.RiskTypeID ON dbo.WorkOrder.WorkOrderID = SourceRisk.WorkOrderID
            LEFT OUTER JOIN ( SELECT    EntityID ,
                                        COUNT(*) AS DocumentCount
                              FROM      dbo.[Document]
                              WHERE     ( EntityName = 'WorkOrder' )
                              GROUP BY  EntityID
                            ) AS DT ON dbo.WorkOrder.WorkOrderID = DT.EntityID
            CROSS JOIN dbo.RiskRating 
			LEFT OUTER JOIN dbo.vwWorkOrderOutstandingInfo ON dbo.vwWorkOrderOutstandingInfo.WorkOrderID = WorkOrder.WorkOrderID
GO

IF OBJECT_ID(N'vwKeyRegisterListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwKeyRegisterListing]
GO
CREATE VIEW dbo.vwKeyRegisterListing
AS
SELECT     KeyRegisterID, KeyRegisterNumber, KeyRegisterDescription, NumberOfDuplicates, IsMasterKey, MasterKeyNumber, Area, CabinetHook, KeyStamp, KeyCombination, 
                      LockBrand, LockModel, IsActive, CreatedByContactID, CreatedDateTime, ModifiedByContactID, ModifiedDateTime, dbo.GetKeyRegisterRegionIDs(KeyRegisterID) 
                      AS RegionIDs
FROM         dbo.KeyRegister
GO

IF OBJECT_ID(N'vwPMAssetSelector', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwPMAssetSelector]
GO
CREATE VIEW dbo.vwPMAssetSelector
AS
SELECT     dbo.Asset.AssetID, dbo.Asset.ParentAssetID, dbo.Asset.AssetNumber, dbo.Asset.AssetDescription, dbo.Asset.AssetTypeID, dbo.Asset.ManufacturerID, 
                      dbo.Asset.ModelNumberID, dbo.Asset.DepartmentID, dbo.Contact.FirstName AS ContractorName, dbo.Asset.ContractorContactID, dbo.Asset.IsActive, CAST(NULL AS int) 
                      AS CurrentPMID, CAST(NULL AS numeric(18, 7)) AS LastDoneReading, CAST(NULL AS numeric(18, 7)) AS LastWorkOrderReading, CAST(N'' AS nvarchar(MAX)) 
                      AS LastWorkOrderNumber, dbo.GetAssetRegionIDs(dbo.Asset.AssetID) AS RegionIDs
FROM         dbo.Asset LEFT OUTER JOIN
                      dbo.Contact ON dbo.Asset.ContractorContactID = dbo.Contact.ContactID
WHERE     (dbo.Asset.IsAsset = 1)
GO

IF OBJECT_ID(N'vwPurchaseOrderCatalogueSelection', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwPurchaseOrderCatalogueSelection]
GO
CREATE VIEW dbo.vwPurchaseOrderCatalogueSelection
AS
SELECT     dbo.CatalogueSupplier.SupplierContactID, dbo.CatalogueSupplier.CatalogueSupplierID, dbo.Catalogue.CatalogueID, dbo.Asset.AssetID, 
                      dbo.BinLocation.BinLocationName, dbo.Store.StoreID, dbo.Store.StoreName, dbo.CatalogueSupplier.SupplierStockNumber, dbo.Catalogue.CatalogueNumber, 
                      dbo.Catalogue.CatalogueDescription, dbo.StockClass.StockClassName, dbo.Asset.UnitPrice, dbo.Asset.TaxID, dbo.Tax.TaxPercentage, dbo.Tax.TaxName, 
                      dbo.CurrencyType.CurrencyTypeCode, dbo.UOM.UOMName AS CatalogueSupplierUOMName, UOM_1.UOMName, dbo.CatalogueSupplier.ExpectedPurchasePrice, 
                      ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) AS StockOnHand, ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) AS StockOnReserve, 
                      ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) - ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) AS AvailableStock, 
                      dbo.Asset.MinimumQuantity, dbo.Asset.MaximumQuantity, dbo.CatalogueGroup.CatalogueGroupName, dbo.CatalogueClass.CatalogueClassName, dbo.INC.INCName, 
                      dbo.GetStoreRegionIDs(dbo.Asset.StoreID) AS RegionIDs
FROM         dbo.INC RIGHT OUTER JOIN
                      dbo.StockClass RIGHT OUTER JOIN
                      dbo.Catalogue ON dbo.StockClass.StockClassID = dbo.Catalogue.StockClassID ON dbo.INC.INCID = dbo.Catalogue.INCID LEFT OUTER JOIN
                      dbo.CatalogueClass ON dbo.Catalogue.CatalogueClassID = dbo.CatalogueClass.CatalogueClassID LEFT OUTER JOIN
                      dbo.CatalogueGroup ON dbo.Catalogue.CatalogueGroupID = dbo.CatalogueGroup.CatalogueGroupID LEFT OUTER JOIN
                      dbo.UOM AS UOM_1 ON dbo.Catalogue.UOMID = UOM_1.UOMID LEFT OUTER JOIN
                      dbo.Tax RIGHT OUTER JOIN
                      dbo.vwCatalogueQuantityReserved RIGHT OUTER JOIN
                      dbo.Asset ON dbo.vwCatalogueQuantityReserved.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN
                      dbo.vwCatalogueStockOnHand ON dbo.Asset.AssetID = dbo.vwCatalogueStockOnHand.AssetID ON dbo.Tax.TaxID = dbo.Asset.TaxID LEFT OUTER JOIN
                      dbo.BinLocation ON dbo.Asset.BinLocationID = dbo.BinLocation.BinLocationID LEFT OUTER JOIN
                      dbo.Store ON dbo.Asset.StoreID = dbo.Store.StoreID ON dbo.Catalogue.CatalogueID = dbo.Asset.CatalogueID RIGHT OUTER JOIN
                      dbo.UOM RIGHT OUTER JOIN
                      dbo.CatalogueSupplier ON dbo.UOM.UOMID = dbo.CatalogueSupplier.UOMID LEFT OUTER JOIN
                      dbo.Contact LEFT OUTER JOIN
                      dbo.CurrencyType ON dbo.Contact.CurrencyTypeID = dbo.CurrencyType.CurrencyTypeID ON dbo.CatalogueSupplier.SupplierContactID = dbo.Contact.ContactID ON 
                      dbo.Catalogue.CatalogueID = dbo.CatalogueSupplier.CatalogueID
WHERE     (NOT (dbo.Asset.AssetID IS NULL)) AND (dbo.Catalogue.IsCatalogued = 1) AND (dbo.CatalogueSupplier.IsActive = 1)
GO

IF OBJECT_ID(N'vwPurchaseOrderCatalogueSelectionAll', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwPurchaseOrderCatalogueSelectionAll]
GO
CREATE VIEW dbo.vwPurchaseOrderCatalogueSelectionAll
AS
SELECT     dbo.Catalogue.CatalogueID, dbo.Asset.AssetID, dbo.BinLocation.BinLocationName, dbo.Store.StoreID, dbo.Store.StoreName, dbo.Catalogue.CatalogueNumber, 
                      dbo.Catalogue.CatalogueDescription, dbo.StockClass.StockClassName, dbo.UOM.UOMName, dbo.Asset.UnitPrice, dbo.Asset.MaximumQuantity, 
                      dbo.Asset.MinimumQuantity, dbo.CatalogueGroup.CatalogueGroupName, dbo.CatalogueClass.CatalogueClassName, dbo.INC.INCName, dbo.Asset.TaxID, 
                      dbo.Tax.TaxPercentage, ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) AS StockOnHand, ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved,
                       0) AS StockOnReserve, ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) - ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) 
                      AS AvailableStock, dbo.GetStoreRegionIDs(dbo.Asset.StoreID) AS RegionIDs
FROM         dbo.Tax RIGHT OUTER JOIN
                      dbo.vwCatalogueStockOnHand RIGHT OUTER JOIN
                      dbo.Asset ON dbo.vwCatalogueStockOnHand.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN
                      dbo.vwCatalogueQuantityReserved ON dbo.Asset.AssetID = dbo.vwCatalogueQuantityReserved.AssetID ON dbo.Tax.TaxID = dbo.Asset.TaxID LEFT OUTER JOIN
                      dbo.BinLocation ON dbo.Asset.BinLocationID = dbo.BinLocation.BinLocationID LEFT OUTER JOIN
                      dbo.Store ON dbo.Asset.StoreID = dbo.Store.StoreID RIGHT OUTER JOIN
                      dbo.INC RIGHT OUTER JOIN
                      dbo.Catalogue ON dbo.INC.INCID = dbo.Catalogue.INCID LEFT OUTER JOIN
                      dbo.CatalogueGroup ON dbo.Catalogue.CatalogueGroupID = dbo.CatalogueGroup.CatalogueGroupID LEFT OUTER JOIN
                      dbo.CatalogueClass ON dbo.Catalogue.CatalogueClassID = dbo.CatalogueClass.CatalogueClassID LEFT OUTER JOIN
                      dbo.UOM ON dbo.Catalogue.UOMID = dbo.UOM.UOMID LEFT OUTER JOIN
                      dbo.StockClass ON dbo.Catalogue.StockClassID = dbo.StockClass.StockClassID ON dbo.Asset.CatalogueID = dbo.Catalogue.CatalogueID
WHERE     (dbo.Asset.AssetID IS NOT NULL) AND (dbo.Catalogue.IsCatalogued = 1) AND (dbo.Asset.IsActive = 1)
GO

IF OBJECT_ID(N'vwPurchaseOrderGoodsReceiptListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwPurchaseOrderGoodsReceiptListing]
GO
CREATE VIEW dbo.vwPurchaseOrderGoodsReceiptListing
AS
SELECT        dbo.RegionPurchaseOrderLine.RegionPurchaseOrderLineID, dbo.PurchaseOrder.PurchaseOrderNumber, dbo.PurchaseOrderLine.LineNumber, dbo.Catalogue.CatalogueNumber, 
                         dbo.CatalogueSupplier.SupplierStockNumber, dbo.Region.RegionName, ISNULL(dbo.vwRegionPurchaseOrderReceivalTotal.DifferenceNoUOMConversion, 0) AS TotalOutstanding, 
                         dbo.PurchaseOrderLine.PurchaseOrderLineDescription, dbo.Contact.FirstName + N' ' + dbo.Contact.LastName AS SupplierFullName, dbo.RegionPurchaseOrderLine.PurchaseQuantity, 
                         dbo.AccountCode.AccountCodeName, dbo.UOM.UOMName, ISNULL(dbo.CatalogueSupplier.UOMConversionFactor, 0) AS UOMConversionfactor, dbo.Store.StoreName, dbo.BinLocation.BinLocationName, 
                         dbo.CurrencyType.CurrencyTypeCode, dbo.CurrencyType.DecimalPlaces AS CurrencyTypeDecimalPlaces, dbo.CurrencyType.ExchangeRatePercentage, dbo.PurchaseOrder.RaisedDateTime, 
                         dbo.PurchaseOrderLine.IsCancelled, dbo.PurchaseOrder.PurchaseOrderStatusName, dbo.PurchaseOrder.PurchaseOrderID, dbo.PurchaseOrderLine.AssetID, dbo.PurchaseOrder.IsCancelled AS POIsCancelled, 
                         '(' + CONVERT(NVARCHAR(MAX), dbo.PurchaseOrder.PurchaseOrderID) + ')' AS PurchaseOrderIDForFilter, dbo.RegionPurchaseOrderLine.RegionID, dbo.PurchaseOrder.RegionID AS PurchaseOrderRegionID, 
                         dbo.PurchaseOrderLine.UnitPrice AS OriginalUnitPrice, dbo.PurchaseOrderLine.DiscountPercentage AS OriginalDiscountPercentage, dbo.PurchaseOrderLine.TaxID AS OriginalTaxID, 
                         dbo.Tax.TaxName AS OriginalTaxName, dbo.PurchaseOrderLine.TaxPercentage AS OriginalTaxPercentage, ISNULL(CONVERT(NVARCHAR(MAX), dbo.WorkOrder.WorkOrderNumber), N'') 
                         + ISNULL(dbo.WorkOrder.WorkOrderSuffix, N'') AS DisplayWorkOrderNumber, dbo.PurchaseOrderLine.PurchaseOrderLineID, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.PurchaseOrderReceiptReturnID, 
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedByContactID, dbo.vwContactFullName.FullName AS ReceivedReturnedByContactFullName, 
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedDateTime, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity AS ReceiptLineQtyToReceive, 
                         ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost, dbo.PurchaseOrderLine.UnitPrice) * (1 - ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.DiscountPercentage, 
                         dbo.PurchaseOrderLine.DiscountPercentage)) AS ReceiptLineUnitCost, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.TaxID AS ReceiptLineTaxID, Tax_1.TaxName AS ReceiptLineTaxName, 
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.TaxPercentage AS ReceiptLineTaxPercentage, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.DeliveryDocketNumber AS ReceiptLineDeliveryDocketNumber, 
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.DiscountPercentage AS ReceiptLineDiscountPercentage, 
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ExchangeRatePercentage AS ReceiptLineExchangeRatePercentage, 
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UserDefinedDateTime AS ReceiptLineUserDefinedDateTime, dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderID, 
                         dbo.CatalogueSupplier.SupplierContactID, dbo.PurchaseOrder.RaisedByContactID, dbo.Store.StoreID, dbo.BinLocation.BinLocationID, dbo.AccountCode.AccountCodeID, CAST(0 AS BIT) AS HasChanged, 
                         ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity, 0) * dbo.CatalogueSupplier.UOMConversionFactor AS GoodsReceiptActualQuantityReceived, 
                         ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity, 0) AS QtyToReceive, ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.DeliveryDocketNumber, N'') 
                         AS DeliveryDocketNumber, ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost, dbo.PurchaseOrderLine.UnitPrice) AS UnitCost, 
                         ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.DiscountPercentage, dbo.PurchaseOrderLine.DiscountPercentage) AS ReceiptDiscountPercentage, 
                         ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.TaxID, dbo.PurchaseOrderLine.TaxID) AS ReceiptTaxID, ISNULL(Tax_1.TaxName, dbo.Tax.TaxName) AS ReceiptTaxName, 
                         CASE WHEN PurchaseOrderReceiptReturnID IS NULL THEN ((ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity, 0) 
                         * ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost, dbo.PurchaseOrderLine.UnitPrice)) * (1 - PurchaseOrderLine.DiscountPercentage) * PurchaseOrderLine.TaxPercentage) 
                         ELSE ((vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity * vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost) * (1 - vwPurchaseOrderReceiptReturnGoodsReceipt.DiscountPercentage)
                          * vwPurchaseOrderReceiptReturnGoodsReceipt.TaxPercentage) END AS ReceiptTaxAmount, ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.TaxPercentage, dbo.PurchaseOrderLine.TaxPercentage) 
                         AS ReceiptTaxPercentage, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UserDefinedDateTime, CASE WHEN vwPurchaseOrderReceiptReturnGoodsReceipt.PurchaseOrderReceiptReturnID IS NOT NULL 
                         THEN CASE WHEN vwPurchaseOrderReceiptReturnGoodsReceipt.ExchangeRatePercentage IS NOT NULL 
                         THEN vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost / vwPurchaseOrderReceiptReturnGoodsReceipt.ExchangeRatePercentage ELSE vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost END ELSE CASE
                          WHEN CurrencyType.ExchangeRatePercentage IS NOT NULL 
                         THEN PurchaseOrderLine.UnitPrice / CurrencyType.ExchangeRatePercentage ELSE PurchaseOrderLine.UnitPrice END END AS ReceiptUnitCostExcDiscount, 
                         dbo.PurchaseOrderLine.AssetID AS PurchaseOrderLineAssetID, dbo.CatalogueSupplier.SupplierBarcode, (ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity, 0) 
                         * ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost, 0)) * (1 - ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.DiscountPercentage, dbo.PurchaseOrderLine.DiscountPercentage)) 
                         + ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.FreightAmount, dbo.PurchaseOrderLine.FreightAmount) AS TotalExTax, (ISNULL(CASE WHEN PurchaseOrderReceiptReturnID IS NULL 
                         THEN ((ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity, 0) * ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost, dbo.PurchaseOrderLine.UnitPrice)) 
                         * PurchaseOrderLine.TaxPercentage) ELSE ((vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity * vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost) 
                         * vwPurchaseOrderReceiptReturnGoodsReceipt.TaxPercentage) END + ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity, 0) 
                         * dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost, 0) * (1 - ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.DiscountPercentage, dbo.PurchaseOrderLine.DiscountPercentage)) 
                         + ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.FreightAmount, dbo.PurchaseOrderLine.FreightAmount)) + ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.FreightAmount, 
                         dbo.PurchaseOrderLine.FreightAmount) * ISNULL(dbo.PurchaseOrder.FreightTaxPercentage, 0) AS TotalIncTax, ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.FreightAmount, 
                         dbo.PurchaseOrderLine.FreightAmount) AS FreightAmount, dbo.PurchaseOrder.FreightTaxID, ISNULL(dbo.PurchaseOrder.FreightTaxPercentage, 0) AS FreightTaxPercentage, 
                         freightTax.TaxName AS FreightTaxName, ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.FreightAmount, dbo.PurchaseOrderLine.FreightAmount) * ISNULL(dbo.PurchaseOrder.FreightTaxPercentage, 0) 
                         AS FreightTaxAmount, dbo.GetPurchaseOrderRegionIDs(dbo.PurchaseOrder.PurchaseOrderID) AS PurchaseOrderRegionList
FROM            dbo.WorkOrder INNER JOIN
                         dbo.WorkOrderSpare ON dbo.WorkOrder.WorkOrderID = dbo.WorkOrderSpare.WorkOrderID RIGHT OUTER JOIN
                         dbo.RegionPurchaseOrderLine INNER JOIN
                         dbo.PurchaseOrderLine INNER JOIN
                         dbo.PurchaseOrder ON dbo.PurchaseOrderLine.PurchaseOrderID = dbo.PurchaseOrder.PurchaseOrderID ON 
                         dbo.RegionPurchaseOrderLine.PurchaseOrderLineID = dbo.PurchaseOrderLine.PurchaseOrderLineID INNER JOIN
                         dbo.Region ON dbo.RegionPurchaseOrderLine.RegionID = dbo.Region.RegionID LEFT OUTER JOIN
                         dbo.Tax ON dbo.PurchaseOrderLine.TaxID = dbo.Tax.TaxID LEFT OUTER JOIN
                         dbo.vwRegionPurchaseOrderReceivalTotal ON dbo.RegionPurchaseOrderLine.RegionPurchaseOrderLineID = dbo.vwRegionPurchaseOrderReceivalTotal.RegionPurchaseOrderLineID ON 
                         dbo.WorkOrderSpare.WorkOrderSpareID = dbo.PurchaseOrderLine.WorkOrderSpareID LEFT OUTER JOIN
                         dbo.vwContactFullName RIGHT OUTER JOIN
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt ON dbo.vwContactFullName.ContactID = dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedByContactID LEFT OUTER JOIN
                         dbo.Tax AS Tax_1 ON dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.TaxID = Tax_1.TaxID ON 
                         dbo.RegionPurchaseOrderLine.PurchaseOrderLineID = dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.PurchaseOrderLineID AND 
                         dbo.RegionPurchaseOrderLine.RegionID = dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.RegionID LEFT OUTER JOIN
                         dbo.CatalogueSupplier ON dbo.PurchaseOrderLine.CatalogueSupplierID = dbo.CatalogueSupplier.CatalogueSupplierID LEFT OUTER JOIN
                         dbo.Catalogue RIGHT OUTER JOIN
                         dbo.Asset ON dbo.Catalogue.CatalogueID = dbo.Asset.CatalogueID ON dbo.PurchaseOrderLine.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN
                         dbo.Contact ON dbo.PurchaseOrder.SupplierContactID = dbo.Contact.ContactID LEFT OUTER JOIN
                         dbo.CurrencyType ON dbo.PurchaseOrder.CurrencyTypeID = dbo.CurrencyType.CurrencyTypeID LEFT OUTER JOIN
                         dbo.Store ON dbo.Asset.StoreID = dbo.Store.StoreID LEFT OUTER JOIN
                         dbo.AccountCode ON dbo.PurchaseOrderLine.AccountCodeID = dbo.AccountCode.AccountCodeID LEFT OUTER JOIN
                         dbo.UOM ON dbo.PurchaseOrderLine.UOMID = dbo.UOM.UOMID LEFT OUTER JOIN
                         dbo.BinLocation ON dbo.Asset.BinLocationID = dbo.BinLocation.BinLocationID LEFT OUTER JOIN
                         dbo.Tax AS freightTax ON freightTax.TaxID = dbo.PurchaseOrder.FreightTaxID
GROUP BY dbo.RegionPurchaseOrderLine.RegionPurchaseOrderLineID, dbo.PurchaseOrder.PurchaseOrderNumber, dbo.PurchaseOrderLine.LineNumber, dbo.Catalogue.CatalogueNumber, 
                         dbo.CatalogueSupplier.SupplierStockNumber, dbo.Region.RegionName, dbo.PurchaseOrderLine.PurchaseOrderLineDescription, dbo.Contact.FirstName + N' ' + dbo.Contact.LastName, 
                         dbo.RegionPurchaseOrderLine.PurchaseQuantity, dbo.AccountCode.AccountCodeName, dbo.UOM.UOMName, dbo.CatalogueSupplier.UOMConversionFactor, dbo.Store.StoreName, 
                         dbo.BinLocation.BinLocationName, dbo.CurrencyType.CurrencyTypeCode, dbo.CurrencyType.ExchangeRatePercentage, dbo.PurchaseOrder.RaisedDateTime, dbo.PurchaseOrder.PurchaseOrderStatusName, 
                         dbo.PurchaseOrder.PurchaseOrderID, dbo.PurchaseOrderLine.AssetID, ISNULL(dbo.vwRegionPurchaseOrderReceivalTotal.DifferenceNoUOMConversion, 0), '(' + CONVERT(NVARCHAR(MAX), 
                         dbo.PurchaseOrder.PurchaseOrderID) + ')', dbo.RegionPurchaseOrderLine.RegionID, dbo.PurchaseOrder.RegionID, dbo.PurchaseOrderLine.UnitPrice, dbo.PurchaseOrderLine.DiscountPercentage, 
                         dbo.PurchaseOrderLine.TaxID, dbo.PurchaseOrderLine.TaxPercentage, ISNULL(CONVERT(NVARCHAR(MAX), dbo.WorkOrder.WorkOrderNumber), N'') + ISNULL(dbo.WorkOrder.WorkOrderSuffix, N''), 
                         dbo.PurchaseOrderLine.PurchaseOrderLineID, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.PurchaseOrderReceiptReturnID, 
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedByContactID, dbo.vwContactFullName.FullName, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedDateTime, 
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.TaxID, 
                         Tax_1.TaxName, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.TaxPercentage, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.DeliveryDocketNumber, dbo.PurchaseOrder.FreightTaxID, 
                         dbo.PurchaseOrder.FreightTaxPercentage, freightTax.TaxName, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.DiscountPercentage, dbo.PurchaseOrderLine.IsCancelled, dbo.PurchaseOrder.IsCancelled, 
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ExchangeRatePercentage, dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UserDefinedDateTime, 
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.FreightAmount, dbo.PurchaseOrderLine.FreightAmount, dbo.Tax.TaxName, dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderID, 
                         dbo.CatalogueSupplier.SupplierContactID, dbo.PurchaseOrder.RaisedByContactID, dbo.Store.StoreID, dbo.BinLocation.BinLocationID, dbo.CurrencyType.DecimalPlaces, 
                         ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity, 0), ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.ReceivedReturnedQuantity, 0) 
                         * dbo.CatalogueSupplier.UOMConversionFactor, ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.DeliveryDocketNumber, N''), ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.UnitCost, 
                         dbo.PurchaseOrderLine.UnitPrice), ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.DiscountPercentage, dbo.PurchaseOrderLine.DiscountPercentage), 
                         ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.TaxID, dbo.PurchaseOrderLine.TaxID), ISNULL(Tax_1.TaxName, dbo.Tax.TaxName), 
                         ISNULL(dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.TaxPercentage, dbo.PurchaseOrderLine.TaxPercentage), dbo.CatalogueSupplier.SupplierBarcode, dbo.WorkOrder.IsContractorWorkOrder, 
                         dbo.vwPurchaseOrderReceiptReturnGoodsReceipt.PurchaseOrderLineID, dbo.AccountCode.AccountCodeID
HAVING        (NOT (dbo.PurchaseOrderLine.AssetID IS NULL)) AND (dbo.RegionPurchaseOrderLine.PurchaseQuantity > 0) AND (dbo.PurchaseOrder.IsCancelled = 0) AND (dbo.PurchaseOrderLine.IsCancelled = 0)
GO

IF OBJECT_ID(N'vwPurchaseOrderInvoiceMatchListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwPurchaseOrderInvoiceMatchListing]
GO
CREATE VIEW dbo.vwPurchaseOrderInvoiceMatchListing
AS
    SELECT  dbo.PurchaseOrderReceiptReturn.PurchaseOrderReceiptReturnID ,
            dbo.Region.RegionName ,
            dbo.PurchaseOrderLine.LineNumber ,
            dbo.PurchaseOrder.PurchaseOrderNumber ,
            dbo.Catalogue.CatalogueNumber ,
            dbo.CatalogueSupplier.SupplierStockNumber ,
            dbo.PurchaseOrderLine.PurchaseOrderLineDescription ,
            dbo.Contact.FirstName + N' ' + dbo.Contact.LastName AS SupplierName ,
            dbo.AccountCode.AccountCodeName ,
            dbo.WorkOrderSpare.WorkOrderID ,
            dbo.UOM.UOMName ,
            dbo.CatalogueSupplier.UOMConversionFactor ,
            dbo.Store.StoreName ,
            dbo.BinLocation.BinLocationName ,
            dbo.CurrencyType.CurrencyTypeCode ,
            dbo.CurrencyType.DecimalPlaces AS CurrencyTypeDecimalPlaces ,
            Contact_1.FirstName + N' ' + Contact_1.LastName AS ReceivedReturnedByName ,
            dbo.CurrencyType.ExchangeRatePercentage ,
            ISNULL(dbo.vwPOReceiptInvoiceMatchTotal.ProcessedQuantity, 0) AS TotalInvoiceMatched ,
            ISNULL(dbo.vwPOReceiptInvoiceMatchTotal.Difference, 0) AS TotalOutstanding ,
            dbo.WorkOrder.WorkOrderNumber ,
            dbo.PurchaseOrder.RaisedDateTime ,
            dbo.PurchaseOrderReceiptReturn.ReceivedReturnedQuantity ,
            dbo.PurchaseOrder.PurchaseOrderID ,
            '(' + CONVERT(NVARCHAR(MAX), dbo.PurchaseOrder.PurchaseOrderID)
            + ')' AS PurchaseOrderIDForFilter ,
            dbo.PurchaseOrderReceiptReturn.RegionID ,
            dbo.PurchaseOrder.RegionID AS PurchaseOrderRegionID ,
            dbo.PurchaseOrderReceiptReturn.UnitCost AS OriginalUnitCost ,
            dbo.PurchaseOrderReceiptReturn.DiscountPercentage AS OriginalDiscountPercentage ,
            dbo.PurchaseOrderReceiptReturn.TaxID AS OriginalTaxID ,
            dbo.Tax.TaxName AS OriginalTaxName ,
            dbo.PurchaseOrderReceiptReturn.TaxPercentage AS OriginalTaxPercentage ,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.PurchaseOrderInvoiceMatchID AS InvMatchLinePurchaseOrderInvoiceMatchID ,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.Quantity AS InvMatchLineQuantity ,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.InvoiceNumber AS InvMatchLineInvoiceNumber ,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.InvoiceMatchedByContactID AS InvMatchLineInvoiceMatchedByContactID ,
            dbo.vwContactFullName.FullName AS InvMatchLineInvoiceMatchedByContactFullName ,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.UnitCost AS InvMatchLineUnitCost ,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.InvoiceMatchDateTime AS InvMatchLineInvoiceMatchedDateTime ,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.UserDefinedDateTime AS InvMatchLineUserDefinedDateTime ,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.DiscountPercentage AS InvMatchLineDiscountPercentage ,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.TaxID AS InvMatchLineTaxID ,
            Tax_1.TaxName AS InvMatchLineTaxName ,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.TaxPercentage AS InvMatchLineTaxPercentage ,
            dbo.CatalogueSupplier.SupplierContactID ,
            dbo.PurchaseOrder.RaisedByContactID ,
            dbo.AccountCode.AccountCodeID ,
            dbo.Store.StoreID ,
            dbo.BinLocation.BinLocationID ,
            dbo.PurchaseOrderReceiptReturn.ReceivedReturnedDateTime ,
            dbo.PurchaseOrderReceiptReturn.ReceivedReturnedByContactID ,
            CAST(0 AS BIT) AS HasChanged ,
            ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.Quantity, 0)
            * ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.UnitCost,
                     dbo.PurchaseOrderReceiptReturn.UnitCost) * (1-ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.DiscountPercentage, PurchaseOrderReceiptReturn.DiscountPercentage) ) + CASE WHEN vwPurchaseOrderInvoiceMatchInvoiceMatch.Quantity > 0 THEN COALESCE(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.FreightAmount,
                       PurchaseOrderReceiptReturn.FreightAmount,
                       PurchaseOrderLine.FreightAmount) ELSE 0 END AS TotalExcludingTax ,
            ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.Quantity, 0) AS QuantityToInvoiceMatch ,
            ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.InvoiceNumber,
                   N'') AS InvoiceNumber ,
            ISNULL(dbo.vwContactFullName.FullName, N'') AS InvoiceMatchedByContactFullName ,
            ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.UnitCost,
                   dbo.PurchaseOrderReceiptReturn.UnitCost) AS InvoiceUnitCost ,
				     ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.UnitCost,
                   dbo.PurchaseOrderReceiptReturn.UnitCost) * (1-ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.DiscountPercentage, PurchaseOrderReceiptReturn.DiscountPercentage) ) AS InvoiceMatchUnitCostIncDiscount,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.InvoiceMatchDateTime AS InvoicedDate ,
            dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.UserDefinedDateTime AS UserDefinedDate ,
            ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.DiscountPercentage,
                   dbo.PurchaseOrderReceiptReturn.DiscountPercentage) AS InvoiceMatchDiscountPercentage ,
            ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.TaxID,
                   dbo.PurchaseOrderReceiptReturn.TaxID) AS InvoiceMatchTaxID ,
            ISNULL(Tax_1.TaxName, dbo.Tax.TaxName) AS InvoiceMatchTaxName ,
            ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.TaxPercentage,
                   dbo.PurchaseOrderReceiptReturn.TaxPercentage) AS InvoiceMatchTaxPercentage ,
            CASE WHEN vwPurchaseOrderInvoiceMatchInvoiceMatch.PurchaseOrderInvoiceMatchID IS NOT NULL
                 THEN ( vwPurchaseOrderInvoiceMatchInvoiceMatch.Quantity
                        * vwPurchaseOrderInvoiceMatchInvoiceMatch.UnitCost )
                      * ( 1
                          - vwPurchaseOrderInvoiceMatchInvoiceMatch.DiscountPercentage )
                      * vwPurchaseOrderInvoiceMatchInvoiceMatch.TaxPercentage
                 ELSE 0
            END AS InvoiceMatchTaxAmount ,
            dbo.PurchaseOrderReceiptReturn.UnitCost AS PurchaseOrderReceiptReturnUnitCost ,
            ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.Quantity
                   * dbo.CatalogueSupplier.UOMConversionFactor, 0) AS ActualQuantityInvoiced ,
            CAST(1 AS BIT) AS IsFirstRequest ,
            dbo.CatalogueSupplier.SupplierBarcode ,
            ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.Quantity, 0)
            * ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.UnitCost,
                     dbo.PurchaseOrderReceiptReturn.UnitCost) * (1-ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.DiscountPercentage, PurchaseOrderReceiptReturn.DiscountPercentage) )
            + ( CASE WHEN vwPurchaseOrderInvoiceMatchInvoiceMatch.PurchaseOrderInvoiceMatchID IS NOT NULL
                     THEN ( vwPurchaseOrderInvoiceMatchInvoiceMatch.Quantity
                            * vwPurchaseOrderInvoiceMatchInvoiceMatch.UnitCost )
                          * vwPurchaseOrderInvoiceMatchInvoiceMatch.TaxPercentage
                     ELSE 0
                END )
            + CASE WHEN vwPurchaseOrderInvoiceMatchInvoiceMatch.Quantity > 0 THEN COALESCE(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.FreightAmount,
                       PurchaseOrderReceiptReturn.FreightAmount,
                       PurchaseOrderLine.FreightAmount) ELSE 0 END AS TotalIncludingTax ,
            dbo.PurchaseOrderLine.PurchaseOrderLineID ,
            ISNULL(dbo.PurchaseOrderReceiptReturn.DeliveryDocketNumber, '') AS DeliveryDocketNumber ,
            ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.Quantity, 0)
            * ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.UnitCost,
                     dbo.PurchaseOrderReceiptReturn.UnitCost) AS InvMatchValue ,
            ( ISNULL(dbo.PurchaseOrderReceiptReturn.ReceivedReturnedQuantity,
                     0) * dbo.PurchaseOrderLine.UnitPrice ) * ( 1
                                                              - dbo.PurchaseOrderLine.DiscountPercentage ) AS POValue ,
            CASE WHEN ( ISNULL(dbo.PurchaseOrderReceiptReturn.ReceivedReturnedQuantity,
                               0) * PurchaseOrderLine.UnitPrice ) * ( 1
                                                              - PurchaseOrderLine.DiscountPercentage ) = 0
                 THEN 0
                 ELSE ( ( ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.Quantity,
                                 0)
                          * ISNULL(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.UnitCost,
                                   dbo.PurchaseOrderReceiptReturn.UnitCost) )
                        - ( ( ISNULL(dbo.PurchaseOrderReceiptReturn.ReceivedReturnedQuantity,
                                     0) * PurchaseOrderLine.UnitPrice ) * ( 1
                                                              - PurchaseOrderLine.DiscountPercentage ) ) )
                      / ( ( ISNULL(dbo.PurchaseOrderReceiptReturn.ReceivedReturnedQuantity,
                                   0) * PurchaseOrderLine.UnitPrice ) * ( 1
                                                              - PurchaseOrderLine.DiscountPercentage ) )
            END AS InvMatchVariance ,
            COALESCE(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.FreightAmount,
                     PurchaseOrderReceiptReturn.FreightAmount,
                     PurchaseOrderLine.FreightAmount) AS FreightAmount ,
            PurchaseOrder.FreightTaxID ,
            ISNULL(PurchaseOrder.FreightTaxPercentage,0) AS FreightTaxPercentage,
            freightTax.TaxName AS FreightTaxName,
			 COALESCE(dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.FreightAmount,
                     PurchaseOrderReceiptReturn.FreightAmount,
                     PurchaseOrderLine.FreightAmount) * ISNULL(PurchaseOrder.FreightTaxPercentage,0) AS FreightTaxAmount,
					 dbo.GetPurchaseOrderRegionIDs(PurchaseOrder.PurchaseOrderID) AS PurchaseOrderRegionList, BatchNumber
    FROM    dbo.Tax
            RIGHT OUTER JOIN dbo.vwPOReceiptInvoiceMatchTotal
            INNER JOIN dbo.PurchaseOrderReceiptReturn
            INNER JOIN dbo.PurchaseOrderLine ON dbo.PurchaseOrderReceiptReturn.PurchaseOrderLineID = dbo.PurchaseOrderLine.PurchaseOrderLineID
            INNER JOIN dbo.PurchaseOrder ON dbo.PurchaseOrderLine.PurchaseOrderID = dbo.PurchaseOrder.PurchaseOrderID ON dbo.vwPOReceiptInvoiceMatchTotal.PurchaseOrderReceiptReturnID = dbo.PurchaseOrderReceiptReturn.PurchaseOrderReceiptReturnID
            INNER JOIN dbo.Region ON dbo.PurchaseOrderReceiptReturn.RegionID = dbo.Region.RegionID ON dbo.Tax.TaxID = dbo.PurchaseOrderReceiptReturn.TaxID
            LEFT OUTER JOIN dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch
            LEFT OUTER JOIN dbo.Tax AS Tax_1 ON dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.TaxID = Tax_1.TaxID
            LEFT OUTER JOIN dbo.vwContactFullName ON dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.InvoiceMatchedByContactID = dbo.vwContactFullName.ContactID ON dbo.PurchaseOrderReceiptReturn.PurchaseOrderReceiptReturnID = dbo.vwPurchaseOrderInvoiceMatchInvoiceMatch.PurchaseOrderReceiptReturnID
            LEFT OUTER JOIN dbo.vwPOReceiptReturnToSupplier ON dbo.PurchaseOrderReceiptReturn.PurchaseOrderReceiptReturnID = dbo.vwPOReceiptReturnToSupplier.RelatedPurchaseOrderReceiptReturnID
            LEFT OUTER JOIN dbo.Contact AS Contact_1 ON dbo.PurchaseOrderReceiptReturn.ReceivedReturnedByContactID = Contact_1.ContactID
            LEFT OUTER JOIN dbo.CurrencyType ON dbo.PurchaseOrder.CurrencyTypeID = dbo.CurrencyType.CurrencyTypeID
            LEFT OUTER JOIN dbo.UOM ON dbo.PurchaseOrderLine.UOMID = dbo.UOM.UOMID
            LEFT OUTER JOIN dbo.WorkOrderSpare
            LEFT OUTER JOIN dbo.WorkOrder ON dbo.WorkOrderSpare.WorkOrderID = dbo.WorkOrder.WorkOrderID ON dbo.PurchaseOrderLine.WorkOrderSpareID = dbo.WorkOrderSpare.WorkOrderSpareID
            LEFT OUTER JOIN dbo.AccountCode ON dbo.PurchaseOrderLine.AccountCodeID = dbo.AccountCode.AccountCodeID
            LEFT OUTER JOIN dbo.Contact ON dbo.PurchaseOrder.SupplierContactID = dbo.Contact.ContactID
            LEFT OUTER JOIN dbo.CatalogueSupplier ON dbo.PurchaseOrderLine.CatalogueSupplierID = dbo.CatalogueSupplier.CatalogueSupplierID
            LEFT OUTER JOIN dbo.Store
            RIGHT OUTER JOIN dbo.BinLocation
            RIGHT OUTER JOIN dbo.Asset ON dbo.BinLocation.BinLocationID = dbo.Asset.BinLocationID ON dbo.Store.StoreID = dbo.Asset.StoreID
            LEFT OUTER JOIN dbo.Catalogue ON dbo.Asset.CatalogueID = dbo.Catalogue.CatalogueID ON dbo.PurchaseOrderLine.AssetID = dbo.Asset.AssetID
            LEFT OUTER JOIN Tax freightTax ON freightTax.TaxID = PurchaseOrder.FreightTaxID
    WHERE   ( dbo.PurchaseOrderReceiptReturn.IsProcessed = 1 )
            AND ( dbo.PurchaseOrderReceiptReturn.ReceivedReturnedActionName = N'Receipt' )
            AND ( dbo.PurchaseOrder.IsCancelled = 0 )
            AND ( dbo.vwPOReceiptInvoiceMatchTotal.Difference > 0 )
GO

IF OBJECT_ID(N'vwPurchaseOrderListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwPurchaseOrderListing]
GO
CREATE VIEW dbo.vwPurchaseOrderListing 
AS 
    SELECT  CreatedByContact.Country AS CreatedByContactCountry , 
            dbo.PurchaseOrder.PurchaseOrderID , 
            '(' + CONVERT(NVARCHAR(MAX), dbo.PurchaseOrder.PurchaseOrderID) 
            + ')' AS PurchaseOrderIDForFilter , 
            dbo.PurchaseOrder.PurchaseOrderNumber , 
            dbo.PurchaseOrder.PurchaseOrderTypeName , 
            dbo.PurchaseOrder.PurchaseOrderStatusName , 
            dbo.PurchaseOrder.InvoiceMatchStatusName , 
            Contact_1.FirstName AS SupplierName , 
            dbo.Purchaser.PurchaserName AS CompanyName , 
            dbo.RecordApproval.ApprovalStatusName , 
            dbo.PurchaseOrder.CompletedDateTime , 
            dbo.PurchaseOrder.DueDateTime , 
            dbo.PurchaseOrder.RaisedDateTime , 
            dbo.RecordApproval.ApprovedDateTime , 
            vwContactFullName_2.FullName AS RaisedByFullName , 
            dbo.PurchaseOrder.StandingPurchaseOrderExpiryDateTime , 
            dbo.PurchaseOrder.StandingPurchaseOrderBudget , 
			 ISNULL(dbo.vwPurchaseOrderTotals.TotalCost, 0) AS TotalLineCost , 
            vwContactFullName_1.FullName AS ApprovedByFullName , 
            Contact_3.FirstName AS FreightName , 
            PurchaseOrderUserDefined1_1.PurchaseOrderUserDefined1Name , 
            dbo.PurchaseOrder.IsCancelled , 
            vwContactFullName_3.FullName AS CancelledByFullName , 
            PurchaseOrder_1.PurchaseOrderNumber AS PurchaseOrderNumberForAdjustmentNote , 
            dbo.PurchaseOrder.FreightContactID , 
            dbo.PurchaseOrder.RaisedByContactID , 
            dbo.PurchaseOrder.CancelledByContactID , 
            dbo.PurchaseOrder.SpecialInstruction , 
            dbo.PurchaseOrder.QuoteNumber , 
            ISNULL(dbo.vwIPadPurchaseOrderReceiptTotal.ReceivedReturnedQuantity, 
                   0) AS ReceivedReturnedQuantity , 
            dbo.PurchaseOrder.SupplierContactID , 
            dbo.PurchaseOrder.IsInvoiceReceived , 
            dbo.PurchaseOrder.IsInvoicePaid , 
            dbo.PurchaseOrder.IsPrinted , 
            dbo.PurchaseOrder.IsFaxed , 
            dbo.PurchaseOrder.IsEmailed , 
            dbo.PurchaseOrder.PurchaseOrderUserDefinedTextBox1 , 
            dbo.PurchaseOrder.PurchaseOrderUserDefinedDateTime1 , 
            dbo.PurchaseOrder.PurchaseOrderUserDefinedDateTime2 , 
            dbo.PurchaseOrder.CancelledDateTime , 
            dbo.PurchaseOrder.PurchaserID , 
            Contact_1.Email AS SupplierEmail , 
            dbo.Contact.Email AS SupplierAttentionEmail , 
            dbo.PurchaseOrder.FreightTaxPercentage , 
            dbo.PurchaseOrder.FreightAmount , 
            dbo.PurchaseOrder.SalesTaxNumber , 
            dbo.vwContactFullName.FullName AS SupplierAttentionFullName , 
            Contact_1.WorkPhone , 
            Contact_1.Fax , 
            Contact_1.ABN , 
            dbo.Purchaser.PhoneNumber AS RegionPhoneNumber , 
            dbo.Purchaser.ABN AS RegionABN , 
            CAST(CASE WHEN ISNULL(dbo.vwIPadPurchaseOrderReceiptTotal.ReceivedReturnedQuantity, 
                                  0) > 0 THEN 1 
                      ELSE 0 
                 END AS BIT) AS HasBeenReceipted , 
            CAST(CASE WHEN PurchaseOrder.PurchaseOrderTypeName = 'Standing Order' 
                      THEN CASE WHEN PurchaseOrder.StandingPurchaseOrderBudget = 0 
                                THEN 1 
                                ELSE 0 
                           END 
                      ELSE 0 
                 END AS BIT) AS UnlimitedBudget , 
            CAST(0 AS BIT) AS IsRelatedToThisWO , 
            ISNULL(dbo.EntityImage.EntityImageThumbnail, 
                   dbo.EntityImage.EntityImage) AS SupplierContactImage , 
            CAST(N'' AS NVARCHAR) AS SupplierContactImageString , 
            dbo.CurrencyType.CurrencyTypeCode , 
            dbo.CurrencyType.DecimalPlaces , 
            dbo.GetPurchaseOrderRegionIDs(dbo.PurchaseOrder.PurchaseOrderID) AS RegionList , 
            ISNULL(DT.DocumentCount, 0) AS DocumentCount , 
            SupplierContactImage15 
    FROM    dbo.CurrencyType 
            RIGHT OUTER JOIN dbo.PurchaseOrder ON dbo.CurrencyType.CurrencyTypeID = dbo.PurchaseOrder.CurrencyTypeID 
            LEFT OUTER JOIN dbo.EntityImage ON dbo.PurchaseOrder.SupplierContactID = dbo.EntityImage.EntityID 
                                               AND dbo.EntityImage.EntityName = N'Contact' 
            LEFT OUTER JOIN dbo.vwContactFullName 
            INNER JOIN dbo.Contact ON dbo.vwContactFullName.ContactID = dbo.Contact.ContactID ON dbo.PurchaseOrder.SupplierAttentionContactID = dbo.Contact.ContactID 
            LEFT OUTER JOIN dbo.vwIPadPurchaseOrderReceiptTotal ON dbo.PurchaseOrder.PurchaseOrderID = dbo.vwIPadPurchaseOrderReceiptTotal.PurchaseOrderID 
            LEFT OUTER JOIN dbo.Purchaser ON dbo.PurchaseOrder.PurchaserID = dbo.Purchaser.PurchaserID 
            LEFT OUTER JOIN dbo.vwPurchaseOrderTotals ON dbo.PurchaseOrder.PurchaseOrderID = dbo.vwPurchaseOrderTotals.PurchaseOrderID 
            LEFT OUTER JOIN dbo.PurchaseOrder AS PurchaseOrder_1 ON dbo.PurchaseOrder.PurchaseOrderIDForAdjustmentNote = PurchaseOrder_1.PurchaseOrderID 
            LEFT OUTER JOIN dbo.vwContactFullName AS vwContactFullName_3 ON dbo.PurchaseOrder.CancelledByContactID = vwContactFullName_3.ContactID 
            LEFT OUTER JOIN dbo.PurchaseOrderUserDefined1 AS PurchaseOrderUserDefined1_1 ON dbo.PurchaseOrder.PurchaseOrderUserDefined1ID = PurchaseOrderUserDefined1_1.PurchaseOrderUserDefined1ID 
            LEFT OUTER JOIN dbo.Contact AS Contact_3 ON dbo.PurchaseOrder.FreightContactID = Contact_3.ContactID 
            LEFT OUTER JOIN dbo.vwContactFullName AS vwContactFullName_2 ON dbo.PurchaseOrder.RaisedByContactID = vwContactFullName_2.ContactID 
            LEFT OUTER JOIN dbo.Contact AS CreatedByContact ON dbo.PurchaseOrder.RaisedByContactID = CreatedByContact.ContactID 
            LEFT OUTER JOIN dbo.RecordApproval 
            LEFT OUTER JOIN dbo.vwContactFullName AS vwContactFullName_1 ON dbo.RecordApproval.ApprovedByContactID = vwContactFullName_1.ContactID 
            RIGHT OUTER JOIN dbo.vwLastApprovalRecordPurchaseOrder ON dbo.RecordApproval.RecordApprovalID = dbo.vwLastApprovalRecordPurchaseOrder.LastApprovalID ON dbo.PurchaseOrder.PurchaseOrderID = dbo.vwLastApprovalRecordPurchaseOrder.EntityID 
            LEFT OUTER JOIN dbo.Region ON dbo.PurchaseOrder.RegionID = dbo.Region.RegionID 
            LEFT OUTER JOIN dbo.Contact AS Contact_1 ON dbo.PurchaseOrder.SupplierContactID = Contact_1.ContactID 
            LEFT OUTER JOIN ( SELECT    EntityID , 
                                        COUNT(*) AS DocumentCount 
                              FROM      dbo.[Document] 
                              WHERE     ( EntityName = 'PurchaseOrder' ) 
                                        AND ( IsActive = 1 ) 
                              GROUP BY  EntityID 
                            ) AS DT ON dbo.PurchaseOrder.PurchaseOrderID = DT.EntityID 
            LEFT OUTER JOIN ( SELECT    EntityID , 
                                        COUNT(*) AS ContactDocumentCount 
                              FROM      dbo.[Document] 
                              WHERE     EntityName = 'Contact' 
                                        AND IsActive = 1 
                              GROUP BY  EntityID 
                            ) AS ContactDT ON dbo.PurchaseOrder.SupplierContactID = ContactDT.EntityID 
            OUTER APPLY ( SELECT TOP 1 
                                    EntityID , 
                                    CASE WHEN FileID IS NOT NULL 
                                         THEN 'Documents/' 
                                              + CAST(FileID AS NVARCHAR(MAX)) 
                                              + SUBSTRING(FilePath, 
                                                          LEN(FilePath) 
                                                          - CHARINDEX('.', 
                                                              REVERSE(FilePath)) 
                                                          + 1, LEN(FilePath)) 
                                         ELSE FilePath /*REVERSE on above char index is to get the last index of .*/ 
                                    END AS SupplierContactImage15 
                          FROM      dbo.Document 
                          WHERE     ContactDT.ContactDocumentCount > 0 
                                    AND EntityName = 'Contact' 
                                    AND ContactDT.EntityID = EntityID 
                          ORDER BY  SequenceNumber ASC 
                        ) Doc
GO

IF OBJECT_ID(N'vwQuickSearchAssetList', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwQuickSearchAssetList]
GO
CREATE VIEW [dbo].[vwQuickSearchAssetList] AS 
SELECT 
	Asset.AssetNumber AS [Asset Number], 
	Asset.AssetDescription AS [Description], 
	AssetType.AssetTypeName AS [Asset Type], 
	Manufacturer.ManufacturerName AS [Manufacturer], 
	ModelNumber.ModelNumberName AS [Model Number], 
	Department.DepartmentName AS [Department], 
	AssetStatus.AssetStatusName AS [Status],  
	Asset.SerialNumber AS [Serial Number], 
	Asset.BarcodeNumber AS [Barcode Number], 
	Asset.Comment AS [Comments],  
	Asset.SafetyNote AS [Safety Notes],  
	AccountCode.AccountCodeName AS [Account Code],    
	CONVERT(VARCHAR(10), Asset.PurchasedDateTime, 103) AS [Purchase Date], 
	Asset.UnitPrice AS [Purchase Cost], 
	Asset.LastCalculatedDepreciatedValue AS [Current Value],  
	Asset.WarrantyStartDateTime AS [Warranty Start Date],  
	Asset.WarrantyFinishDateTime AS [Warranty Finish Date],  
	vwAssets7Levels.EquipParent1 AS [Level 1 Parent], 
	vwAssets7Levels.EquipParent2 AS [Level 2 Parent], 
	vwAssets7Levels.EquipParent3 AS [Level 3 Parent], 
	vwAssets7Levels.EquipParent4 AS [Level 4 Parent], 
	AssetUDF.Label01 AS [UDF Label 01], 
	AssetUDF.Value01 AS [UDF Vaulue 01], 
	AssetUDF.Label02 AS [UDF Label 02], 
	AssetUDF.Value02 AS [UDF Vaulue 02], 
	AssetUDF.Label03 AS [UDF Label 03], 
	AssetUDF.Value03 AS [UDF Vaulue 03], 
	AssetUDF.Label04 AS [UDF Label 04], 
	AssetUDF.Value04 AS [UDF Vaulue 04], 
	AssetUDF.Label05 AS [UDF Label 05], 
	AssetUDF.Value05 AS [UDF Vaulue 05], 
	AssetUDF.Label06 AS [UDF Label 06], 
	AssetUDF.Value06 AS [UDF Vaulue 06], 
	AssetUDF.Label07 AS [UDF Label 07], 
	AssetUDF.Value07 AS [UDF Value 07], 
	AssetUDF.Label08 AS [UDF Label 08], 
	AssetUDF.Value08 AS [UDF Value 08], 
	AssetUDF.Label09 AS [UDF Label 09], 
	AssetUDF.Value09 AS [UDF Vaulue 09], 
	AssetUDF.Label10 AS [UDF Label 10], 
	AssetUDF.Value10 AS [UDF Vaulue 10], 
	Asset.AssetID 
FROM 
	Asset  
	INNER JOIN vwAssets7Levels ON Asset.AssetID = vwAssets7Levels.AssetID  
	LEFT OUTER JOIN AssetStatus ON Asset.AssetStatusID = AssetStatus.AssetStatusID  
	LEFT OUTER JOIN AccountCode ON Asset.AccountCodeID = AccountCode.AccountCodeID  
	LEFT OUTER JOIN Department ON Asset.DepartmentID = Department.DepartmentID  
	LEFT OUTER JOIN ModelNumber ON Asset.ModelNumberID = ModelNumber.ModelNumberID  
	LEFT OUTER JOIN Manufacturer ON Asset.ManufacturerID = Manufacturer.ManufacturerID  
	LEFT OUTER JOIN AssetType ON Asset.AssetTypeID = AssetType.AssetTypeID 
	LEFT OUTER JOIN 
		(SELECT         
			Asset.AssetNumber, Asset.AssetDescription, AssetType.AssetTypeName, Asset.AssetID, Asset.DepartmentID, Asset.AssetTypeID, Asset.ManufacturerID, Asset.ModelNumberID, 
 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 1 THEN AssetTypeUserDefined.AssetTypeUserDefinedLabel ELSE NULL END) AS Label01, 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 1 THEN AssetTypeUserDefinedValues.AssetTypeUserDefinedValue ELSE NULL END) AS Value01, 
 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 2 THEN AssetTypeUserDefined.AssetTypeUserDefinedLabel ELSE NULL END) AS Label02, 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 2 THEN AssetTypeUserDefinedValues.AssetTypeUserDefinedValue ELSE NULL END) AS Value02, 
 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 3 THEN AssetTypeUserDefined.AssetTypeUserDefinedLabel ELSE NULL END) AS Label03, 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 3 THEN AssetTypeUserDefinedValues.AssetTypeUserDefinedValue ELSE NULL END) AS Value03, 
 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 4 THEN AssetTypeUserDefined.AssetTypeUserDefinedLabel ELSE NULL END) AS Label04, 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 4 THEN AssetTypeUserDefinedValues.AssetTypeUserDefinedValue ELSE NULL END) AS Value04, 
 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 5 THEN AssetTypeUserDefined.AssetTypeUserDefinedLabel ELSE NULL END) AS Label05, 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 5 THEN AssetTypeUserDefinedValues.AssetTypeUserDefinedValue ELSE NULL END) AS Value05, 
 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 6 THEN AssetTypeUserDefined.AssetTypeUserDefinedLabel ELSE NULL END) AS Label06, 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 6 THEN AssetTypeUserDefinedValues.AssetTypeUserDefinedValue ELSE NULL END) AS Value06, 
 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 7 THEN AssetTypeUserDefined.AssetTypeUserDefinedLabel ELSE NULL END) AS Label07, 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 7 THEN AssetTypeUserDefinedValues.AssetTypeUserDefinedValue ELSE NULL END) AS Value07, 
 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 8 THEN AssetTypeUserDefined.AssetTypeUserDefinedLabel ELSE NULL END) AS Label08, 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 8 THEN AssetTypeUserDefinedValues.AssetTypeUserDefinedValue ELSE NULL END) AS Value08, 
 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 9 THEN AssetTypeUserDefined.AssetTypeUserDefinedLabel ELSE NULL END) AS Label09, 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 9 THEN AssetTypeUserDefinedValues.AssetTypeUserDefinedValue ELSE NULL END) AS Value09, 
 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 10 THEN AssetTypeUserDefined.AssetTypeUserDefinedLabel ELSE NULL END) AS Label10, 
			MAX(CASE WHEN AssetTypeUserDefined.SequenceNumber = 10 THEN AssetTypeUserDefinedValues.AssetTypeUserDefinedValue ELSE NULL END) AS Value10 
 
		FROM 
			Asset  
			INNER JOIN AssetType ON Asset.AssetTypeID = AssetType.AssetTypeID 
			INNER JOIN AssetTypeUserDefined ON Asset.AssetTypeID = AssetTypeUserDefined.AssetTypeID 
			LEFT OUTER JOIN AssetTypeUserDefinedValues  
				ON AssetTypeUserDefined.AssetTypeUserDefinedID = AssetTypeUserDefinedValues.AssetTypeUserDefinedID 
				AND AssetTypeUserDefinedValues.AssetID = asset.AssetID 
			INNER JOIN fxRegionAsset(DEFAULT) ON Asset.AssetID = fxRegionAsset.AssetID 
		GROUP BY Asset.AssetNumber, Asset.AssetDescription, AssetType.AssetTypeName, Asset.AssetID, Asset.DepartmentID, Asset.AssetTypeID, Asset.ManufacturerID, Asset.ModelNumberID) 
		AS AssetUDF ON Asset.AssetID = AssetUDF.AssetID 
WHERE 
	Asset.IsAsset = 1 
	AND Asset.IsActive = 1
GO

IF OBJECT_ID(N'vwRegionsAccountCodeRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsAccountCodeRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsAccountCodeRegionIDs]
AS
SELECT     AccountCodeID, dbo.GetAccountCodeRegionIDs(AccountCodeID) AS RegionIDs
FROM         dbo.AccountCode
GO

IF OBJECT_ID(N'vwRegionsAssetRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsAssetRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsAssetRegionIDs]
AS
SELECT     AssetID, dbo.GetAssetRegionIDs(AssetID) AS RegionIDs
FROM         dbo.Asset
GO

IF OBJECT_ID(N'vwRegionsContactRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsContactRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsContactRegionIDs]
AS
SELECT     ContactID, dbo.GetContactRegionIDs(ContactID) AS RegionIDs
FROM         dbo.Contact
GO

IF OBJECT_ID(N'vwRegionsContactTradeCodeRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsContactTradeCodeRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsContactTradeCodeRegionIDs]
AS
SELECT     ContactTradeCodeID, ContactID, dbo.GetContactTradeContactRegionIDs(ContactID) AS RegionIDs
FROM         dbo.ContactTradeCode
GO

IF OBJECT_ID(N'vwRegionsContactTradeContactRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsContactTradeContactRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsContactTradeContactRegionIDs]
AS
SELECT     ContactID, dbo.GetContactTradeContactRegionIDs(ContactID) AS RegionIDs
FROM         dbo.Contact
GO

IF OBJECT_ID(N'vwRegionsDepartmentRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsDepartmentRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsDepartmentRegionIDs]
AS
SELECT     DepartmentID, dbo.GetDepartmentRegionIDs(DepartmentID) AS RegionIDs
FROM         dbo.Department
GO

IF OBJECT_ID(N'vwRegionsInspectionRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsInspectionRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsInspectionRegionIDs]
AS
SELECT     PreventativeMaintenanceID, dbo.GetInspectionRegionIDs(PreventativeMaintenanceID) AS RegionIDs
FROM         dbo.PreventativeMaintenance
GO

IF OBJECT_ID(N'vwRegionsMEXUserContactRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsMEXUserContactRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsMEXUserContactRegionIDs]
AS
SELECT     ContactID, dbo.GetMEXUserRegionIDs(ContactID) AS RegionIDs
FROM         dbo.Contact
GO

IF OBJECT_ID(N'vwRegionsPreventativeMaintenanceRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsPreventativeMaintenanceRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsPreventativeMaintenanceRegionIDs]
AS
SELECT     PreventativeMaintenanceID, dbo.GetPreventativeMaintenanceRegionIDs(PreventativeMaintenanceID) AS RegionIDs
FROM         dbo.PreventativeMaintenance
GO

IF OBJECT_ID(N'vwRegionsPurchaseOrderRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsPurchaseOrderRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsPurchaseOrderRegionIDs]
AS
SELECT     PurchaseOrderID, dbo.GetPurchaseOrderRegionIDs(PurchaseOrderID) AS RegionIDs
FROM         dbo.PurchaseOrder
GO

IF OBJECT_ID(N'vwRegionsPurchaserRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsPurchaserRegionIDs]
GO
CREATE VIEW dbo.vwRegionsPurchaserRegionIDs
AS
SELECT     PurchaserID, dbo.GetPurchaserRegionIDs(PurchaserID) AS RegionIDs
FROM         dbo.Purchaser
GO

IF OBJECT_ID(N'vwRegionsStoreRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsStoreRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsStoreRegionIDs]
AS
SELECT     StoreID, dbo.GetStoreRegionIDs(StoreID) AS RegionIDs
FROM         dbo.Store
GO

IF OBJECT_ID(N'vwRegionsTradeCodeRegionIDs', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRegionsTradeCodeRegionIDs]
GO
CREATE VIEW [dbo].[vwRegionsTradeCodeRegionIDs]
AS
SELECT     TradeCodeID, dbo.GetTradeCodeRegionIDs(TradeCodeID) AS RegionIDs
FROM         dbo.TradeCode
GO

IF OBJECT_ID(N'vwReplenishStockListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwReplenishStockListing]
GO
CREATE VIEW dbo.vwReplenishStockListing
AS
SELECT        dbo.Asset.AssetID, dbo.Catalogue.CatalogueID, dbo.Catalogue.CatalogueNumber, dbo.Catalogue.CatalogueDescription, dbo.Store.StoreName, dbo.BinLocation.BinLocationName, 
                         dbo.vwReplenishStockQuantities.StockOnHand, dbo.vwReplenishStockQuantities.StockOnOrder, dbo.Catalogue.IsCatalogued, ISNULL(dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned, 0) 
                         AS TotalQuantityRequisitioned, ISNULL(dbo.vwReplenishStockQuantities.TotalQuantityReserved, 0) AS TotalQuantityReserved, dbo.Asset.MinimumQuantity, dbo.Asset.MaximumQuantity, dbo.Asset.UnitPrice, 
                         dbo.Tax.TaxPercentage, dbo.SystemOption.SalesTaxNumber, dbo.Asset.StoreID, dbo.GetStoreRegionIDs(dbo.Asset.StoreID) AS RegionIDs, dbo.Asset.TaxID, dbo.CatalogueSupplier.SupplierContactID, 
                         dbo.Catalogue.UOMID AS CatalogueUOMID, ISNULL(dbo.CatalogueSupplier.UOMConversionFactor, 0) AS ReplenishCatalogueSupplierUOMConversionFactor, dbo.Contact.FirstName AS SupplierName, 
                         CASE WHEN CatalogueSupplier.SupplierContactID IS NULL THEN '' ELSE CASE WHEN StandingOrderID IS NULL THEN 'Create Purchase Order' ELSE 'Add To Standing Order' END END AS ActionName, 
                         CAST(CASE WHEN StandingOrderID IS NULL THEN 0 ELSE 1 END AS bit) AS HasStandingOrder, ISNULL(dbo.vwPurchaseOrderTotals.TotalCost, 0) AS StandingOrderTotalCost, 
                         dbo.PurchaseOrder.StandingPurchaseOrderBudget AS StandingOrderBudget, 
                         CASE WHEN OrderQuantity > 0 THEN CASE WHEN (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 < OrderQuantity THEN OrderQuantity ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 END ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved + dbo.vwReplenishStockQuantities.StockOnOrder
                          - dbo.Asset.MaximumQuantity) * - 1 END AS BuyQty, 
                         (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved + dbo.vwReplenishStockQuantities.StockOnOrder
                          - dbo.Asset.MaximumQuantity) * - 1 AS MinimumBuyQty, ISNULL(ReplenishCatalogueSupplierUOM.UOMName, dbo.UOM.UOMName) AS BUYUOMName, 
                         CASE WHEN IsNull(CatalogueSupplier.UOMConversionFactor, 0) 
                         = 0 THEN CASE WHEN OrderQuantity > 0 THEN CASE WHEN (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 < OrderQuantity THEN OrderQuantity ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 END ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved + dbo.vwReplenishStockQuantities.StockOnOrder
                          - dbo.Asset.MaximumQuantity) 
                         * - 1 END ELSE CASE WHEN OrderQuantity > 0 THEN CASE WHEN (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 < OrderQuantity THEN OrderQuantity ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 END ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved + dbo.vwReplenishStockQuantities.StockOnOrder
                          - dbo.Asset.MaximumQuantity) * - 1 END / CatalogueSupplier.uOMConversionFactor END AS ActualBuyQty, 
                         CASE WHEN Catalogue.IsCatalogued = 0 THEN UnitPrice ELSE CASE WHEN CatalogueSupplier.CatalogueSupplierID IS NULL 
                         THEN 0 ELSE CatalogueSupplier.ExpectedPurchasePrice END END AS ReplenishUnitCost, CASE WHEN CatalogueSupplier.CatalogueSupplierID IS NULL 
                         THEN 0 ELSE CASE WHEN IsNull(ExchangeRatePercentage, 0) = 0 THEN (CASE WHEN IsNull(CatalogueSupplier.UOMConversionFactor, 0) 
                         = 0 THEN CASE WHEN OrderQuantity > 0 THEN CASE WHEN (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 < OrderQuantity THEN OrderQuantity ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 END ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved + dbo.vwReplenishStockQuantities.StockOnOrder
                          - dbo.Asset.MaximumQuantity) 
                         * - 1 END ELSE CASE WHEN OrderQuantity > 0 THEN CASE WHEN (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 < OrderQuantity THEN OrderQuantity ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 END ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved + dbo.vwReplenishStockQuantities.StockOnOrder
                          - dbo.Asset.MaximumQuantity) * - 1 END / CatalogueSupplier.uOMConversionFactor END * IsNull(ExpectedPurchasePrice, 0) * 1) * (1 + IsNull(TaxPercentage, 0)) 
                         ELSE (CASE WHEN IsNull(CatalogueSupplier.UOMConversionFactor, 0) 
                         = 0 THEN CASE WHEN OrderQuantity > 0 THEN CASE WHEN (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 < OrderQuantity THEN OrderQuantity ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 END ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved + dbo.vwReplenishStockQuantities.StockOnOrder
                          - dbo.Asset.MaximumQuantity) 
                         * - 1 END ELSE CASE WHEN OrderQuantity > 0 THEN CASE WHEN (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 < OrderQuantity THEN OrderQuantity ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved
                          + dbo.vwReplenishStockQuantities.StockOnOrder - dbo.Asset.MaximumQuantity) 
                         * - 1 END ELSE (dbo.vwReplenishStockQuantities.StockOnHand - dbo.vwReplenishStockQuantities.TotalQuantityRequisitioned - dbo.vwReplenishStockQuantities.TotalQuantityReserved + dbo.vwReplenishStockQuantities.StockOnOrder
                          - dbo.Asset.MaximumQuantity) * - 1 END / CatalogueSupplier.uOMConversionFactor END * IsNull(ExpectedPurchasePrice, 0) * IsNull(ExchangeRatePercentage, 0)) * (1 + IsNull(TaxPercentage, 0)) 
                         END END AS ReplenishValueLocalCurrency, CASE WHEN CatalogueSupplier.CatalogueSupplierID IS NULL THEN 0 ELSE IsNull(ExchangeRatePercentage, 0) 
                         END AS ReplenishCatalogueSupplierExchangeRatePercentage, CASE WHEN CatalogueSupplier.CatalogueSupplierID IS NULL THEN NULL ELSE DATEADD(d, dbo.CatalogueSupplier.LeadTimeDays, GETDATE()) 
                         END AS ReplenishDateDeliveryExpected, ISNULL(dbo.CatalogueSupplier.SupplierStockNumber, N'') AS SupplierStockNumber, CASE WHEN Contact_1.ContactID IS NULL 
                         THEN '' ELSE Contact_1.FirstName + ' ' + Contact_1.LastName END AS SuppliersContactName, ISNULL(ISNULL(Contact_1.WorkPhone, dbo.Contact.WorkPhone), N'') AS SuppliersPhoneNumber, 
                         ISNULL(ISNULL(Contact_1.Fax, dbo.Contact.Fax), N'') AS SuppliersFaxNumber, ISNULL(ISNULL(Contact_1.ABN, dbo.Contact.ABN), N'') AS SuppliersABN, CAST(0 AS bit) AS IsInvalidStandingOrderLine
FROM            dbo.UOM RIGHT OUTER JOIN
                         dbo.vwDefaultCatalogueSupplier LEFT OUTER JOIN
                         dbo.CatalogueSupplier ON dbo.vwDefaultCatalogueSupplier.CatalogueSupplierID = dbo.CatalogueSupplier.CatalogueSupplierID RIGHT OUTER JOIN
                         dbo.Asset INNER JOIN
                         dbo.Catalogue ON dbo.Asset.CatalogueID = dbo.Catalogue.CatalogueID ON dbo.vwDefaultCatalogueSupplier.CatalogueID = dbo.Catalogue.CatalogueID LEFT OUTER JOIN
                         dbo.PurchaseOrder LEFT OUTER JOIN
                         dbo.vwPurchaseOrderTotals ON dbo.PurchaseOrder.PurchaseOrderID = dbo.vwPurchaseOrderTotals.PurchaseOrderID RIGHT OUTER JOIN
                         dbo.vwReplenishStockStandingOrder ON dbo.PurchaseOrder.PurchaseOrderID = dbo.vwReplenishStockStandingOrder.StandingOrderID ON 
                         dbo.CatalogueSupplier.SupplierContactID = dbo.vwReplenishStockStandingOrder.SupplierContactID AND dbo.Asset.AssetID = dbo.vwReplenishStockStandingOrder.AssetID ON 
                         dbo.UOM.UOMID = dbo.Catalogue.UOMID LEFT OUTER JOIN
                         dbo.UOM AS ReplenishCatalogueSupplierUOM ON dbo.CatalogueSupplier.UOMID = ReplenishCatalogueSupplierUOM.UOMID LEFT OUTER JOIN
                         dbo.CurrencyType RIGHT OUTER JOIN
                         dbo.Contact AS Contact_1 RIGHT OUTER JOIN
                         dbo.vwContactPrimaryContact ON Contact_1.ContactID = dbo.vwContactPrimaryContact.ContactID RIGHT OUTER JOIN
                         dbo.Contact ON dbo.vwContactPrimaryContact.ParentContactID = dbo.Contact.ContactID ON dbo.CurrencyType.CurrencyTypeID = dbo.Contact.CurrencyTypeID ON 
                         dbo.CatalogueSupplier.SupplierContactID = dbo.Contact.ContactID LEFT OUTER JOIN
                         dbo.Tax ON dbo.Asset.TaxID = dbo.Tax.TaxID LEFT OUTER JOIN
                         dbo.BinLocation ON dbo.Asset.BinLocationID = dbo.BinLocation.BinLocationID LEFT OUTER JOIN
                         dbo.vwReplenishStockQuantities ON dbo.Asset.AssetID = dbo.vwReplenishStockQuantities.AssetID LEFT OUTER JOIN
                         dbo.Store ON dbo.Asset.StoreID = dbo.Store.StoreID CROSS JOIN
                         dbo.SystemOption
WHERE        (dbo.Asset.MinimumQuantity > 0) AND (dbo.Asset.MaximumQuantity > 0) AND (dbo.Asset.MaximumQuantity >= dbo.Asset.MinimumQuantity) AND (dbo.Asset.IsActive = 1) AND (dbo.Catalogue.IsCatalogued = 1) AND
                          (dbo.Catalogue.IsStocked = 1) AND (dbo.vwReplenishStockQuantities.TotalStockAvailable < 0)
GO

IF OBJECT_ID(N'vwRequestListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRequestListing]
GO
CREATE VIEW dbo.vwRequestListing 
AS 
SELECT        dbo.Request.RequestID, dbo.RecordApproval.ApprovalStatusName, dbo.RecordApproval.ApprovedDateTime, vwContactFullName_2.FullName AS ApprovedByFullName,  
                         vwContactFullName_1.FullName AS RequestedByFullName, dbo.WorkOrderStatus.WorkOrderStatusDescription, dbo.WorkOrder.DueStartDateTime, dbo.WorkOrder.FinishedDateTime,  
                         dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderSuffix, dbo.AccountCode.AccountCodeName, dbo.Priority.PriorityDescription, dbo.Priority.PriorityNumber, dbo.Contact.WorkPhone,  
                         dbo.Contact.Address1, dbo.Contact.Address2, dbo.Contact.City, dbo.Contact.State, dbo.Contact.PostCode, dbo.Contact.Country, dbo.Contact.HomePhone, dbo.Contact.MobilePhone, dbo.Contact.Fax,  
                         dbo.Contact.Email, dbo.Contact.WebAddress, vwContactFullName_3.FullName AS CreatedByFullName, dbo.Asset.AssetNumber, dbo.Department.DepartmentName, dbo.JobType.JobTypeName,  
                         dbo.JobType.JobTypeDescription, dbo.Request.RequestNumber, dbo.Request.IsCancelled, dbo.Request.RequestDescription, dbo.Request.Response, dbo.Request.RespondedDateTime,  
                         dbo.Request.RequestedDateTime, dbo.Request.EstimatedCost, dbo.Request.IsCompleted, dbo.Request.ReasonCancelled, dbo.Request.DepartmentID, dbo.WorkOrderStatus.WorkOrderStatusFunctionName,  
                         dbo.WorkOrderStatus.WorkOrderStatusID, dbo.Request.WorkOrderID, dbo.WorkOrderStatus.WorkOrderStatusNumber, dbo.Request.AssetID, '(' + CONVERT(nvarchar(MAX), dbo.Request.AssetID)  
                         + ')' AS AssetIDForIncludeChildren, dbo.Request.RequestedByContactID, ISNULL(CASE WHEN WorkOrderSuffix IS NOT NULL THEN CAST(dbo.WorkOrder.WorkOrderNumber AS varchar)  
                         + dbo.WorkOrder.WorkOrderSuffix ELSE CAST(dbo.WorkOrder.WorkOrderNumber AS nvarchar) END, '') AS DisplayWorkOrderNumber, CASE WHEN Priority.PriorityNumber IS NULL  
                         THEN '' ELSE CAST(Priority.PriorityNumber AS varchar) + ' - ' + Priority.PriorityDescription END AS DisplayPriority, dbo.vwContactFullName.FullName AS AcceptedByRequestFullName,  
                         dbo.Request.IsAcceptedByRequester, dbo.Request.AcceptedByRequesterDateTime, CAST(NULL AS image) AS RequestImage, CASE WHEN ISNULL(DT.DocumentCount, 0) + ISNULL(EI.DocumentCount, 0)  
                         > 0 THEN '1' ELSE CAST(N'' AS nvarchar) END AS RequestImageString, dbo.Request.CreatedByContactID, dbo.Request.ModifiedDateTime, dbo.GetRequestRegionIDs(dbo.Request.RequestID)  
                         AS RequestRegionIDs, ISNULL(DT.DocumentCount, 0) + ISNULL(EI.DocumentCount, 0) AS DocumentCount 
FROM            dbo.vwLastApprovalRecordRequest RIGHT OUTER JOIN 
                         dbo.vwContactFullName RIGHT OUTER JOIN 
                         dbo.Request ON dbo.vwContactFullName.ContactID = dbo.Request.AcceptedByRequesterContactID LEFT OUTER JOIN 
                         dbo.EntityImage ON dbo.Request.RequestID = dbo.EntityImage.EntityID AND dbo.EntityImage.EntityName = N'Request' LEFT OUTER JOIN 
                         dbo.JobType ON dbo.Request.JobTypeID = dbo.JobType.JobTypeID LEFT OUTER JOIN 
                         dbo.Department ON dbo.Request.DepartmentID = dbo.Department.DepartmentID LEFT OUTER JOIN 
                         dbo.Asset ON dbo.Request.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN 
                         dbo.vwContactFullName AS vwContactFullName_3 ON dbo.Request.CreatedByContactID = vwContactFullName_3.ContactID LEFT OUTER JOIN 
                         dbo.Priority ON dbo.Request.PriorityID = dbo.Priority.PriorityID LEFT OUTER JOIN 
                         dbo.WorkOrderStatus RIGHT OUTER JOIN 
                         dbo.WorkOrder LEFT OUTER JOIN 
                         dbo.AccountCode ON dbo.WorkOrder.AccountCodeID = dbo.AccountCode.AccountCodeID ON dbo.WorkOrderStatus.WorkOrderStatusID = dbo.WorkOrder.WorkOrderStatusID ON  
                         dbo.Request.WorkOrderID = dbo.WorkOrder.WorkOrderID LEFT OUTER JOIN 
                         dbo.Contact LEFT OUTER JOIN 
                         dbo.vwContactFullName AS vwContactFullName_1 ON dbo.Contact.ContactID = vwContactFullName_1.ContactID ON dbo.Request.RequestedByContactID = dbo.Contact.ContactID ON  
                         dbo.vwLastApprovalRecordRequest.EntityID = dbo.Request.RequestID LEFT OUTER JOIN 
                         dbo.RecordApproval LEFT OUTER JOIN 
                         dbo.vwContactFullName AS vwContactFullName_2 ON dbo.RecordApproval.ApprovedByContactID = vwContactFullName_2.ContactID ON  
                         dbo.vwLastApprovalRecordRequest.LastApprovalID = dbo.RecordApproval.RecordApprovalID LEFT OUTER JOIN 
                             (SELECT        EntityID, COUNT(*) AS DocumentCount 
                               FROM            dbo.[Document] 
                               WHERE        (EntityName = 'Request') AND (IsActive = 1) 
                               GROUP BY EntityID) AS DT ON dbo.Request.RequestID = DT.EntityID LEFT OUTER JOIN 
                             (SELECT        EntityID, COUNT(*) AS DocumentCount 
                               FROM            dbo.EntityImage AS EntityImage_1 
                               WHERE        (EntityName = 'Request') 
                               GROUP BY EntityID) AS EI ON dbo.Request.RequestID = EI.EntityID
GO

IF OBJECT_ID(N'vwRequisitionListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwRequisitionListing]
GO
CREATE VIEW [dbo].[vwRequisitionListing]
AS
SELECT     RequisitionLine_1.RequisitionLineID, RequisitionLine_1.RequisitionID, dbo.Requisition.RequisitionNumber, dbo.Catalogue.CatalogueNumber, dbo.Catalogue.CatalogueDescription, 
                      RequisitionLine_1.RequisitionLineDescription, vwContactFullName_5.FullName AS SuggestedSupplierFullName, dbo.Requisition.RequisitionDescription, dbo.Requisition.RequisitionedByContactID, 
                      vwContactFullName_1.FullName AS RequisitionedByFullName, dbo.Requisition.RequiredByDateTime, dbo.Store.StoreName, dbo.BinLocation.BinLocationName, dbo.WorkOrder.WorkOrderNumber, 
                      dbo.WorkOrder.WorkOrderSuffix, dbo.AccountCode.AccountCodeName, vwContactFullName_2.FullName AS CompletedByFullName, vwContactFullName_3.FullName AS CancelledByFullName, 
                      dbo.Requisition.Comment, dbo.RecordApproval.ApprovalStatusName, dbo.RecordApproval.ApprovedDateTime, vwContactFullName_4.FullName AS ApprovedByFullName, 
                      ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) - ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) AS StockAvailable, dbo.Reservation.ReservationNumber, 
                      RequisitionLine_1.RequisitionedQuantity, RequisitionLine_1.ExpectedPurchasePrice, RequisitionLine_1.CompletedDateTime, RequisitionLine_1.CancelledDateTime, RequisitionLine_1.IsCancelled, 
                      dbo.Asset.AssetID, dbo.Catalogue.IsCatalogued, RequisitionLine_1.WorkOrderSpareID, dbo.Requisition.AccountCodeID, ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) 
                      AS StockOnReserve, ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) AS StockOnHand, dbo.Store.StoreID, dbo.GetRequisitionRegionIDs(dbo.Requisition.RequisitionID) AS RegionIDs, 
                      CAST(CASE WHEN ISNULL(vwRequisitionCompletedLineCount.CountCompleted, 0) > 0 THEN 1 ELSE 0 END AS bit) AS HasCompletedLines, RequisitionLine_1.CancelledByContactID, 
                      RequisitionLine_1.CompletedByContactID, dbo.RecordApproval.ApprovedByContactID
FROM         dbo.vwContactFullName AS vwContactFullName_5 RIGHT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_1 RIGHT OUTER JOIN
                      dbo.Requisition LEFT OUTER JOIN
                      dbo.vwRequisitionCompletedLineCount ON dbo.Requisition.RequisitionID = dbo.vwRequisitionCompletedLineCount.RequisitionID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_4 RIGHT OUTER JOIN
                      dbo.RecordApproval ON vwContactFullName_4.ContactID = dbo.RecordApproval.ApprovedByContactID RIGHT OUTER JOIN
                      dbo.vwLastApprovalRecordRequisition ON dbo.RecordApproval.RecordApprovalID = dbo.vwLastApprovalRecordRequisition.LastApprovalID ON 
                      dbo.Requisition.RequisitionID = dbo.vwLastApprovalRecordRequisition.EntityID LEFT OUTER JOIN
                      dbo.AccountCode ON dbo.Requisition.AccountCodeID = dbo.AccountCode.AccountCodeID ON vwContactFullName_1.ContactID = dbo.Requisition.RequisitionedByContactID ON 
                      vwContactFullName_5.ContactID = dbo.Requisition.SuggestedSupplierContactID RIGHT OUTER JOIN
                      dbo.Catalogue RIGHT OUTER JOIN
                      dbo.Store RIGHT OUTER JOIN
                      dbo.BinLocation RIGHT OUTER JOIN
                      dbo.vwCatalogueStockOnHand RIGHT OUTER JOIN
                      dbo.Asset LEFT OUTER JOIN
                      dbo.vwCatalogueQuantityReserved ON dbo.Asset.AssetID = dbo.vwCatalogueQuantityReserved.AssetID ON dbo.vwCatalogueStockOnHand.AssetID = dbo.Asset.AssetID ON 
                      dbo.BinLocation.BinLocationID = dbo.Asset.BinLocationID ON dbo.Store.StoreID = dbo.Asset.StoreID ON dbo.Catalogue.CatalogueID = dbo.Asset.CatalogueID RIGHT OUTER JOIN
                      dbo.WorkOrderSpare LEFT OUTER JOIN
                      dbo.WorkOrder ON dbo.WorkOrderSpare.WorkOrderID = dbo.WorkOrder.WorkOrderID RIGHT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_3 RIGHT OUTER JOIN
                      dbo.Reservation RIGHT OUTER JOIN
                      dbo.RequisitionLine AS RequisitionLine_1 ON dbo.Reservation.RequisitionLineID = RequisitionLine_1.RequisitionLineID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_2 ON RequisitionLine_1.CompletedByContactID = vwContactFullName_2.ContactID ON 
                      vwContactFullName_3.ContactID = RequisitionLine_1.CancelledByContactID ON dbo.WorkOrderSpare.WorkOrderSpareID = RequisitionLine_1.WorkOrderSpareID ON 
                      dbo.Asset.AssetID = RequisitionLine_1.AssetID ON dbo.Requisition.RequisitionID = RequisitionLine_1.RequisitionID
GROUP BY RequisitionLine_1.RequisitionLineID, RequisitionLine_1.RequisitionID, dbo.Requisition.RequisitionNumber, dbo.Catalogue.CatalogueNumber, dbo.Catalogue.CatalogueDescription, 
                      RequisitionLine_1.RequisitionLineDescription, vwContactFullName_5.FullName, dbo.Requisition.RequisitionDescription, vwContactFullName_1.FullName, dbo.Requisition.RequiredByDateTime, 
                      dbo.Store.StoreName, dbo.BinLocation.BinLocationName, dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderSuffix, dbo.AccountCode.AccountCodeName, 
                      vwContactFullName_2.FullName, vwContactFullName_3.FullName, dbo.Requisition.Comment, dbo.RecordApproval.ApprovalStatusName, dbo.RecordApproval.ApprovedDateTime, 
                      vwContactFullName_4.FullName, ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) - ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0), 
                      dbo.Reservation.ReservationNumber, RequisitionLine_1.RequisitionedQuantity, RequisitionLine_1.ExpectedPurchasePrice, RequisitionLine_1.CompletedDateTime, 
                      RequisitionLine_1.CancelledDateTime, RequisitionLine_1.IsCancelled, dbo.Asset.AssetID, RequisitionLine_1.WorkOrderSpareID, dbo.Catalogue.IsCatalogued, dbo.Requisition.AccountCodeID, 
                      ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0), ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0), dbo.GetRequisitionRegionIDs(dbo.Requisition.RequisitionID), 
                      CAST(CASE WHEN ISNULL(vwRequisitionCompletedLineCount.CountCompleted, 0) > 0 THEN 1 ELSE 0 END AS bit), dbo.Requisition.RequisitionedByContactID, 
                      RequisitionLine_1.CancelledByContactID, RequisitionLine_1.CompletedByContactID, dbo.RecordApproval.ApprovedByContactID, dbo.Store.StoreID
GO

IF OBJECT_ID(N'vwReservationListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwReservationListing]
GO
--WO21746
CREATE VIEW [dbo].[vwReservationListing]
AS
SELECT     dbo.Catalogue.CatalogueNumber, dbo.Catalogue.CatalogueDescription, dbo.Reservation.ReservedByContactID, 
                      isnull(dbo.vwContactFullName.FullName,'None') AS ReservedByFullName, dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderSuffix, dbo.Store.StoreName, 
                      dbo.BinLocation.BinLocationID, dbo.BinLocation.BinLocationName, dbo.AccountCode.AccountCodeID, dbo.AccountCode.AccountCodeName, 
                      dbo.Reservation.CompletedByContactID, vwContactFullName_1.FullName AS CompletedByFullName, dbo.Reservation.CancelledByContactID, 
                      vwContactFullName_2.FullName AS CancelledByFullName, dbo.Requisition.RequisitionNumber, dbo.Reservation.ReservationID, 
                      ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) AS TotalQuantityReserved, ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) 
                      AS StockOnHand, dbo.Reservation.ReservationNumber, dbo.Reservation.Comment, dbo.Reservation.RequiredByDateTime, dbo.Reservation.ReservedQuantity, 
                      dbo.Reservation.CompletedDateTime, dbo.Reservation.IsCancelled, dbo.Reservation.CancelledDateTime, dbo.GetStoreRegionIDs(dbo.Store.StoreID) AS RegionIDs, 
                      dbo.Store.StoreID, dbo.Reservation.AssetID, CAST(CASE WHEN ReservedQuantity <= (ISNULL(dbo.vwCatalogueStockOnHand.StockOnHand, 0) 
                      - (ISNULL(dbo.vwCatalogueQuantityReserved.TotalQuantityReserved, 0) - ReservedQuantity)) THEN 1 ELSE 0 END AS bit) AS AvailableStock, 
                      CAST(CASE WHEN Reservation.CompletedByContactID IS NOT NULL THEN 1 ELSE 0 END AS bit) AS IsCompleted
FROM         dbo.Store RIGHT OUTER JOIN
                      dbo.vwCatalogueQuantityReserved RIGHT OUTER JOIN
                      dbo.vwCatalogueStockOnHand RIGHT OUTER JOIN
                      dbo.Asset ON dbo.vwCatalogueStockOnHand.AssetID = dbo.Asset.AssetID ON dbo.vwCatalogueQuantityReserved.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN
                      dbo.BinLocation ON dbo.Asset.BinLocationID = dbo.BinLocation.BinLocationID ON dbo.Store.StoreID = dbo.Asset.StoreID LEFT OUTER JOIN
                      dbo.Catalogue ON dbo.Asset.CatalogueID = dbo.Catalogue.CatalogueID RIGHT OUTER JOIN
                      dbo.vwContactFullName RIGHT JOIN
                      dbo.Reservation ON dbo.vwContactFullName.ContactID = dbo.Reservation.ReservedByContactID LEFT OUTER JOIN
                      dbo.RequisitionLine LEFT OUTER JOIN
                      dbo.Requisition ON dbo.RequisitionLine.RequisitionID = dbo.Requisition.RequisitionID ON 
                      dbo.Reservation.RequisitionLineID = dbo.RequisitionLine.RequisitionLineID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_2 ON dbo.Reservation.CancelledByContactID = vwContactFullName_2.ContactID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_1 ON dbo.Reservation.CompletedByContactID = vwContactFullName_1.ContactID LEFT OUTER JOIN
                      dbo.AccountCode ON dbo.Reservation.AccountCodeID = dbo.AccountCode.AccountCodeID LEFT OUTER JOIN
                      dbo.WorkOrder RIGHT OUTER JOIN
                      dbo.WorkOrderSpare ON dbo.WorkOrder.WorkOrderID = dbo.WorkOrderSpare.WorkOrderID ON 
                      dbo.Reservation.WorkOrderSpareID = dbo.WorkOrderSpare.WorkOrderSpareID ON dbo.Asset.AssetID = dbo.Reservation.AssetID
GO

IF OBJECT_ID(N'vwScheduleWorkOrderBacklog', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwScheduleWorkOrderBacklog]
GO
/* hi */
CREATE VIEW dbo.vwScheduleWorkOrderBacklog
AS
    SELECT TOP ( 100 ) PERCENT
            dbo.WorkOrder.WorkOrderID ,
            dbo.WorkOrder.WorkOrderNumber ,
            CASE WHEN ( DATALENGTH(dbo.WorkOrder.WorkOrderDescription) / 2 ) > dbo.GetListingDescriptionShowLength()
                 THEN SUBSTRING(dbo.WorkOrder.WorkOrderDescription, 0,
                                dbo.GetListingDescriptionShowLength())
                      + ' ...'
                 ELSE dbo.WorkOrder.WorkOrderDescription
            END AS WorkOrderDescription ,
            SUM(dbo.vwScheduleWorkOrderBacklogDetail.Duration) AS Duration ,
            dbo.vwScheduleWorkOrderBacklogDetail.SettingsRegionID ,
            dbo.WorkOrder.PriorityID ,
            dbo.WorkOrder.DepartmentID ,
            dbo.WorkOrder.JobTypeID ,
            MIN(dbo.vwScheduleWorkOrderBacklogDetail.DueStartDateTime) AS DueStartDateTime ,
            MAX(dbo.vwScheduleWorkOrderBacklogDetail.SortOrder) AS SortOrder ,
            dbo.WorkOrder.RaisedDateTime ,
            dbo.WorkOrder.AssetID ,
            dbo.vwScheduleWorkOrderBacklogDetail.WorkOrderStatusNumber ,
            MAX(dbo.vwScheduleWorkOrderBacklogDetail.UsedScheduleDefaultDuration) AS UsedScheduleDefaultDuration ,
            dbo.WorkOrder.IsContractorWorkOrder
    FROM    dbo.vwScheduleWorkOrderBacklogDetail
            INNER JOIN dbo.WorkOrder ON dbo.vwScheduleWorkOrderBacklogDetail.WorkOrderID = dbo.WorkOrder.WorkOrderID
    GROUP BY dbo.WorkOrder.WorkOrderID ,
            dbo.WorkOrder.WorkOrderNumber ,
            dbo.WorkOrder.WorkOrderDescription ,
            dbo.vwScheduleWorkOrderBacklogDetail.SettingsRegionID ,
            dbo.WorkOrder.PriorityID ,
            dbo.WorkOrder.DepartmentID ,
            dbo.WorkOrder.JobTypeID ,
            dbo.WorkOrder.RaisedDateTime ,
            dbo.WorkOrder.AssetID ,
            dbo.vwScheduleWorkOrderBacklogDetail.WorkOrderStatusNumber ,
            dbo.WorkOrder.IsContractorWorkOrder
    ORDER BY dbo.WorkOrder.WorkOrderNumber
GO

IF OBJECT_ID(N'vwStandardJobListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwStandardJobListing]
GO
CREATE VIEW dbo.vwStandardJobListing
AS
SELECT     dbo.PreventativeMaintenanceAsset.PreventativeMaintenanceAssetID, dbo.PreventativeMaintenance.PreventativeMaintenanceID, 
                      dbo.PreventativeMaintenance.PreventativeMaintenanceNumber, dbo.Asset.AssetNumber, dbo.PreventativeMaintenance.PreventativeMaintenanceDescription, 
                      dbo.AssetType.AssetTypeName, dbo.Manufacturer.ManufacturerName, dbo.ModelNumber.ModelNumberName, dbo.Department.DepartmentName, 
                      dbo.PreventativeMaintenance.IsInspection, dbo.Priority.PriorityDescription, dbo.PreventativeMaintenance.EstimatedDurationHours, 
                      dbo.PreventativeMaintenance.UserDefinedTextBox, dbo.ComponentCode.ComponentCodeName, dbo.JobType.JobTypeName, 
                      dbo.PreventativeMaintenanceAsset.AssetID, dbo.PreventativeMaintenance.DepartmentID, 
                      dbo.GetPreventativeMaintenanceRegionIDs(dbo.PreventativeMaintenance.PreventativeMaintenanceID) AS RegionIDs, dbo.PreventativeMaintenance.IsStandard, 
                      dbo.PreventativeMaintenanceAsset.IsInUse, '(' + CONVERT(nvarchar(MAX), dbo.PreventativeMaintenanceAsset.AssetID) + ')' AS AssetIDForIncludeChildren
FROM         dbo.PreventativeMaintenance INNER JOIN
                      dbo.PreventativeMaintenanceAsset ON 
                      dbo.PreventativeMaintenance.PreventativeMaintenanceID = dbo.PreventativeMaintenanceAsset.PreventativeMaintenanceID INNER JOIN
                      dbo.Asset ON dbo.PreventativeMaintenanceAsset.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN
                      dbo.JobType ON dbo.PreventativeMaintenance.JobTypeID = dbo.JobType.JobTypeID LEFT OUTER JOIN
                      dbo.ComponentCode ON dbo.PreventativeMaintenance.ComponentCodeID = dbo.ComponentCode.ComponentCodeID LEFT OUTER JOIN
                      dbo.Priority ON dbo.PreventativeMaintenance.PriorityID = dbo.Priority.PriorityID LEFT OUTER JOIN
                      dbo.Department ON dbo.PreventativeMaintenance.DepartmentID = dbo.Department.DepartmentID LEFT OUTER JOIN
                      dbo.ModelNumber ON dbo.PreventativeMaintenance.ModelNumberID = dbo.ModelNumber.ModelNumberID LEFT OUTER JOIN
                      dbo.Manufacturer ON dbo.PreventativeMaintenance.ManufacturerID = dbo.Manufacturer.ManufacturerID LEFT OUTER JOIN
                      dbo.AssetType ON dbo.PreventativeMaintenance.AssetTypeID = dbo.AssetType.AssetTypeID
WHERE     (dbo.PreventativeMaintenance.IsStandard = 1) AND (dbo.PreventativeMaintenanceAsset.IsInUse = 1)
GO

IF OBJECT_ID(N'vwStocktakeListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwStocktakeListing]
GO
CREATE VIEW dbo.vwStocktakeListing
AS
SELECT     dbo.Stocktake.StocktakeID, dbo.Stocktake.StocktakeNumber, dbo.Stocktake.StocktakeDescription, dbo.Stocktake.DueDateTime, dbo.Stocktake.ProcessedDateTime, 
                      dbo.Stocktake.IsProcessed, dbo.Department.DepartmentName, dbo.vwContactFullName.FullName AS EnteredBy, vwContactFullName_1.FullName AS ProcessedBy, 
                      dbo.Stocktake.DepartmentID, dbo.Stocktake.EnteredByContactID, dbo.Stocktake.ProcessedByContactID, dbo.GetStocktakeBinLocationIDs(dbo.Stocktake.StocktakeID) 
                      AS BinLocationIDs, dbo.GetStocktakeRegionIDs(dbo.Stocktake.StocktakeID) AS RegionIDs, dbo.GetStocktakeOutstandingInfo(StocktakeID) AS OutstandingInfo
FROM         dbo.Stocktake LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_1 ON dbo.Stocktake.ProcessedByContactID = vwContactFullName_1.ContactID LEFT OUTER JOIN
                      dbo.vwContactFullName ON dbo.Stocktake.EnteredByContactID = dbo.vwContactFullName.ContactID LEFT OUTER JOIN
                      dbo.Department ON dbo.Stocktake.DepartmentID = dbo.Department.DepartmentID
GO

IF OBJECT_ID(N'vwSupplierStockParts', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwSupplierStockParts]
GO
CREATE VIEW dbo.vwSupplierStockParts
AS
SELECT     dbo.CatalogueSupplier.SupplierContactID, dbo.CatalogueSupplier.CatalogueSupplierID, dbo.Catalogue.CatalogueID, dbo.Asset.AssetID, dbo.Asset.StoreID, 
                      dbo.Asset.BinLocationID, dbo.BinLocation.BinLocationName, dbo.Store.StoreName, dbo.CatalogueSupplier.SupplierStockNumber, dbo.Catalogue.IsCatalogued, Catalogue.IsStocked,
                      dbo.Catalogue.CatalogueNumber, dbo.Catalogue.CatalogueDescription, dbo.StockClass.StockClassName, dbo.UOM.UOMName, dbo.Asset.UnitPrice, 
                      dbo.CatalogueSupplier.ExpectedPurchasePrice, dbo.Asset.MaximumQuantity, dbo.Asset.MinimumQuantity, dbo.CatalogueGroup.CatalogueGroupName, 
                      dbo.CatalogueClass.CatalogueClassName, dbo.INC.INCName, dbo.CatalogueSupplier.OrderQuantity, dbo.CatalogueSupplier.UOMID, dbo.Asset.TaxID, 
                      dbo.Tax.TaxPercentage, dbo.CatalogueSupplier.IsActive, dbo.Tax.TaxName, dbo.CurrencyType.CurrencyTypeCode, dbo.GetStoreRegionIDs(dbo.Store.StoreID) 
                      AS RegionIDs
FROM         dbo.StockClass RIGHT OUTER JOIN
                      dbo.UOM RIGHT OUTER JOIN
                      dbo.INC RIGHT OUTER JOIN
                      dbo.CurrencyType RIGHT OUTER JOIN
                      dbo.Contact ON dbo.CurrencyType.CurrencyTypeID = dbo.Contact.CurrencyTypeID RIGHT OUTER JOIN
                      dbo.CatalogueSupplier INNER JOIN
                      dbo.Catalogue ON dbo.CatalogueSupplier.CatalogueID = dbo.Catalogue.CatalogueID INNER JOIN
                      dbo.Asset ON dbo.Catalogue.CatalogueID = dbo.Asset.CatalogueID LEFT OUTER JOIN
                      dbo.Tax ON dbo.Asset.TaxID = dbo.Tax.TaxID LEFT OUTER JOIN
                      dbo.BinLocation ON dbo.Asset.BinLocationID = dbo.BinLocation.BinLocationID LEFT OUTER JOIN
                      dbo.Store ON dbo.Asset.StoreID = dbo.Store.StoreID ON dbo.Contact.ContactID = dbo.CatalogueSupplier.SupplierContactID ON 
                      dbo.INC.INCID = dbo.Catalogue.INCID LEFT OUTER JOIN
                      dbo.CatalogueGroup ON dbo.Catalogue.CatalogueGroupID = dbo.CatalogueGroup.CatalogueGroupID LEFT OUTER JOIN
                      dbo.CatalogueClass ON dbo.Catalogue.CatalogueClassID = dbo.CatalogueClass.CatalogueClassID ON dbo.UOM.UOMID = dbo.Catalogue.UOMID ON 
                      dbo.StockClass.StockClassID = dbo.Catalogue.StockClassID
GO

IF OBJECT_ID(N'vwSynchronizationLogList', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwSynchronizationLogList]
GO
CREATE VIEW dbo.vwSynchronizationLogList
AS
SELECT     dbo.SynchronizationLog.SynchronizationLogID, dbo.vwContactFullName.FullName, dbo.SynchronizationLog.SynchronizationStartDateTime, 
                      dbo.SynchronizationLog.SynchronizationFinishDateTime, dbo.GetSyncLogEntries(dbo.SynchronizationLog.SynchronizationLogID) AS LogEntries
FROM         dbo.SynchronizationLog LEFT OUTER JOIN
                      dbo.vwContactFullName ON dbo.SynchronizationLog.SynchronizationContactID = dbo.vwContactFullName.ContactID
GO

IF OBJECT_ID(N'vwTradesContactUnion', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwTradesContactUnion]
GO
CREATE VIEW [dbo].[vwTradesContactUnion]
AS
SELECT     0 AS ContactTradeCodeID, TradeCodeID, NULL AS ContactID, TradeCodeName AS TradeName, CAST(1 AS Bit) AS IsTradeCode, IsActive, '' AS RegionIDs
FROM         dbo.TradeCode
UNION
SELECT     dbo.ContactTradeCode.ContactTradeCodeID, dbo.ContactTradeCode.TradeCodeID, dbo.ContactTradeCode.ContactID, 
                      dbo.TradeCode.TradeCodeName + ' - ' + dbo.vwContactFullName.FullName AS TradeName, CAST(0 AS Bit) AS IsTradeCode, dbo.ContactTradeCode.IsActive,
					  dbo.GetTradeContactRegionIDs(ContactTradeCode.ContactTradeCodeID) AS RegionIDs
FROM         dbo.ContactTradeCode LEFT OUTER JOIN
                      dbo.TradeCode ON dbo.ContactTradeCode.TradeCodeID = dbo.TradeCode.TradeCodeID LEFT OUTER JOIN
                      dbo.vwContactFullName ON dbo.ContactTradeCode.ContactID = dbo.vwContactFullName.ContactID
GO

IF OBJECT_ID(N'vwUMSCreateInvoices', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwUMSCreateInvoices]
GO
CREATE VIEW [dbo].[vwUMSCreateInvoices]
AS
SELECT vwWorkOrderListing.WorkOrderID, 
	vwWorkOrderListing.WorkOrderNumber,
	dbo.vwWorkOrderListing.AssetID,
	AssetNumber, 
	AssetDescription, 
	FullName AS CustomerName,
	ISNULL(vwWorkOrderListing.WorkOrderHistoryDescription, vwWorkOrderListing.WorkOrderDescription) AS Description, 
	vwWorkOrderListing.FinishedDateTime, 
	vwWorkOrderListing.DepartmentName, 
	vwWorkOrderListing.ActualMaterialCost, 
	dbo.GetCustomFieldValue('AllocatedTo', 'WorkOrder', vwWorkOrderListing.WorkOrderID) AS AllocatedTo,
	PriorityDescription,
	CAST(CASE WHEN dbo.GetCustomFieldValue('UMSApproved', 'WorkOrder', vwWorkOrderListing.WorkOrderID) = 'True' THEN 1 ELSE 0 END AS BIT) AS UMSApproved,
	CAST(CASE WHEN dbo.GetCustomFieldValue('PTVApproved', 'WorkOrder', vwWorkOrderListing.WorkOrderID) = 'True' THEN 1 ELSE 0 END AS BIT) AS PTVApproved
FROM dbo.vwWorkOrderListing
	INNER JOIN dbo.WorkOrder ON dbo.vwWorkOrderListing.WorkOrderID = dbo.WorkOrder.WorkOrderID
	LEFT OUTER JOIN dbo.vwContactFullName ON WorkOrder.CustomerContactID = vwContactFullName.ContactID
WHERE IsQuotedAmountInvoiced = 0 
AND (dbo.GetCustomFieldValue('UMSApproved', 'WorkOrder', vwWorkOrderListing.WorkOrderID) = 'True' AND dbo.GetCustomFieldValue('PTVApproved', 'WorkOrder', vwWorkOrderListing.WorkOrderID) = 'True')
AND CustomerContactID IS NOT NULL
GO

IF OBJECT_ID(N'vwWorkOrderAuditListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwWorkOrderAuditListing]
GO
CREATE VIEW dbo.vwWorkOrderAuditListing
AS
SELECT        dbo.WorkOrderInspectionAsset.WorkOrderInspectionAssetID, dbo.WorkOrderInspectionAsset.WorkOrderID, dbo.WorkOrderInspectionAsset.SequenceNumber, dbo.Asset.AssetNumber, dbo.Asset.AssetDescription, 
                         dbo.WorkOrderInspectionAsset.ApprovedDateTime, dbo.WorkOrderInspectionAsset.InspectedDateTime, dbo.GetHasWorkOrderAssetGotException(dbo.WorkOrderInspectionAsset.WorkOrderInspectionAssetID) 
                         AS ExceptionRecorded, CAST(CASE WHEN WorkOrderInspectionAsset.InspectedByContactID IS NOT NULL THEN 0 ELSE 1 END AS bit) AS NotInspected, 
                         CASE WHEN WorkOrderInspectionAsset.InspectedByContactID IS NOT NULL AND ApprovedByContactID IS NULL THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END AS InspectedNotApproved, dbo.Asset.SerialNumber,
                          dbo.Asset.BarcodeNumber, dbo.WorkOrderInspectionAsset.Latitude, dbo.WorkOrderInspectionAsset.Longitude, dbo.vwContactFullName.FullName AS InspectedBy, 
                         vwContactFullName_1.FullName AS ApprovedBy, dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderDescription, ISNULL(CONVERT(VARCHAR(11), dbo.WorkOrderInspectionAsset.InspectedDateTime, 
                         103), '') AS InspectedDateDisplay, ISNULL(CONVERT(VARCHAR(11), dbo.WorkOrderInspectionAsset.ApprovedDateTime, 103), '') AS ApprovedDateDisplay, dbo.WorkOrderInspectionAsset.AssetID
FROM            dbo.WorkOrderInspectionAsset INNER JOIN
                         dbo.Asset ON dbo.WorkOrderInspectionAsset.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN
                         dbo.WorkOrder ON dbo.WorkOrderInspectionAsset.WorkOrderID = dbo.WorkOrder.WorkOrderID LEFT OUTER JOIN
                         dbo.vwContactFullName AS vwContactFullName_1 ON dbo.WorkOrderInspectionAsset.ApprovedByContactID = vwContactFullName_1.ContactID LEFT OUTER JOIN
                         dbo.vwContactFullName ON dbo.WorkOrderInspectionAsset.InspectedByContactID = dbo.vwContactFullName.ContactID
GO

IF OBJECT_ID(N'vwWorkOrderContractorListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwWorkOrderContractorListing]
GO
CREATE VIEW dbo.vwWorkOrderContractorListing 
AS 
SELECT        dbo.Contact.FirstName + ' ' + ISNULL(dbo.Contact.LastName, '') AS Contractor, dbo.PurchaseOrder.PurchaseOrderNumber, dbo.ContractorInvoice.ContractorInvoiceNumber AS InvoiceNumber,  
                         SUM(CAST(ISNULL(dbo.vwWorkOrderContractorPurchaseOrderTotalsForLines.TaxAmount, 0) + ISNULL(dbo.vwWorkOrderContractorPurchaseOrderTotalsForLines.TotalExcludingTax, 0) AS MONEY)) AS POValue,  
                         SUM(CAST((dbo.ContractorInvoiceLine.Quantity * dbo.ContractorInvoiceLine.UnitPrice) * (1 + dbo.ContractorInvoiceLine.TaxPercentage) AS MONEY)) AS InvoiceValue,  
                         SUM(CAST(CASE WHEN ((dbo.ContractorInvoiceLine.Quantity * dbo.ContractorInvoiceLine.UnitPrice) * (1 + dbo.ContractorInvoiceLine.TaxPercentage))  
                         - (dbo.vwWorkOrderContractorPurchaseOrderTotalsForLines.TaxAmount + dbo.vwWorkOrderContractorPurchaseOrderTotalsForLines.TotalExcludingTax) IS NOT NULL  
                         THEN ((dbo.ContractorInvoiceLine.Quantity * dbo.ContractorInvoiceLine.UnitPrice) * (1 + dbo.ContractorInvoiceLine.TaxPercentage))  
                         - (dbo.vwWorkOrderContractorPurchaseOrderTotalsForLines.TaxAmount + dbo.vwWorkOrderContractorPurchaseOrderTotalsForLines.TotalExcludingTax) ELSE NULL END AS MONEY)) AS Difference,  
                         dbo.WorkOrder.WorkOrderHistoryDescription AS HistoryDescription, dbo.WorkOrder.CompletedByContractorDateTime AS CompletedDate, dbo.WorkOrder.WorkOrderID, Asset_1.AssetNumber,  
                         dbo.WorkOrder.AssetID, dbo.WorkOrderStatus.WorkOrderStatusDescription, dbo.Priority.PriorityDescription, dbo.JobType.JobTypeName, dbo.AccountCode.AccountCodeName, dbo.Department.DepartmentName,  
                         dbo.PreventativeMaintenance.PreventativeMaintenanceNumber, WorkOrder_1.WorkOrderNumber AS GroupWorkOrderNumber, dbo.ComponentCode.ComponentCodeName,  
                         dbo.WorkOrderStatus.WorkOrderStatusNumber, dbo.WorkOrder.OverallDurationHours, dbo.WorkOrder.EstimatedLabourCost, dbo.WorkOrder.EstimatedMaterialCost, dbo.WorkOrder.EstimatedOtherCost,  
                         dbo.WorkOrder.ActualLabourCost, dbo.WorkOrder.ActualMaterialCost, dbo.WorkOrder.ActualOtherCost, Asset_1.AssetDescription, CASE WHEN (DATALENGTH(dbo.WorkOrder.WorkOrderDescription) / 2)  
                         > dbo.GetListingDescriptionShowLength() THEN SUBSTRING(dbo.WorkOrder.WorkOrderDescription, 0, dbo.GetListingDescriptionShowLength())  
                         + ' ...' ELSE dbo.WorkOrder.WorkOrderDescription END AS WorkOrderDescription, CASE WHEN (DATALENGTH(dbo.WorkOrder.WorkOrderHistoryDescription) / 2) > dbo.GetListingDescriptionShowLength()  
                         THEN SUBSTRING(dbo.WorkOrder.WorkOrderHistoryDescription, 0, dbo.GetListingDescriptionShowLength()) + ' ...' ELSE dbo.WorkOrder.WorkOrderHistoryDescription END AS WorkOrderHistoryDescription,  
                         dbo.Risk.RiskName, SourceRisk.Score,  
                         CASE WHEN score >= ExtremeLower THEN 'Extreme' ELSE CASE WHEN score >= HighLower THEN 'High' ELSE CASE WHEN score >= MediumLower THEN 'Medium' ELSE '' END END END AS RiskRating,  
                         CASE WHEN (DATALENGTH(dbo.WorkOrderRisk.HazardDescription) / 2) > 50 THEN SUBSTRING(dbo.WorkOrderRisk.HazardDescription, 0, 50)  
                         + ' ...' ELSE dbo.WorkOrderRisk.HazardDescription END AS HazardDescription, ISNULL(DT.DocumentCount, 0) AS DocumentCount, dbo.Asset.AssetNumber AS ParentAssetNumber,  
                         dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderSuffix, dbo.WorkOrder.DueStartDateTime, dbo.WorkOrder.DueFinishDateTime, dbo.WorkOrder.StartedDateTime, dbo.WorkOrder.ReferenceNumber,  
                         dbo.WorkOrder.IsPrinted, dbo.WorkOrder.RaisedDateTime, dbo.WorkOrder.GroupWorkOrderID, dbo.WorkOrder.FinishedDateTime, dbo.WorkOrder.DownTimeHours, dbo.WorkOrder.RepairTimeHours,  
                         ISNULL(dbo.PreventativeMaintenance.IsInspection, 0) AS IsInspection, dbo.WorkOrder.IsGroupWorkOrder, '(' + CONVERT(NVARCHAR(MAX), dbo.WorkOrder.WorkOrderID) + ')' AS WorkOrderIDForFilter,  
                         dbo.ContractorInvoice.ContractorInvoiceID AS ContractorInvID, ISNULL(dbo.ContractorInvoice.ApprovalStatus, 'Pending') AS ContractorInvoiceApprovalStatus,  
                         CAST(CASE WHEN PreventativeMaintenance.IsFixed = 1 AND PreventativeMaintenance.IsStandard = 0 THEN 1 ELSE 0 END AS BIT) AS HasFixedPM, dbo.WorkOrder.IsCompletedByContractor,  
                         dbo.CurrencyType.CurrencyTypeCode, dbo.CurrencyType.DecimalPlaces, dbo.WorkOrder.IsWorkOrderSentToContractor AS WOHasBeenSent, dbo.WorkOrder.ContractorQuoteAmount,  
                         dbo.WorkOrder.ContractorContactID, dbo.WorkOrder.ContractorContactContactID, dbo.WorkOrder.AccountCodeID, dbo.WorkOrder.ContractorQuoteNumber, dbo.WorkOrder.WorkOrderStatusID 
FROM            dbo.ContractorInvoiceLine RIGHT OUTER JOIN 
                         dbo.vwWorkOrderContractorPurchaseOrderTotalsForLines RIGHT OUTER JOIN 
                             (SELECT        EntityID, COUNT(*) AS DocumentCount 
                               FROM            dbo.[Document] 
                               WHERE        (EntityName = 'WorkOrder') 
                               GROUP BY EntityID) AS DT RIGHT OUTER JOIN 
                         dbo.JobType RIGHT OUTER JOIN 
                         dbo.Department RIGHT OUTER JOIN 
                         dbo.PurchaseOrder RIGHT OUTER JOIN 
                         dbo.WorkOrder LEFT OUTER JOIN 
                         dbo.ContractorInvoice ON dbo.WorkOrder.WorkOrderID = dbo.ContractorInvoice.WorkOrderID ON dbo.PurchaseOrder.PurchaseOrderID = dbo.WorkOrder.ContractorPurchaseOrderID LEFT OUTER JOIN 
                         dbo.CurrencyType RIGHT OUTER JOIN 
                         dbo.Contact ON dbo.CurrencyType.CurrencyTypeID = dbo.Contact.CurrencyTypeID ON dbo.WorkOrder.ContractorContactID = dbo.Contact.ContactID LEFT OUTER JOIN 
                         dbo.vwWorkOrderTradeHours ON dbo.WorkOrder.WorkOrderID = dbo.vwWorkOrderTradeHours.WorkOrderID LEFT OUTER JOIN 
                         dbo.ComponentCode ON dbo.WorkOrder.ComponentCodeID = dbo.ComponentCode.ComponentCodeID LEFT OUTER JOIN 
                         dbo.WorkOrder AS WorkOrder_1 ON dbo.WorkOrder.GroupWorkOrderID = WorkOrder_1.WorkOrderID LEFT OUTER JOIN 
                         dbo.PreventativeMaintenance ON dbo.WorkOrder.PreventativeMaintenanceID = dbo.PreventativeMaintenance.PreventativeMaintenanceID ON  
                         dbo.Department.DepartmentID = dbo.WorkOrder.DepartmentID LEFT OUTER JOIN 
                         dbo.AccountCode ON dbo.WorkOrder.AccountCodeID = dbo.AccountCode.AccountCodeID ON dbo.JobType.JobTypeID = dbo.WorkOrder.JobTypeID LEFT OUTER JOIN 
                         dbo.Priority ON dbo.WorkOrder.PriorityID = dbo.Priority.PriorityID LEFT OUTER JOIN 
                         dbo.WorkOrderStatus ON dbo.WorkOrder.WorkOrderStatusID = dbo.WorkOrderStatus.WorkOrderStatusID LEFT OUTER JOIN 
                         dbo.Asset RIGHT OUTER JOIN 
                         dbo.Asset AS Asset_1 ON dbo.Asset.AssetID = Asset_1.ParentAssetID ON dbo.WorkOrder.AssetID = Asset_1.AssetID LEFT OUTER JOIN 
                         dbo.Risk INNER JOIN 
                         dbo.WorkOrderRisk INNER JOIN 
                             (SELECT        MaxScore.WorkOrderID, MaxScore.Score, MAX(WorkOrderRisk_1.WorkOrderRiskID) AS WorkOrderRiskID 
                               FROM            (SELECT        WorkOrderRisk_2.WorkOrderID, MAX(dbo.RiskScore.Score) AS Score 
                                                         FROM            dbo.WorkOrderRisk AS WorkOrderRisk_2 LEFT OUTER JOIN 
                                                                                   dbo.RiskScore ON WorkOrderRisk_2.RiskScoreID = dbo.RiskScore.RiskScoreID 
                                                         GROUP BY WorkOrderRisk_2.WorkOrderID) AS MaxScore INNER JOIN 
                                                         dbo.WorkOrderRisk AS WorkOrderRisk_1 ON MaxScore.WorkOrderID = WorkOrderRisk_1.WorkOrderID INNER JOIN 
                                                         dbo.RiskScore AS RiskScore_1 ON WorkOrderRisk_1.RiskScoreID = RiskScore_1.RiskScoreID AND MaxScore.Score = RiskScore_1.Score 
                               GROUP BY MaxScore.WorkOrderID, MaxScore.Score) AS SourceRisk ON dbo.WorkOrderRisk.WorkOrderRiskID = SourceRisk.WorkOrderRiskID ON dbo.Risk.RiskID = dbo.WorkOrderRisk.RiskTypeID ON  
                         dbo.WorkOrder.WorkOrderID = SourceRisk.WorkOrderID ON DT.EntityID = dbo.WorkOrder.WorkOrderID ON  
                         dbo.vwWorkOrderContractorPurchaseOrderTotalsForLines.WorkOrderID = dbo.WorkOrder.WorkOrderID ON dbo.ContractorInvoiceLine.ContractorInvoiceID = dbo.ContractorInvoice.ContractorInvoiceID CROSS JOIN 
                         dbo.RiskRating 
WHERE        (dbo.WorkOrder.IsContractorWorkOrder = 1) 
GROUP BY dbo.Contact.FirstName + ' ' + ISNULL(dbo.Contact.LastName, ''), dbo.PurchaseOrder.PurchaseOrderNumber, dbo.ContractorInvoice.ContractorInvoiceNumber, dbo.WorkOrder.WorkOrderHistoryDescription,  
                         dbo.WorkOrder.CompletedByContractorDateTime, dbo.WorkOrder.WorkOrderID, Asset_1.AssetNumber, dbo.WorkOrder.AssetID, dbo.WorkOrderStatus.WorkOrderStatusDescription, dbo.Priority.PriorityDescription,  
                         dbo.JobType.JobTypeName, dbo.AccountCode.AccountCodeName, dbo.Department.DepartmentName, dbo.PreventativeMaintenance.PreventativeMaintenanceNumber, WorkOrder_1.WorkOrderNumber,  
                         dbo.ComponentCode.ComponentCodeName, dbo.WorkOrderStatus.WorkOrderStatusNumber, dbo.WorkOrder.OverallDurationHours, dbo.WorkOrder.EstimatedLabourCost, dbo.WorkOrder.EstimatedMaterialCost,  
                         dbo.WorkOrder.EstimatedOtherCost, dbo.WorkOrder.ActualLabourCost, dbo.WorkOrder.ActualMaterialCost, dbo.WorkOrder.ActualOtherCost, Asset_1.AssetDescription, dbo.Risk.RiskName, SourceRisk.Score,  
                         ISNULL(DT.DocumentCount, 0), dbo.Asset.AssetNumber, dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderSuffix, dbo.WorkOrder.DueStartDateTime, dbo.WorkOrder.DueFinishDateTime,  
                         dbo.WorkOrder.StartedDateTime, dbo.WorkOrder.ReferenceNumber, dbo.WorkOrder.RaisedDateTime, dbo.WorkOrder.GroupWorkOrderID, dbo.WorkOrder.FinishedDateTime, dbo.WorkOrder.DownTimeHours,  
                         dbo.WorkOrder.RepairTimeHours, '(' + CONVERT(NVARCHAR(MAX), dbo.WorkOrder.WorkOrderID) + ')', dbo.ContractorInvoice.ContractorInvoiceID, ISNULL(dbo.ContractorInvoice.ApprovalStatus, 'Pending'),  
                         dbo.CurrencyType.CurrencyTypeCode, dbo.CurrencyType.DecimalPlaces,  
                         CASE WHEN score >= ExtremeLower THEN 'Extreme' ELSE CASE WHEN score >= HighLower THEN 'High' ELSE CASE WHEN score >= MediumLower THEN 'Medium' ELSE '' END END END,  
                         CASE WHEN (DATALENGTH(dbo.WorkOrderRisk.HazardDescription) / 2) > 50 THEN SUBSTRING(dbo.WorkOrderRisk.HazardDescription, 0, 50) + ' ...' ELSE dbo.WorkOrderRisk.HazardDescription END,  
                         dbo.WorkOrder.IsPrinted, ISNULL(dbo.PreventativeMaintenance.IsInspection, 0), dbo.WorkOrder.IsGroupWorkOrder, CAST(CASE WHEN PreventativeMaintenance.IsFixed = 1 AND  
                         PreventativeMaintenance.IsStandard = 0 THEN 1 ELSE 0 END AS BIT), dbo.WorkOrder.IsCompletedByContractor, CASE WHEN (DATALENGTH(dbo.WorkOrder.WorkOrderDescription) / 2)  
                         > dbo.GetListingDescriptionShowLength() THEN SUBSTRING(dbo.WorkOrder.WorkOrderDescription, 0, dbo.GetListingDescriptionShowLength()) + ' ...' ELSE dbo.WorkOrder.WorkOrderDescription END,  
                         CASE WHEN (DATALENGTH(dbo.WorkOrder.WorkOrderHistoryDescription) / 2) > dbo.GetListingDescriptionShowLength() THEN SUBSTRING(dbo.WorkOrder.WorkOrderHistoryDescription, 0,  
                         dbo.GetListingDescriptionShowLength()) + ' ...' ELSE dbo.WorkOrder.WorkOrderHistoryDescription END, dbo.WorkOrder.IsWorkOrderSentToContractor, dbo.WorkOrder.ContractorQuoteAmount,  
                         dbo.WorkOrder.ContractorContactID, dbo.WorkOrder.ContractorContactContactID, dbo.WorkOrder.AccountCodeID, dbo.WorkOrder.ContractorQuoteNumber, dbo.WorkOrder.WorkOrderStatusID
GO

IF OBJECT_ID(N'vwWorkOrderHelper', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwWorkOrderHelper]
GO
CREATE VIEW dbo.vwWorkOrderHelper
AS
SELECT     dbo.WorkOrder.WorkOrderID, dbo.Asset.AssetNumber, dbo.Asset.AssetDescription, Asset_1.AssetNumber AS ParentAssetNumber, 
                      dbo.WorkOrderStatus.WorkOrderStatusNumber, dbo.WorkOrderStatus.WorkOrderStatusDescription, dbo.WorkOrderStatus.WorkOrderStatusFunctionName, 
                      dbo.Priority.PriorityDescription, dbo.JobType.JobTypeName, dbo.Department.DepartmentName, dbo.AccountCode.AccountCodeName, 
                      dbo.ComponentCode.ComponentCodeName, dbo.Asset.RegistrationNumber, dbo.Asset.IsActive, WorkOrder_1.WorkOrderNumber AS GroupWorkOrderNumber, 
                      COUNT(WorkOrder_2.WorkOrderID) AS CountChildWorkOrders, dbo.GetWorkOrderRequestIDs(dbo.WorkOrder.WorkOrderID) AS RequestIDs, 
                      dbo.GetWorkOrderRequestNumbers(dbo.WorkOrder.WorkOrderID) AS RequestNumber, vwContactFullName_4.FullName AS CreatedByName, 
                      vwContactFullName_1.FullName AS CheckedInCustomerName, dbo.vwContactFullName.FullName AS ContractorContactName, 
                      vwContactFullName_5.FullName AS FreightContactName, vwContactFullName_2.FullName AS SentByContactName, 
                      vwContactFullName_3.FullName AS ReceivedByContactName, vwContactFullName_6.FullName AS CustomerName, 
                      dbo.PreventativeMaintenance.PreventativeMaintenanceNumber, dbo.FrequencyType.FrequencyTypeName, 
                      dbo.PreventativeMaintenanceAsset.LastDoneDateTime AS LastDonePMDateTime, dbo.PreventativeMaintenanceAsset.LastDoneReading AS LastDonePMReading, 
                      dbo.PreventativeMaintenance.IsInspection, dbo.vwAssetReadingsCurrent.Reading AS LastReading, 
                      dbo.vwAssetReadingsCurrent.ReadingDateTime AS LastReadingDateTime, dbo.Asset.FrequencyTypeID, 
                      ISNULL(dbo.vwWorkOrderTradeHours.SumOfActualTradeHours, 0) AS SumOfActualTradeHours, ISNULL(dbo.vwWorkOrderUnfinishedTaskCount.TaskCount, 0) 
                      AS UnfinishedTaskCount, dbo.vwAssetLastAssetMovement.CurrentAssetMovementID, ISNULL(dbo.vwAssetToDoListCount.ToDoListCount, 0) AS ToDoListCount
FROM         dbo.vwAssetToDoListCount RIGHT OUTER JOIN
                      dbo.WorkOrder ON dbo.vwAssetToDoListCount.AssetID = dbo.WorkOrder.AssetID LEFT OUTER JOIN
                      dbo.vwAssetLastAssetMovement ON dbo.WorkOrder.AssetID = dbo.vwAssetLastAssetMovement.AssetID LEFT OUTER JOIN
                      dbo.vwWorkOrderUnfinishedTaskCount ON dbo.WorkOrder.WorkOrderID = dbo.vwWorkOrderUnfinishedTaskCount.WorkOrderID LEFT OUTER JOIN
                      dbo.vwAssetReadingsCurrent ON dbo.WorkOrder.FrequencyTypeID = dbo.vwAssetReadingsCurrent.FrequencyTypeID AND 
                      dbo.WorkOrder.AssetID = dbo.vwAssetReadingsCurrent.AssetID LEFT OUTER JOIN
                      dbo.FrequencyType ON dbo.WorkOrder.FrequencyTypeID = dbo.FrequencyType.FrequencyTypeID LEFT OUTER JOIN
                      dbo.PreventativeMaintenance LEFT OUTER JOIN
                      dbo.PreventativeMaintenanceAsset ON dbo.PreventativeMaintenance.PreventativeMaintenanceID = dbo.PreventativeMaintenanceAsset.PreventativeMaintenanceID ON
                       dbo.WorkOrder.PreventativeMaintenanceID = dbo.PreventativeMaintenance.PreventativeMaintenanceID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_6 ON dbo.WorkOrder.CustomerContactID = vwContactFullName_6.ContactID LEFT OUTER JOIN
                      dbo.vwWorkOrderTradeHours ON dbo.WorkOrder.WorkOrderID = dbo.vwWorkOrderTradeHours.WorkOrderID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_3 ON dbo.WorkOrder.ReceivedByContactID = vwContactFullName_3.ContactID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_2 ON dbo.WorkOrder.SentByContactID = vwContactFullName_2.ContactID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_5 ON dbo.WorkOrder.FreightContactID = vwContactFullName_5.ContactID LEFT OUTER JOIN
                      dbo.vwContactFullName ON dbo.WorkOrder.ContractorContactID = dbo.vwContactFullName.ContactID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_1 ON dbo.WorkOrder.CheckedInCustomerContactID = vwContactFullName_1.ContactID LEFT OUTER JOIN
                      dbo.vwContactFullName AS vwContactFullName_4 ON dbo.WorkOrder.CreatedByContactID = vwContactFullName_4.ContactID LEFT OUTER JOIN
                      dbo.WorkOrder AS WorkOrder_2 ON dbo.WorkOrder.WorkOrderID = WorkOrder_2.GroupWorkOrderID LEFT OUTER JOIN
                      dbo.WorkOrder AS WorkOrder_1 ON dbo.WorkOrder.GroupWorkOrderID = WorkOrder_1.WorkOrderID LEFT OUTER JOIN
                      dbo.ComponentCode ON dbo.WorkOrder.ComponentCodeID = dbo.ComponentCode.ComponentCodeID LEFT OUTER JOIN
                      dbo.AccountCode ON dbo.WorkOrder.AccountCodeID = dbo.AccountCode.AccountCodeID LEFT OUTER JOIN
                      dbo.Department ON dbo.WorkOrder.DepartmentID = dbo.Department.DepartmentID LEFT OUTER JOIN
                      dbo.JobType ON dbo.WorkOrder.JobTypeID = dbo.JobType.JobTypeID LEFT OUTER JOIN
                      dbo.Priority ON dbo.WorkOrder.PriorityID = dbo.Priority.PriorityID LEFT OUTER JOIN
                      dbo.WorkOrderStatus ON dbo.WorkOrder.WorkOrderStatusID = dbo.WorkOrderStatus.WorkOrderStatusID LEFT OUTER JOIN
                      dbo.Asset AS Asset_1 RIGHT OUTER JOIN
                      dbo.Asset ON Asset_1.AssetID = dbo.Asset.ParentAssetID ON dbo.WorkOrder.AssetID = dbo.Asset.AssetID
WHERE     (dbo.PreventativeMaintenanceAsset.AssetID = dbo.WorkOrder.AssetID OR
                      dbo.PreventativeMaintenanceAsset.AssetID IS NULL) AND (dbo.vwAssetReadingsCurrent.IsLast = 'YES' OR
                      dbo.vwAssetReadingsCurrent.IsLast IS NULL)
GROUP BY dbo.WorkOrder.WorkOrderID, dbo.Asset.AssetNumber, dbo.Asset.AssetDescription, Asset_1.AssetNumber, dbo.WorkOrderStatus.WorkOrderStatusNumber, 
                      dbo.WorkOrderStatus.WorkOrderStatusDescription, dbo.WorkOrderStatus.WorkOrderStatusFunctionName, dbo.Priority.PriorityDescription, 
                      dbo.JobType.JobTypeName, dbo.Department.DepartmentName, dbo.AccountCode.AccountCodeName, dbo.ComponentCode.ComponentCodeName, 
                      dbo.Asset.RegistrationNumber, WorkOrder_1.WorkOrderNumber, dbo.Asset.IsActive, dbo.GetWorkOrderRequestIDs(dbo.WorkOrder.WorkOrderID), 
                      dbo.GetWorkOrderRequestNumbers(dbo.WorkOrder.WorkOrderID), vwContactFullName_4.FullName, vwContactFullName_1.FullName, 
                      dbo.vwContactFullName.FullName, vwContactFullName_5.FullName, vwContactFullName_2.FullName, vwContactFullName_3.FullName, 
                      vwContactFullName_6.FullName, dbo.PreventativeMaintenance.PreventativeMaintenanceNumber, dbo.FrequencyType.FrequencyTypeName, 
                      dbo.PreventativeMaintenanceAsset.LastDoneDateTime, dbo.PreventativeMaintenanceAsset.LastDoneReading, dbo.PreventativeMaintenance.IsInspection, 
                      dbo.vwAssetReadingsCurrent.Reading, dbo.vwAssetReadingsCurrent.ReadingDateTime, dbo.Asset.FrequencyTypeID, 
                      ISNULL(dbo.vwWorkOrderTradeHours.SumOfActualTradeHours, 0), ISNULL(dbo.vwWorkOrderUnfinishedTaskCount.TaskCount, 0), 
                      dbo.vwAssetLastAssetMovement.CurrentAssetMovementID, ISNULL(dbo.vwAssetToDoListCount.ToDoListCount, 0)
GO

IF OBJECT_ID(N'vwWorkOrderHistoryListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwWorkOrderHistoryListing]
GO
CREATE VIEW dbo.vwWorkOrderHistoryListing
AS
SELECT        TOP (100) PERCENT dbo.WorkOrder.WorkOrderID, dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderSuffix, dbo.Asset.AssetNumber, dbo.WorkOrderStatus.WorkOrderStatusNumber, 
                         dbo.WorkOrder.FinishedDateTime, dbo.AccountCode.AccountCodeName, GroupWorkOrder.WorkOrderNumber AS GroupWorkOrderNumber, GroupWorkOrder.WorkOrderSuffix AS GroupWorkOrderSuffix, 
                         dbo.RegionAsset.RegionID, dbo.ComponentCode.ComponentCodeName, dbo.WorkOrder.DownTimeHours, dbo.WorkOrder.RepairTimeHours, dbo.WorkOrder.ActualLabourCost, dbo.WorkOrder.ActualMaterialCost, 
                         dbo.WorkOrder.ActualOtherCost, dbo.Department.DepartmentName, dbo.WorkOrderStatus.WorkOrderStatusFunctionName, dbo.JobType.JobTypeName, dbo.JobType.JobTypeDescription, 
                         GroupWorkOrder.AssetID, GroupWorkOrder.GroupWorkOrderID, GroupWorkOrder.DueStartDateTime, GroupWorkOrder.StartedDateTime, GroupWorkOrder.PriorityID, GroupWorkOrder.WorkOrderStatusID, 
                         GroupWorkOrder.AccountCodeID, GroupWorkOrder.JobTypeID, GroupWorkOrder.DepartmentID, CASE WHEN (DATALENGTH(dbo.WorkOrder.WorkOrderHistoryDescription) / 2) 
                         > dbo.GetListingDescriptionShowLength() THEN SUBSTRING(dbo.WorkOrder.WorkOrderHistoryDescription, 0, dbo.GetListingDescriptionShowLength()) 
                         + ' ...' ELSE dbo.WorkOrder.WorkOrderHistoryDescription END AS WorkOrderHistoryDescription
FROM            dbo.WorkOrder INNER JOIN
                         dbo.Asset ON dbo.WorkOrder.AssetID = dbo.Asset.AssetID INNER JOIN
                         dbo.WorkOrderStatus ON dbo.WorkOrder.WorkOrderStatusID = dbo.WorkOrderStatus.WorkOrderStatusID INNER JOIN
                         dbo.RegionAsset ON dbo.Asset.AssetID = dbo.RegionAsset.AssetID LEFT OUTER JOIN
                         dbo.JobType ON dbo.WorkOrder.JobTypeID = dbo.JobType.JobTypeID LEFT OUTER JOIN
                         dbo.Department ON dbo.WorkOrder.DepartmentID = dbo.Department.DepartmentID LEFT OUTER JOIN
                         dbo.ComponentCode ON dbo.WorkOrder.ComponentCodeID = dbo.ComponentCode.ComponentCodeID LEFT OUTER JOIN
                         dbo.WorkOrder AS GroupWorkOrder ON dbo.WorkOrder.GroupWorkOrderID = GroupWorkOrder.WorkOrderID LEFT OUTER JOIN
                         dbo.AccountCode ON dbo.WorkOrder.AccountCodeID = dbo.AccountCode.AccountCodeID
GO

IF OBJECT_ID(N'vwWorkOrderListing', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwWorkOrderListing]
GO
CREATE VIEW dbo.vwWorkOrderListing
AS
SELECT        dbo.WorkOrder.WorkOrderID, Asset_1.AssetNumber, dbo.WorkOrder.AssetID, dbo.WorkOrderStatus.WorkOrderStatusDescription, dbo.Priority.PriorityDescription, dbo.Priority.PriorityNumber, 
                         dbo.JobType.JobTypeName, dbo.AccountCode.AccountCodeName, dbo.WorkOrder.AccountCodeID, dbo.Department.DepartmentName, dbo.PreventativeMaintenance.PreventativeMaintenanceNumber, 
                         WorkOrder_1.WorkOrderNumber AS GroupWorkOrderNumber, dbo.ComponentCode.ComponentCodeName, dbo.WorkOrder.ComponentCodeID, dbo.WorkOrderStatus.WorkOrderStatusNumber, 
                         dbo.WorkOrderStatus.WorkOrderStatusID, dbo.WorkOrder.OverallDurationHours, dbo.WorkOrder.EstimatedLabourCost, dbo.WorkOrder.EstimatedMaterialCost, dbo.WorkOrder.EstimatedOtherCost, 
                         dbo.WorkOrder.ActualLabourCost, dbo.WorkOrder.ActualMaterialCost, dbo.WorkOrder.ActualOtherCost, Asset_1.AssetDescription, CASE WHEN (DATALENGTH(dbo.WorkOrder.WorkOrderDescription) / 2) 
                         > dbo.GetListingDescriptionShowLength() THEN SUBSTRING(dbo.WorkOrder.WorkOrderDescription, 0, dbo.GetListingDescriptionShowLength()) 
                         + ' ...' ELSE dbo.WorkOrder.WorkOrderDescription END AS WorkOrderDescription, CASE WHEN (DATALENGTH(dbo.WorkOrder.WorkOrderHistoryDescription) / 2) > dbo.GetListingDescriptionShowLength() 
                         THEN SUBSTRING(dbo.WorkOrder.WorkOrderHistoryDescription, 0, dbo.GetListingDescriptionShowLength()) + ' ...' ELSE dbo.WorkOrder.WorkOrderHistoryDescription END AS WorkOrderHistoryDescription, 
                         dbo.Risk.RiskName, SourceRisk.Score, 
                         CASE WHEN score >= ExtremeLower THEN 'Extreme' WHEN score >= HighLower THEN 'High' WHEN score >= MediumLower THEN 'Medium' WHEN Score >= LowLower THEN 'Low' ELSE '' END AS RiskRating, 
                         CASE WHEN (DATALENGTH(dbo.WorkOrderRisk.HazardDescription) / 2) > 50 THEN SUBSTRING(dbo.WorkOrderRisk.HazardDescription, 0, 50) 
                         + ' ...' ELSE dbo.WorkOrderRisk.HazardDescription END AS HazardDescription, ISNULL(DT.DocumentCount, 0) AS DocumentCount, dbo.Asset.AssetNumber AS ParentAssetNumber, 
                         dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderSuffix, dbo.WorkOrder.DueStartDateTime, dbo.WorkOrder.DueFinishDateTime, dbo.WorkOrder.StartedDateTime, dbo.WorkOrder.ReferenceNumber, 
                         dbo.WorkOrder.IsPrinted, dbo.WorkOrder.RaisedDateTime, dbo.WorkOrder.GroupWorkOrderID, dbo.WorkOrder.FinishedDateTime, dbo.WorkOrder.DownTimeHours, dbo.WorkOrder.RepairTimeHours, 
                         ISNULL(dbo.PreventativeMaintenance.IsInspection, 0) AS IsInspection, dbo.WorkOrder.IsGroupWorkOrder, '(' + CONVERT(nvarchar(MAX), dbo.WorkOrder.WorkOrderID) + ')' AS WorkOrderIDForFilter, 
                         dbo.WorkOrder.IsHistoryCreated, CAST(CASE WHEN PreventativeMaintenance.IsFixed = 0 AND PreventativeMaintenance.IsStandard = 0 THEN 1 ELSE 0 END AS bit) AS HasFixedPM, 
                         ISNULL(dbo.vwWorkOrderPermitCount.PermitCount, 0) AS PermitCount, ISNULL(dbo.vwWorkOrderPermitCountOutstanding.PermitCount, 0) AS PermitOutstandingCount, 
                         dbo.vwContactFullName.FullName AS ContractorName, dbo.WorkOrder.IsCompletedByContractor, dbo.WorkOrder.CompletedByContractorDateTime
FROM            dbo.AccountCode RIGHT OUTER JOIN
                         dbo.WorkOrder LEFT OUTER JOIN
                         dbo.vwContactFullName ON dbo.WorkOrder.ContractorContactID = dbo.vwContactFullName.ContactID LEFT OUTER JOIN
                         dbo.vwWorkOrderPermitCountOutstanding ON dbo.WorkOrder.WorkOrderID = dbo.vwWorkOrderPermitCountOutstanding.WorkOrderID LEFT OUTER JOIN
                         dbo.vwWorkOrderPermitCount ON dbo.WorkOrder.WorkOrderID = dbo.vwWorkOrderPermitCount.WorkOrderID LEFT OUTER JOIN
                         dbo.vwWorkOrderTradeHours ON dbo.WorkOrder.WorkOrderID = dbo.vwWorkOrderTradeHours.WorkOrderID LEFT OUTER JOIN
                         dbo.ComponentCode ON dbo.WorkOrder.ComponentCodeID = dbo.ComponentCode.ComponentCodeID LEFT OUTER JOIN
                         dbo.WorkOrder AS WorkOrder_1 ON dbo.WorkOrder.GroupWorkOrderID = WorkOrder_1.WorkOrderID LEFT OUTER JOIN
                         dbo.PreventativeMaintenance ON dbo.WorkOrder.PreventativeMaintenanceID = dbo.PreventativeMaintenance.PreventativeMaintenanceID LEFT OUTER JOIN
                         dbo.Department ON dbo.WorkOrder.DepartmentID = dbo.Department.DepartmentID ON dbo.AccountCode.AccountCodeID = dbo.WorkOrder.AccountCodeID LEFT OUTER JOIN
                         dbo.JobType ON dbo.WorkOrder.JobTypeID = dbo.JobType.JobTypeID LEFT OUTER JOIN
                         dbo.Priority ON dbo.WorkOrder.PriorityID = dbo.Priority.PriorityID LEFT OUTER JOIN
                         dbo.WorkOrderStatus ON dbo.WorkOrder.WorkOrderStatusID = dbo.WorkOrderStatus.WorkOrderStatusID LEFT OUTER JOIN
                         dbo.Asset RIGHT OUTER JOIN
                         dbo.Asset AS Asset_1 ON dbo.Asset.AssetID = Asset_1.ParentAssetID ON dbo.WorkOrder.AssetID = Asset_1.AssetID LEFT OUTER JOIN
                         dbo.Risk INNER JOIN
                         dbo.WorkOrderRisk INNER JOIN
                             (SELECT        MaxScore.WorkOrderID, MaxScore.Score, MAX(WorkOrderRisk_1.WorkOrderRiskID) AS WorkOrderRiskID
                               FROM            (SELECT        WorkOrderRisk_2.WorkOrderID, MAX(dbo.RiskScore.Score) AS Score
                                                         FROM            dbo.WorkOrderRisk AS WorkOrderRisk_2 LEFT OUTER JOIN
                                                                                   dbo.RiskScore ON WorkOrderRisk_2.RiskScoreID = dbo.RiskScore.RiskScoreID
                                                         GROUP BY WorkOrderRisk_2.WorkOrderID) AS MaxScore INNER JOIN
                                                         dbo.WorkOrderRisk AS WorkOrderRisk_1 ON MaxScore.WorkOrderID = WorkOrderRisk_1.WorkOrderID INNER JOIN
                                                         dbo.RiskScore AS RiskScore_1 ON WorkOrderRisk_1.RiskScoreID = RiskScore_1.RiskScoreID AND MaxScore.Score = RiskScore_1.Score
                               GROUP BY MaxScore.WorkOrderID, MaxScore.Score) AS SourceRisk ON dbo.WorkOrderRisk.WorkOrderRiskID = SourceRisk.WorkOrderRiskID ON dbo.Risk.RiskID = dbo.WorkOrderRisk.RiskTypeID ON 
                         dbo.WorkOrder.WorkOrderID = SourceRisk.WorkOrderID LEFT OUTER JOIN
                             (SELECT        EntityID, COUNT(*) AS DocumentCount
                               FROM            dbo.[Document]
                               WHERE        (EntityName = 'WorkOrder') AND (IsActive = 1)
                               GROUP BY EntityID) AS DT ON dbo.WorkOrder.WorkOrderID = DT.EntityID CROSS JOIN
                         dbo.RiskRating
GO

IF OBJECT_ID(N'vwWorkOrderMobileDetails', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwWorkOrderMobileDetails]
GO
CREATE VIEW dbo.vwWorkOrderMobileDetails
AS
SELECT     dbo.WorkOrder.WorkOrderID, dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderDescription, dbo.WorkOrder.WorkOrderHistoryDescription, 
                      dbo.WorkOrder.Instruction, dbo.WorkOrder.SafetyNote, dbo.WorkOrder.AssetID, dbo.WorkOrder.IsGroupWorkOrder, dbo.WorkOrder.GroupWorkOrderID, 
                      dbo.WorkOrder.RaisedDateTime, dbo.WorkOrder.DueStartDateTime, dbo.WorkOrder.StartedDateTime, dbo.WorkOrder.DueFinishDateTime, 
                      dbo.WorkOrder.FinishedDateTime, dbo.WorkOrder.DueReading, dbo.WorkOrder.LastDoneReading, dbo.WorkOrder.OverallDurationHours, 
                      dbo.WorkOrder.WorkOrderStatusID, dbo.WorkOrder.PriorityID, dbo.WorkOrder.PreventativeMaintenanceID, dbo.WorkOrder.AccountCodeID, dbo.WorkOrder.JobTypeID, 
                      dbo.WorkOrder.EstimatedLabourCost, dbo.WorkOrder.EstimatedMaterialCost, dbo.WorkOrder.EstimatedOtherCost, dbo.WorkOrder.ActualLabourCost, 
                      dbo.WorkOrder.ActualMaterialCost, dbo.WorkOrder.ActualOtherCost, dbo.WorkOrder.DepartmentID, dbo.WorkOrder.IsPrinted, 
                      dbo.WorkOrder.WorkOrderUserDefinedTextBox1, dbo.WorkOrder.WorkOrderUserDefinedTextBox2, dbo.WorkOrder.ComponentCodeID, 
                      dbo.WorkOrder.ProgressIndicatorPercentage, dbo.WorkOrder.ReferenceNumber, dbo.WorkOrder.DownTimeHours, dbo.WorkOrder.RepairTimeHours, 
                      dbo.WorkOrder.DoneReading, dbo.WorkOrder.FrequencyTypeID, dbo.WorkOrder.AssetMovementID, dbo.Asset.AssetNumber, dbo.Asset.IsActive AS IsAssetActive, 
                      dbo.Asset.RegistrationNumber, WorkOrder_1.WorkOrderNumber AS GroupWorkOrderNumber, dbo.WorkOrderStatus.WorkOrderStatusDescription, 
                      dbo.WorkOrderStatus.WorkOrderStatusFunctionName, dbo.Priority.PriorityDescription, dbo.JobType.JobTypeName, dbo.Department.DepartmentName, 
                      dbo.AccountCode.AccountCodeName, dbo.ComponentCode.ComponentCodeName, NULL AS RequestIDs, NULL AS RequestNumber, 
                      dbo.PreventativeMaintenance.PreventativeMaintenanceNumber, dbo.PreventativeMaintenance.IsInspection, 
                      dbo.WorkOrder.WorkOrderStatusID AS OldWorkOrderStatusID, dbo.vwAssetReadingsCurrent.Reading AS LastReading, 
                      dbo.vwAssetReadingsCurrent.ReadingDateTime AS LastReadingDateTime, dbo.WorkOrderStatus.WorkOrderStatusNumber, 
                      CASE WHEN WorkOrder.OverallDurationHours <> 0 THEN WorkOrder.OverallDurationHours ELSE ISNULL(dbo.vwWorkOrderTradeHours.SumOfActualTradeHours, 0) 
                      END AS OverallDurationHoursDisplay, CASE WHEN WorkOrderStatus.WorkOrderStatusNumber IS NULL 
                      THEN '' ELSE CAST(WorkOrderStatus.WorkOrderStatusNumber AS nvarchar) + ' - ' + WorkOrderStatus.WorkOrderStatusDescription END AS WorkOrderStatusDisplay, 
                      dbo.vwContactFullName.FullName AS CreatedByName, dbo.WorkOrder.Reading, dbo.Asset.FrequencyTypeID AS AssetFrequencyTypeID, 
                      dbo.WorkOrder.ContactSignature, dbo.FrequencyType.FrequencyTypeName, '(' + CONVERT(nvarchar(MAX), dbo.WorkOrder.AssetID) + ')' AS AssetIDForIncludeChildren,
                       dbo.GetWorkOrderTradeContactIDs(dbo.WorkOrder.WorkOrderID) AS TradeContactIDs, dbo.WorkOrder.ContractorContactID, 
                      dbo.GetAssetRegionIDs(dbo.WorkOrder.AssetID) AS RegionIDs
FROM         dbo.WorkOrder LEFT OUTER JOIN
                      dbo.vwContactFullName ON dbo.WorkOrder.CreatedByContactID = dbo.vwContactFullName.ContactID LEFT OUTER JOIN
                      dbo.vwWorkOrderTradeHours ON dbo.WorkOrder.WorkOrderID = dbo.vwWorkOrderTradeHours.WorkOrderID LEFT OUTER JOIN
                      dbo.vwAssetReadingsCurrent ON dbo.WorkOrder.AssetID = dbo.vwAssetReadingsCurrent.AssetID AND 
                      dbo.WorkOrder.FrequencyTypeID = dbo.vwAssetReadingsCurrent.FrequencyTypeID AND dbo.vwAssetReadingsCurrent.IsLast = 'YES' LEFT OUTER JOIN
                      dbo.PreventativeMaintenance ON dbo.WorkOrder.PreventativeMaintenanceID = dbo.PreventativeMaintenance.PreventativeMaintenanceID LEFT OUTER JOIN
                      dbo.FrequencyType ON dbo.WorkOrder.FrequencyTypeID = dbo.FrequencyType.FrequencyTypeID LEFT OUTER JOIN
                      dbo.ComponentCode ON dbo.WorkOrder.ComponentCodeID = dbo.ComponentCode.ComponentCodeID LEFT OUTER JOIN
                      dbo.AccountCode ON dbo.WorkOrder.AccountCodeID = dbo.AccountCode.AccountCodeID LEFT OUTER JOIN
                      dbo.Department ON dbo.WorkOrder.DepartmentID = dbo.Department.DepartmentID LEFT OUTER JOIN
                      dbo.JobType ON dbo.WorkOrder.JobTypeID = dbo.JobType.JobTypeID LEFT OUTER JOIN
                      dbo.Priority ON dbo.WorkOrder.PriorityID = dbo.Priority.PriorityID LEFT OUTER JOIN
                      dbo.WorkOrderStatus ON dbo.WorkOrder.WorkOrderStatusID = dbo.WorkOrderStatus.WorkOrderStatusID LEFT OUTER JOIN
                      dbo.WorkOrder AS WorkOrder_1 ON dbo.WorkOrder.GroupWorkOrderID = WorkOrder_1.WorkOrderID LEFT OUTER JOIN
                      dbo.Asset ON dbo.WorkOrder.AssetID = dbo.Asset.AssetID
WHERE     (dbo.WorkOrderStatus.WorkOrderStatusFunctionName <> 'Closed') AND (dbo.WorkOrderStatus.WorkOrderStatusFunctionName <> 'Cancelled')
GO

IF OBJECT_ID(N'vwWorkOrderMobileInspectionAnswers', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwWorkOrderMobileInspectionAnswers]
GO
CREATE VIEW dbo.vwWorkOrderMobileInspectionAnswers
AS
SELECT     TOP (100) PERCENT dbo.WorkOrderInspectionAnswer.WorkOrderInspectionAnswerID, dbo.WorkOrderInspectionAnswer.WorkOrderID, 
                      dbo.WorkOrderInspectionAnswer.QuestionSetQuestionID, dbo.WorkOrderInspectionAnswer.QuestionsetQuestionAnswerID, 
                      dbo.WorkOrderInspectionAnswer.QuestionSetQuestionAnswerText, dbo.WorkOrderInspectionAnswer.QuestionSetQuestionAnswerOperator, 
                      dbo.WorkOrderInspectionAnswer.ReadingValue, dbo.WorkOrderInspectionAnswer.Message, dbo.WorkOrderInspectionAnswer.StandardJobPreventativeMaintenanceID, 
                      dbo.PreventativeMaintenance.PreventativeMaintenanceNumber, dbo.WorkOrderInspectionAnswer.AssetID, dbo.WorkOrderInspectionAnswer.SequenceNumber, 
                      dbo.GetAssetRegionIDs(dbo.WorkOrderInspectionAnswer.AssetID) AS RegionIDs
FROM         dbo.WorkOrderInspectionAnswer INNER JOIN
                      dbo.WorkOrder ON dbo.WorkOrderInspectionAnswer.WorkOrderID = dbo.WorkOrder.WorkOrderID INNER JOIN
                      dbo.WorkOrderStatus ON dbo.WorkOrder.WorkOrderStatusID = dbo.WorkOrderStatus.WorkOrderStatusID LEFT OUTER JOIN
                      dbo.PreventativeMaintenance ON 
                      dbo.WorkOrderInspectionAnswer.StandardJobPreventativeMaintenanceID = dbo.PreventativeMaintenance.PreventativeMaintenanceID
WHERE     (dbo.WorkOrderStatus.WorkOrderStatusFunctionName <> 'Closed') AND (dbo.WorkOrderStatus.WorkOrderStatusFunctionName <> 'Cancelled')
ORDER BY dbo.WorkOrderInspectionAnswer.SequenceNumber
GO

IF OBJECT_ID(N'vwWorkOrderMobileInspectionAssets', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwWorkOrderMobileInspectionAssets]
GO
CREATE VIEW dbo.vwWorkOrderMobileInspectionAssets
AS
SELECT     TOP (100) PERCENT dbo.WorkOrderInspectionAsset.WorkOrderInspectionAssetID, dbo.WorkOrderInspectionAsset.WorkOrderID, 
                      dbo.WorkOrderInspectionAsset.SequenceNumber, dbo.WorkOrderInspectionAsset.AssetID, dbo.Asset.AssetNumber, dbo.Asset.AssetDescription, 
                      dbo.WorkOrderInspectionAsset.QuestionSetID, dbo.WorkOrderInspectionAsset.AssetStatus, dbo.Asset.BarcodeNumber, 
                      dbo.GetAssetRegionIDs(dbo.WorkOrderInspectionAsset.WorkOrderInspectionAssetID) AS RegionIDs
FROM         dbo.WorkOrderInspectionAsset INNER JOIN
                      dbo.Asset ON dbo.WorkOrderInspectionAsset.AssetID = dbo.Asset.AssetID INNER JOIN
                      dbo.WorkOrder ON dbo.WorkOrderInspectionAsset.WorkOrderID = dbo.WorkOrder.WorkOrderID INNER JOIN
                      dbo.WorkOrderStatus ON dbo.WorkOrder.WorkOrderStatusID = dbo.WorkOrderStatus.WorkOrderStatusID
WHERE     (dbo.WorkOrderStatus.WorkOrderStatusFunctionName <> 'Closed') AND (dbo.WorkOrderStatus.WorkOrderStatusFunctionName <> 'Cancelled')
ORDER BY dbo.WorkOrderInspectionAsset.SequenceNumber
GO

IF OBJECT_ID(N'vwWorkOrderMobileInspectionQuestions', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwWorkOrderMobileInspectionQuestions]
GO
CREATE VIEW dbo.vwWorkOrderMobileInspectionQuestions
AS
SELECT     TOP (100) PERCENT dbo.WorkOrderInspectionQuestion.WorkOrderInspectionQuestionID, dbo.WorkOrderInspectionQuestion.WorkOrderID, 
                      dbo.WorkOrderInspectionQuestion.AssetID, dbo.WorkOrderInspectionQuestion.QuestionSetQuestionID, dbo.WorkOrderInspectionQuestion.QuestionSetQuestionText, 
                      dbo.WorkOrderInspectionQuestion.QuestionTypeName, dbo.WorkOrderInspectionQuestion.SequenceNumber, dbo.WorkOrderInspectionQuestion.ReadingAnswer, 
                      dbo.WorkOrderInspectionQuestion.IsSkipped, dbo.WorkOrderInspectionQuestion.Comment, dbo.WorkOrderInspectionQuestion.Status, 
                      dbo.WorkOrderInspectionQuestion.WorkOrderInspectionAnswerID, dbo.WorkOrderInspectionQuestion.AnsweredDateTime, 
                      dbo.WorkOrderInspectionQuestion.FrequencyTypeID, CAST(0 AS bit) AS IsReadingChanged, CAST(0 AS bit) AS IsUpdateComponents, 
                      dbo.WorkOrderInspectionQuestion.ReadingAnswer AS OldReading, dbo.WorkOrderInspectionQuestion.IsNewWorkOrderHistoryToBeGenerated, 
                      dbo.FrequencyType.FrequencyTypeName, dbo.GetAssetRegionIDs(dbo.WorkOrderInspectionQuestion.AssetID) AS RegionIDs
FROM         dbo.WorkOrderInspectionQuestion INNER JOIN
                      dbo.WorkOrder ON dbo.WorkOrderInspectionQuestion.WorkOrderID = dbo.WorkOrder.WorkOrderID INNER JOIN
                      dbo.WorkOrderStatus ON dbo.WorkOrder.WorkOrderStatusID = dbo.WorkOrderStatus.WorkOrderStatusID LEFT OUTER JOIN
                      dbo.FrequencyType ON dbo.WorkOrderInspectionQuestion.FrequencyTypeID = dbo.FrequencyType.FrequencyTypeID
WHERE     (dbo.WorkOrderStatus.WorkOrderStatusFunctionName <> 'Closed') AND (dbo.WorkOrderStatus.WorkOrderStatusFunctionName <> 'Cancelled')
ORDER BY dbo.WorkOrderInspectionQuestion.SequenceNumber
GO

IF OBJECT_ID(N'vwWorkOrderPermit', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwWorkOrderPermit]
GO
CREATE VIEW dbo.vwWorkOrderPermit
AS
SELECT        dbo.WorkOrderPermit.WorkOrderID, dbo.PermitType.PermitTypeID, dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrderPermit.WorkOrderPermitID, 
                         dbo.PermitType.PermitTypeName + ' - ' + dbo.PermitType.PermitTypeDescription AS PermitType, '' AS RiskTypeName, ISNULL(dbo.Contact.FirstName, '') + ' ' + ISNULL(dbo.Contact.LastName, '') 
                         AS RequestedByFullName, dbo.WorkOrderPermit.ValidToDateTime, ISNULL(responsible.FirstName, '') + ' ' + ISNULL(responsible.LastName, '') AS ResponsiblePersonFullName, 
                         dbo.WorkOrderPermit.ValidFromDateTime, dbo.WorkOrderPermit.IsLocked, dbo.GetWorkOrderRegionIDs(dbo.WorkOrderPermit.WorkOrderID) AS RegionIDs
FROM            dbo.WorkOrderPermit INNER JOIN
                         dbo.PermitType ON dbo.PermitType.PermitTypeID = dbo.WorkOrderPermit.PermitTypeID LEFT OUTER JOIN
                         dbo.Contact ON dbo.WorkOrderPermit.RequestedByContactID = dbo.Contact.ContactID LEFT OUTER JOIN
                         dbo.Contact AS responsible ON dbo.WorkOrderPermit.ResponsiblePersonContactID = responsible.ContactID LEFT OUTER JOIN
                         dbo.WorkOrder ON dbo.WorkOrder.WorkOrderID = dbo.WorkOrderPermit.WorkOrderID
GO

IF OBJECT_ID(N'vwWorkOrderSelector', N'V') IS NOT NULL
    DROP VIEW [dbo].[vwWorkOrderSelector]
GO
CREATE VIEW dbo.vwWorkOrderSelector
AS
SELECT     dbo.WorkOrder.WorkOrderID, dbo.WorkOrder.WorkOrderNumber, dbo.WorkOrder.WorkOrderDescription, dbo.Asset.AssetNumber, 
                      dbo.WorkOrderStatus.WorkOrderStatusDescription, dbo.WorkOrderStatus.WorkOrderStatusFunctionName, dbo.WorkOrder.ReferenceNumber, 
                      dbo.Priority.PriorityDescription, dbo.JobType.JobTypeName, dbo.AccountCode.AccountCodeName, dbo.GetAssetRegionIDs(dbo.WorkOrder.AssetID) 
                      AS AssetRegionIDs, dbo.GetInspectionRegionIDs(dbo.WorkOrder.PreventativeMaintenanceID) AS InspectionRegionIDs, dbo.WorkOrder.CreatedDateTime, 
                      dbo.WorkOrder.FinishedDateTime, dbo.vwContactFullName.FullName AS CreatedByFullName, dbo.WorkOrder.AssetID, CONVERT(Nvarchar(MAX), 
                      dbo.WorkOrder.WorkOrderNumber) AS WorkOrderNumberForFilter
FROM         dbo.WorkOrder INNER JOIN
                      dbo.WorkOrderStatus ON dbo.WorkOrder.WorkOrderStatusID = dbo.WorkOrderStatus.WorkOrderStatusID INNER JOIN
                      dbo.Asset ON dbo.WorkOrder.AssetID = dbo.Asset.AssetID LEFT OUTER JOIN
                      dbo.vwContactFullName ON dbo.WorkOrder.CreatedByContactID = dbo.vwContactFullName.ContactID LEFT OUTER JOIN
                      dbo.Priority ON dbo.WorkOrder.PriorityID = dbo.Priority.PriorityID LEFT OUTER JOIN
                      dbo.JobType ON dbo.WorkOrder.JobTypeID = dbo.JobType.JobTypeID LEFT OUTER JOIN
                      dbo.AccountCode ON dbo.WorkOrder.AccountCodeID = dbo.AccountCode.AccountCodeID
GO

